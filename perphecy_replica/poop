{'/home/kevin/thesis/git/abspath.c': [('is_directory( const char * path)', 8, 12), ('strip_last_component( struct strbuf * path)', 15, 28), ('get_next_component( struct strbuf * next , struct strbuf * remaining)', 31, 49), ('get_root_part( struct strbuf * resolved , struct strbuf * remaining)', 52, 62), ('strbuf_realpath( struct strbuf * resolved , const char * path , int die_on_error)', 81, 203), ('real_path( const char * path)', 209, 213), ('real_path_if_valid( const char * path)', 215, 219), ('real_pathdup( const char * path , int die_on_error)', 221, 232), ('absolute_path( const char * path)', 238, 244), ('absolute_pathdup( const char * path)', 246, 251), ('prefix_filename( const char * pfx , const char * arg)', 253, 270)], '/home/kevin/thesis/git/advice.c': [('parse_advise_color_slot( const char * slot)', 36, 43), ('advise_get_color( enum color_advice ix)', 45, 50), ('advise( const char * advice , ...)', 80, 100), ('git_default_advice_config( const char * var , const char * value)', 102, 132), ('error_resolve_conflict( const char * me)', 134, 158), ('die_resolve_conflict( const char * me)', 160, 164), ('die_conclude_merge( void)', 166, 172), ('detach_advice( const char * new_name)', 174, 186)], '/home/kevin/thesis/git/advice.h': [], '/home/kevin/thesis/git/alias.c': [('config_alias_cb( const char * key , const char * value , void * d)', 12, 29), ('alias_lookup( const char * alias)', 31, 38), ('list_aliases( struct string_list * list)', 40, 45), ('split_cmdline( char * cmdline , const char ** * argv)', 54, 103), ('split_cmdline_strerror( int split_cmdline_errno)', 105, 108)], '/home/kevin/thesis/git/alias.h': [], '/home/kevin/thesis/git/alloc.c': [('alloc_node( struct alloc_state * s , size_t node_size)', 35, 49), ('alloc_blob_node( void)', 52, 57), ('alloc_tree_node( void)', 60, 65), ('alloc_tag_node( void)', 68, 73), ('alloc_object_node( void)', 76, 81), ('alloc_commit_index( void)', 85, 89), ('alloc_commit_node( void)', 91, 98), ('report( const char * name , unsigned int count , size_t size)', 100, 104), ('alloc_report( void)', 109, 116)], '/home/kevin/thesis/git/apply.c': [('git_apply_config( void)', 24, 29), ('parse_whitespace_option( struct apply_state * state , const char * option)', 31, 59), ('parse_ignorewhitespace_option( struct apply_state * state , const char * option)', 61, 75), ('init_apply_state( struct apply_state * state , const char * prefix)', 77, 101), ('clear_apply_state( struct apply_state * state)', 103, 110), ('mute_routine( const char * msg , va_list params)', 112, 115), ('check_apply_state( struct apply_state * state , int force_apply)', 117, 155), ('set_default_whitespace_mode( struct apply_state * state)', 157, 161), ('free_fragment_list( struct fragment * list)', 229, 238), ('free_patch( struct patch * patch)', 240, 248), ('free_patch_list( struct patch * list)', 250, 257), ('hash_line( const char * cp , size_t len)', 284, 294), ('fuzzy_matchlines( const char * s1 , size_t n1 , const char * s2 , size_t n2)', 300, 330), ('add_line_info( struct image * img , const char * bol , size_t len , unsigned flag)', 332, 339), ('prepare_image( struct image * image , char * buf , size_t len , int prepare_linetable)', 346, 370), ('clear_image( struct image * image)', 372, 377), ('say_patch_name( FILE * output , const char * fmt , struct patch * patch)', 380, 398), ('read_patch_file( struct strbuf * sb , int fd)', 402, 415), ('linelen( const char * buffer , unsigned long size)', 417, 426), ('is_dev_null( const char * str)', 428, 431), ('name_terminate( int c , int terminate)', 436, 444), ('squash_slash( char * name)', 447, 461), ('find_name_gnu( struct apply_state * state , const char * line , const char * def , int p_value)', 463, 493), ('sane_tz_len( const char * line , size_t len)', 495, 511), ('tz_with_colon_len( const char * line , size_t len)', 513, 529), ('date_len( const char * line , size_t len)', 531, 549), ('short_time_len( const char * line , size_t len)', 551, 567), ('fractional_time_len( const char * line , size_t len)', 569, 591), ('trailing_spaces_len( const char * line , size_t len)', 593, 610), ('diff_timestamp_len( const char * line , size_t len)', 612, 652), ('find_name_common( struct apply_state * state , const char * line , const char * def , int p_value , const char * end , int terminate)', 654, 703), ('find_name( struct apply_state * state , const char * line , char * def , int p_value , int terminate)', 705, 718), ('find_name_traditional( struct apply_state * state , const char * line , char * def , int p_value)', 720, 741), ('guess_p_value( struct apply_state * state , const char * nameline)', 747, 775), ('has_epoch_timestamp( const char * nameline)', 782, 847), ('parse_traditional_patch( struct apply_state * state , const char * first , const char * second , struct patch * patch)', 856, 907), ('gitdiff_hdrend( struct apply_state * state , const char * line , struct patch * patch)', 909, 914), ('gitdiff_verify_name( struct apply_state * state , const char * line , int isnull , char ** name , int side)', 928, 958), ('gitdiff_oldname( struct apply_state * state , const char * line , struct patch * patch)', 960, 967), ('gitdiff_newname( struct apply_state * state , const char * line , struct patch * patch)', 969, 976), ('parse_mode_line( const char * line , int linenr , unsigned int * mode)', 978, 985), ('gitdiff_oldmode( struct apply_state * state , const char * line , struct patch * patch)', 987, 992), ('gitdiff_newmode( struct apply_state * state , const char * line , struct patch * patch)', 994, 999), ('gitdiff_delete( struct apply_state * state , const char * line , struct patch * patch)', 1001, 1009), ('gitdiff_newfile( struct apply_state * state , const char * line , struct patch * patch)', 1011, 1019), ('gitdiff_copysrc( struct apply_state * state , const char * line , struct patch * patch)', 1021, 1029), ('gitdiff_copydst( struct apply_state * state , const char * line , struct patch * patch)', 1031, 1039), ('gitdiff_renamesrc( struct apply_state * state , const char * line , struct patch * patch)', 1041, 1049), ('gitdiff_renamedst( struct apply_state * state , const char * line , struct patch * patch)', 1051, 1059), ('gitdiff_similarity( struct apply_state * state , const char * line , struct patch * patch)', 1061, 1069), ('gitdiff_dissimilarity( struct apply_state * state , const char * line , struct patch * patch)', 1071, 1079), ('gitdiff_index( struct apply_state * state , const char * line , struct patch * patch)', 1081, 1114), ('gitdiff_unrecognized( struct apply_state * state , const char * line , struct patch * patch)', 1120, 1125), ('skip_tree_prefix( struct apply_state * state , const char * line , int llen)', 1131, 1148), ('git_header_name( struct apply_state * state , const char * line , int llen)', 1158, 1294), ('check_header_line( struct apply_state * state , struct patch * patch)', 1296, 1306), ('parse_git_header( struct apply_state * state , const char * line , int len , unsigned int size , struct patch * patch)', 1309, 1383), ('parse_num( const char * line , unsigned long * p)', 1385, 1393), ('parse_range( const char * line , int len , int offset , const char * expect , unsigned long * p1 , unsigned long * p2)', 1395, 1431), ('recount_diff( const char * line , int size , struct fragment * fragment)', 1433, 1481), ('parse_fragment_header( const char * line , int len , struct fragment * fragment)', 1487, 1499), ('find_header( struct apply_state * state , const char * line , unsigned long size , int * hdrsize , struct patch * patch)', 1509, 1605), ('record_ws_error( struct apply_state * state , unsigned result , const char * line , int len , int linenr)', 1607, 1628), ('check_whitespace( struct apply_state * state , const char * line , int len , unsigned ws_rule)', 1630, 1638), ('check_old_for_crlf( struct patch * patch , const char * line , int len)', 1644, 1650), ('parse_fragment( struct apply_state * state , const char * line , unsigned long size , struct patch * patch , struct fragment * fragment)', 1659, 1767), ('parse_single_patch( struct apply_state * state , const char * line , unsigned long size , struct patch * patch)', 1781, 1846), ('metadata_changes( struct patch * patch)', 1848, 1856), ('inflate_it( const void * data , unsigned long size , unsigned long inflated_size)', 1858, 1879), ('parse_binary_hunk( struct apply_state * state , char ** buf_p , unsigned long * sz_p , int * status_p , int * used_p)', 1886, 1991), ('parse_binary( struct apply_state * state , char * buffer , unsigned long size , struct patch * patch)', 1998, 2046), ('prefix_one( struct apply_state * state , char ** name)', 2048, 2055), ('prefix_patch( struct apply_state * state , struct patch * p)', 2057, 2063), ('add_name_limit( struct apply_state * state , const char * name , int exclude)', 2069, 2077), ('use_patch( struct apply_state * state , struct patch * p)', 2079, 2104), ('parse_chunk( struct apply_state * state , char * buffer , unsigned long size , struct patch * patch)', 2117, 2191), ('reverse_patches( struct patch * p)', 2193, 2209), ('show_stats( struct apply_state * state , struct patch * patch)', 2216, 2261), ('read_old_data( struct stat * st , struct patch * patch , const char * path , struct strbuf * buf)', 2263, 2289), ('update_pre_post_images( struct image * preimage , struct image * postimage , char * buf , size_t len , size_t postlen)', 2298, 2384), ('line_by_line_fuzzy_match( struct image * img , struct image * preimage , struct image * postimage , unsigned long current , int current_lno , int preimage_limit)', 2386, 2452), ('match_fragment( struct apply_state * state , struct image * img , struct image * preimage , struct image * postimage , unsigned long current , int current_lno , unsigned ws_rule , int match_beginning , int match_end)', 2454, 2658), ('find_pos( struct apply_state * state , struct image * img , struct image * preimage , struct image * postimage , int line , unsigned ws_rule , int match_beginning , int match_end)', 2660, 2736), ('remove_first_line( struct image * img)', 2738, 2744), ('remove_last_line( struct image * img)', 2746, 2749), ('update_image( struct apply_state * state , struct image * img , int applied_pos , struct image * preimage , struct image * postimage)', 2756, 2823), ('apply_one_fragment( struct apply_state * state , struct image * img , struct fragment * frag , int inaccurate_eof , unsigned ws_rule , int nth_fragment)', 2830, 3084), ('apply_binary_fragment( struct apply_state * state , struct image * img , struct patch * patch)', 3086, 3126), ('apply_binary( struct apply_state * state , struct image * img , struct patch * patch)', 3134, 3209), ('apply_fragments( struct apply_state * state , struct image * img , struct patch * patch)', 3211, 3233), ('read_blob_object( struct strbuf * buf , const struct object_id * oid , unsigned mode)', 3235, 3252), ('read_file_or_gitlink( const struct cache_entry * ce , struct strbuf * buf)', 3254, 3259), ('in_fn_table( struct apply_state * state , const char * name)', 3261, 3273), ('to_be_deleted( struct patch * patch)', 3290, 3293), ('was_deleted( struct patch * patch)', 3295, 3298), ('add_to_fn_table( struct apply_state * state , struct patch * patch)', 3300, 3322), ('prepare_fn_table( struct apply_state * state , struct patch * patch)', 3324, 3337), ('checkout_target( struct index_state * istate , struct cache_entry * ce , struct stat * st)', 3339, 3349), ('previous_patch( struct apply_state * state , struct patch * patch , int * gone)', 3351, 3372), ('verify_index_match( const struct cache_entry * ce , struct stat * st)', 3374, 3382), ('load_patch_target( struct apply_state * state , struct strbuf * buf , const struct cache_entry * ce , struct stat * st , struct patch * patch , const char * name , unsigned expected_mode)', 3386, 3411), ('load_preimage( struct apply_state * state , struct image * image , struct patch * patch , struct stat * st , const struct cache_entry * ce)', 3420, 3460), ('three_way_merge( struct image * image , char * path , const struct object_id * base , const struct object_id * ours , const struct object_id * theirs)', 3462, 3491), ('load_current( struct apply_state * state , struct image * image , struct patch * patch)', 3498, 3535), ('try_threeway( struct apply_state * state , struct image * image , struct patch * patch , struct stat * st , const struct cache_entry * ce)', 3537, 3618), ('apply_data( struct apply_state * state , struct patch * patch , struct stat * st , const struct cache_entry * ce)', 3620, 3643), ('check_preimage( struct apply_state * state , struct patch * patch , struct cache_entry ** ce , struct stat * st)', 3656, 3725), ('check_to_create( struct apply_state * state , const char * new_name , int ok_if_exists)', 3731, 3762), ('register_symlink_changes( struct apply_state * state , const char * path , uintptr_t what)', 3764, 3777), ('check_symlink_changes( struct apply_state * state , const char * path)', 3779, 3787), ('prepare_symlink_changes( struct apply_state * state , struct patch * patch)', 3789, 3801), ('path_is_beyond_symlink_1( struct apply_state * state , struct strbuf * name)', 3803, 3837), ('path_is_beyond_symlink( struct apply_state * state , const char * name_)', 3839, 3850), ('check_unsafe_path( struct patch * patch)', 3852, 3868), ('check_patch( struct apply_state * state , struct patch * patch)', 3874, 3977), ('check_patch_list( struct apply_state * state , struct patch * patch)', 3979, 3997), ('read_apply_cache( struct apply_state * state)', 3999, 4005), ('get_current_oid( struct apply_state * state , const char * path , struct object_id * oid)', 4008, 4020), ('preimage_oid_in_gitlink_patch( struct patch * p , struct object_id * oid)', 4022, 4054), ('build_fake_ancestor( struct apply_state * state , struct patch * list)', 4057, 4113), ('stat_patch_list( struct apply_state * state , struct patch * patch)', 4115, 4127), ('numstat_patch_list( struct apply_state * state , struct patch * patch)', 4129, 4141), ('show_file_mode_name( const char * newdelete , unsigned int mode , const char * name)', 4143, 4149), ('show_mode_change( struct patch * p , int show_name)', 4151, 4161), ('show_rename_copy( struct patch * p)', 4163, 4194), ('summary_patch_list( struct patch * patch)', 4196, 4219), ('patch_stats( struct apply_state * state , struct patch * patch)', 4221, 4241), ('remove_file( struct apply_state * state , struct patch * patch , int rmdir_empty)', 4243, 4255), ('add_index_file( struct apply_state * state , const char * path , unsigned mode , void * buf , unsigned long size)', 4257, 4306), ('try_create_file( const char * path , unsigned int mode , const char * buf , unsigned long size)', 4314, 4350), ('create_one_file( struct apply_state * state , char * path , unsigned mode , const char * buf , unsigned long size)', 4361, 4419), ('add_conflicted_stages_file( struct apply_state * state , struct patch * patch)', 4421, 4452), ('create_file( struct apply_state * state , struct patch * patch)', 4454, 4470), ('write_out_one_result( struct apply_state * state , struct patch * patch , int phase)', 4473, 4496), ('write_out_one_reject( struct apply_state * state , struct patch * patch)', 4498, 4570), ('write_out_results( struct apply_state * state , struct patch * list)', 4578, 4622), ('apply_patch( struct apply_state * state , int fd , const char * filename , int options)', 4633, 4750), ('apply_option_parse_exclude( const struct option * opt , const char * arg , int unset)', 4752, 4758), ('apply_option_parse_include( const struct option * opt , const char * arg , int unset)', 4760, 4767), ('apply_option_parse_p( const struct option * opt , const char * arg , int unset)', 4769, 4777), ('apply_option_parse_space_change( const struct option * opt , const char * arg , int unset)', 4779, 4788), ('apply_option_parse_whitespace( const struct option * opt , const char * arg , int unset)', 4790, 4798), ('apply_option_parse_directory( const struct option * opt , const char * arg , int unset)', 4800, 4808), ('apply_all_patches( struct apply_state * state , int argc , const char ** argv , int options)', 4810, 4913), ('apply_parse_options( int argc , const char ** argv , struct apply_state * state , int * force_apply , int * options , const char * const * apply_usage)', 4915, 4991)], '/home/kevin/thesis/git/apply.h': [], '/home/kevin/thesis/git/archive-tar.c': [('write_if_needed( void)', 41, 47), ('do_write_blocked( const void * data , unsigned long size)', 53, 76), ('finish_record( void)', 78, 87), ('write_blocked( const void * data , unsigned long size)', 89, 93), ('write_trailer( void)', 99, 108), ('stream_blocked( const struct object_id * oid)', 114, 135), ('strbuf_append_ext_header( struct strbuf * sb , const char * keyword , const char * value , unsigned int valuelen)', 143, 157), ('strbuf_append_ext_header_uint( struct strbuf * sb , const char * keyword , uintmax_t value)', 162, 171), ('ustar_header_chksum( const struct ustar_header * header)', 173, 184), ('get_path_prefix( const char * path , size_t pathlen , size_t maxlen)', 186, 197), ('prepare_header( struct archiver_args * args , struct ustar_header * header , unsigned int mode , unsigned long size)', 199, 218), ('write_extended_header( struct archiver_args * args , const struct object_id * oid , const void * buffer , unsigned long size)', 220, 233), ('write_tar_entry( struct archiver_args * args , const struct object_id * oid , const char * path , size_t pathlen , unsigned int mode)', 235, 324), ('write_global_extended_header( struct archiver_args * args)', 326, 353), ('find_tar_filter( const char * name , int len)', 359, 368), ('tar_filter_config( const char * var , const char * value , void * data)', 370, 406), ('git_tar_config( const char * var , const char * value , void * cb)', 408, 421), ('write_tar_archive( const struct archiver * ar , struct archiver_args * args)', 423, 433), ('write_tar_filter_archive( const struct archiver * ar , struct archiver_args * args)', 435, 471), ('init_tar_archiver( void)', 479, 494)], '/home/kevin/thesis/git/archive-zip.c': [('copy_le16( unsigned char * dest , unsigned int n)', 130, 134), ('copy_le32( unsigned char * dest , unsigned int n)', 136, 142), ('copy_le64( unsigned char * dest , uint64_t n)', 144, 154), ('clamp_max( uint64_t n , uint64_t max , int * clamped)', 156, 162), ('copy_le16_clamp( unsigned char * dest , uint64_t n , int * clamped)', 164, 167), ('copy_le32_clamp( unsigned char * dest , uint64_t n , int * clamped)', 169, 172), ('strbuf_add_le( struct strbuf * sb , size_t size , uintmax_t n)', 174, 181), ('clamp32( uintmax_t n)', 183, 187), ('zlib_deflate_raw( void * data , unsigned long size , int compression_level , unsigned long * compressed_size)', 189, 220), ('write_zip_data_desc( unsigned long size , unsigned long compressed_size , unsigned long crc)', 222, 243), ('set_zip_header_data_desc( struct zip_local_header * header , unsigned long size , unsigned long compressed_size , unsigned long crc)', 245, 253), ('has_only_ascii( const char * s)', 255, 264), ('entry_is_binary( const char * path , const void * buffer , size_t size)', 266, 274), ('write_zip_entry( struct archiver_args * args , const struct object_id * oid , const char * path , size_t pathlen , unsigned int mode)', 278, 548), ('write_zip64_trailer( void)', 550, 573), ('write_zip_trailer( const unsigned char * sha1)', 575, 596), ('dos_time( timestamp_t * timestamp , int * dos_date , int * dos_time)', 598, 613), ('archive_zip_config( const char * var , const char * value , void * data)', 615, 618), ('write_zip_archive( const struct archiver * ar , struct archiver_args * args)', 620, 638), ('init_zip_archiver( void)', 646, 649)], '/home/kevin/thesis/git/archive.c': [('register_archiver( struct archiver * ar)', 25, 29), ('format_subst( const struct commit * commit , const char * src , size_t len , struct strbuf * buf)', 31, 64), ('object_file_to_archive( const struct archiver_args * args , const char * path , const struct object_id * oid , unsigned int mode , enum object_type * type , unsigned long * sizep)', 66, 89), ('get_archive_attrs( const char * path)', 106, 112), ('check_attr_export_ignore( const struct attr_check * check)', 114, 117), ('check_attr_export_subst( const struct attr_check * check)', 119, 122), ('write_archive_entry( const struct object_id * oid , const char * base , int baselen , const char * filename , unsigned mode , int stage , void * context)', 124, 165), ('queue_directory( const unsigned char * sha1 , struct strbuf * base , const char * filename , unsigned mode , int stage , struct archiver_context * c)', 167, 181), ('write_directory( struct archiver_context * c)', 183, 199), ('queue_or_write_archive_entry( const struct object_id * oid , struct strbuf * base , const char * filename , unsigned mode , int stage , void * context)', 201, 236), ('write_archive_entries( struct archiver_args * args , write_archive_entry_fn_t write_entry)', 238, 290), ('lookup_archiver( const char * name)', 292, 304), ('reject_entry( const struct object_id * oid , struct strbuf * base , const char * filename , unsigned mode , int stage , void * context)', 306, 320), ('path_exists( struct tree * tree , const char * path)', 322, 334), ('parse_pathspec_arg( const char ** pathspec , struct archiver_args * ar_args)', 336, 355), ('parse_treeish_arg( const char ** argv , struct archiver_args * ar_args , const char * prefix , int remote)', 357, 411), ('parse_archive_args( int argc , const char ** argv , const struct archiver ** ar , struct archiver_args * args , const char * name_hint , int is_remote)', 418, 509), ('write_archive( int argc , const char ** argv , const char * prefix , const char * name_hint , int remote)', 511, 537), ('match_extension( const char * filename , const char * ext)', 539, 551), ('archive_format_from_filename( const char * filename)', 553, 561)], '/home/kevin/thesis/git/archive.h': [], '/home/kevin/thesis/git/argv-array.c': [('argv_array_init( struct argv_array * array)', 7, 12), ('argv_array_push_nodup( struct argv_array * array , const char * value)', 14, 22), ('argv_array_push( struct argv_array * array , const char * value)', 24, 28), ('argv_array_pushf( struct argv_array * array , const char * fmt , ...)', 30, 41), ('argv_array_pushl( struct argv_array * array , ...)', 43, 52), ('argv_array_pushv( struct argv_array * array , const char ** argv)', 54, 58), ('argv_array_pop( struct argv_array * array)', 60, 67), ('argv_array_split( struct argv_array * array , const char * to_split)', 69, 87), ('argv_array_clear( struct argv_array * array)', 89, 98), ('argv_array_detach( struct argv_array * array)', 100, 109)], '/home/kevin/thesis/git/argv-array.h': [], '/home/kevin/thesis/git/attr.c': [('git_attr_name( const struct git_attr * attr)', 37, 40), ('hashmap_lock( struct attr_hashmap * map)', 49, 54), ('hashmap_unlock( struct attr_hashmap * map)', 56, 61), ('attr_hash_entry_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 79, 87), ('attr_hashmap_init( struct attr_hashmap * map)', 90, 93), ('attr_hashmap_get( struct attr_hashmap * map , const char * key , size_t keylen)', 99, 114), ('attr_hashmap_add( struct attr_hashmap * map , const char * key , size_t keylen , void * value)', 117, 133), ('all_attrs_init( struct attr_hashmap * map , struct attr_check * check)', 151, 193), ('attr_name_valid( const char * name , size_t namelen)', 195, 212), ('report_invalid_attr( const char * name , size_t len , const char * src , int lineno)', 214, 222), ('git_attr_internal( const char * name , int namelen)', 229, 252), ('git_attr( const char * name)', 254, 257), ('parse_attr( const char * src , int lineno , const char * cp , struct attr_state * e)', 304, 347), ('parse_attr_line( const char * line , const char * src , int lineno , int macro_ok)', 349, 435), ('attr_stack_free( struct attr_stack * e)', 464, 485), ('drop_attr_stack( struct attr_stack ** stack)', 487, 494), ('vector_lock( void)', 506, 511), ('vector_unlock( void)', 513, 518), ('check_vector_add( struct attr_check * c)', 520, 530), ('check_vector_remove( struct attr_check * check)', 532, 553), ('drop_all_attr_stacks( void)', 556, 567), ('attr_check_alloc( void)', 569, 577), ('attr_check_initl( const char * one , ...)', 579, 611), ('attr_check_dup( const struct attr_check * check)', 613, 628), ('attr_check_append( struct attr_check * check , const struct git_attr * attr)', 630, 639), ('attr_check_reset( struct attr_check * check)', 641, 644), ('attr_check_clear( struct attr_check * check)', 646, 656), ('attr_check_free( struct attr_check * check)', 658, 667), ('handle_attr_line( struct attr_stack * res , const char * line , const char * src , int lineno , int macro_ok)', 674, 687), ('read_attr_from_array( const char ** list)', 689, 699), ('git_attr_set_direction( enum git_attr_direction new_direction , struct index_state * istate)', 713, 724), ('read_attr_from_file( const char * path , int macro_ok)', 726, 744), ('read_attr_from_index( const char * path , int macro_ok)', 746, 769), ('read_attr( const char * path , int macro_ok)', 771, 798), ('debug_info( const char * what , struct attr_stack * elem)', 801, 804), ('debug_set( const char * what , const char * match , struct git_attr * attr , const void * v)', 805, 818), ('git_etc_gitattributes( void)', 827, 833), ('get_home_gitattributes( void)', 835, 841), ('git_attr_system( void)', 843, 846), ('push_stack( struct attr_stack ** attr_stack_p , struct attr_stack * elem , char * origin , size_t originlen)', 850, 860), ('bootstrap_attr_stack( struct attr_stack ** stack)', 862, 897), ('prepare_attr_stack( const char * path , int dirlen , struct attr_stack ** stack)', 899, 991), ('path_matches( const char * pathname , int pathlen , int basename_offset , const struct pattern * pat , const char * base , int baselen)', 993, 1014), ('fill_one( const char * what , struct all_attrs_item * all_attrs , const struct match_attr * a , int rem)', 1018, 1038), ('fill( const char * path , int pathlen , int basename_offset , const struct attr_stack * stack , struct all_attrs_item * all_attrs , int rem)', 1040, 1059), ('macroexpand_one( struct all_attrs_item * all_attrs , int nr , int rem)', 1061, 1069), ('determine_macros( struct all_attrs_item * all_attrs , const struct attr_stack * stack)', 1076, 1091), ('collect_some_attrs( const char * path , struct attr_check * check)', 1098, 1137), ('git_check_attr( const char * path , struct attr_check * check)', 1139, 1154), ('git_all_attrs( const char * path , struct attr_check * check)', 1156, 1172), ('attr_start( void)', 1174, 1180)], '/home/kevin/thesis/git/attr.h': [], '/home/kevin/thesis/git/base85.c': [('prep_base85( void)', 29, 38), ('decode_85( char * dst , const char * buffer , int len)', 40, 77), ('encode_85( char * buf , const unsigned char * data , int bytes)', 79, 102), ('main( int ac , char ** av)', 105, 131)], '/home/kevin/thesis/git/bisect.c': [('count_distance( struct commit_list * entry)', 37, 62), ('clear_distance( struct commit_list * list)', 64, 71), ('weight( struct commit_list * elem)', 75, 78), ('weight_set( struct commit_list * elem , int weight)', 80, 83), ('count_interesting_parents( struct commit * commit)', 85, 96), ('halfway( struct commit_list * p , int nr)', 98, 117), ('show_list( const char * debug , int counted , int nr , struct commit_list * list)', 122, 158), ('best_bisection( struct commit_list * list , int nr)', 161, 183), ('compare_commit_dist( const void * a_ , const void * b_)', 190, 199), ('best_bisection_sorted( struct commit_list * list , int nr)', 201, 240), ('do_find_bisection( struct commit_list * list , int nr , int * weights , int find_all)', 255, 365), ('find_bisection( struct commit_list ** commit_list , int * reaches , int * all , int find_all)', 367, 415), ('register_ref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 417, 436), ('read_bisect_refs( void)', 438, 441), ('read_bisect_paths( struct argv_array * array)', 452, 467), ('join_sha1_array_hex( struct oid_array * array , char delim)', 469, 481), ('filter_skipped( struct commit_list * list , struct commit_list ** tried , int show_all , int * count , int * skipped_first)', 496, 544), ('get_prn( unsigned count)', 554, 557), ('sqrti( int val)', 563, 577), ('skip_away( struct commit_list * list , int count)', 579, 602), ('managed_skipped( struct commit_list * list , struct commit_list ** tried)', 604, 620), ('bisect_rev_setup( struct rev_info * revs , const char * prefix , const char * bad_format , const char * good_format , int read_paths)', 622, 645), ('bisect_common( struct rev_info * revs)', 647, 653), ('exit_if_skipped_commits( struct commit_list * tried , const struct object_id * bad)', 655, 671), ('is_expected_rev( const struct object_id * oid)', 673, 695), ('bisect_checkout( const struct object_id * bisect_rev , int no_checkout)', 697, 717), ('get_commit_reference( const struct object_id * oid)', 719, 725), ('get_bad_and_good_commits( int * rev_nr)', 727, 739), ('handle_bad_merge_base( void)', 741, 770), ('handle_skipped_merge_base( const struct object_id * mb)', 772, 785), ('check_merge_bases( int rev_nr , struct commit ** rev , int no_checkout)', 796, 817), ('check_ancestors( int rev_nr , struct commit ** rev , const char * prefix)', 819, 833), ('check_good_are_ancestors_of_bad( const char * prefix , int no_checkout)', 843, 876), ('show_diff_tree( const char * prefix , struct commit * commit)', 881, 902), ('read_bisect_terms( const char ** read_bad , const char ** read_good)', 909, 931), ('bisect_next_all( const char * prefix , int no_checkout)', 941, 1009), ('log2i( int n)', 1011, 1019), ('exp2i( int n)', 1021, 1024), ('estimate_bisect_steps( int all)', 1036, 1048), ('mark_for_removal( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 1050, 1057), ('bisect_clean_state( void)', 1059, 1085)], '/home/kevin/thesis/git/bisect.h': [], '/home/kevin/thesis/git/blame.c': [('blame_origin_decref( struct blame_origin * o)', 10, 30), ('make_origin( struct commit * commit , const char * path)', 38, 47), ('get_origin( struct commit * commit , const char * path)', 53, 69), ('verify_working_tree_path( struct commit * work_tree , const char * path)', 73, 96), ('append_parent( struct commit_list ** tail , const struct object_id * oid)', 98, 106), ('append_merge_parents( struct commit_list ** tail)', 108, 128), ('set_commit_buffer_from_strbuf( struct commit * c , struct strbuf * sb)', 135, 140), ('fake_working_tree_commit( struct diff_options * opt , const char * path , const char * contents_from)', 146, 267), ('diff_hunks( mmfile_t * file_a , mmfile_t * file_b , xdl_emit_hunk_consume_func_t hunk_func , void * cb_data , int xdl_opts)', 271, 282), ('fill_origin_blob( struct diff_options * opt , struct blame_origin * o , mmfile_t * file , int * num_read_blob)', 288, 312), ('drop_origin_blob( struct blame_origin * o)', 314, 319), ('blame_merge( struct blame_entry * list1 , struct blame_entry * list2)', 329, 367), ('get_next_blame( const void * p)', 369, 372), ('set_next_blame( void * p1 , void * p2)', 374, 377), ('compare_blame_final( const void * p1 , const void * p2)', 384, 388), ('compare_blame_suspect( const void * p1 , const void * p2)', 390, 405), ('blame_sort_final( struct blame_scoreboard * sb)', 407, 411), ('compare_commits_by_reverse_commit_date( const void * a , const void * b , void * c)', 413, 418), ('sanity_check_refcnt( struct blame_scoreboard * sb)', 424, 441), ('blame_coalesce( struct blame_scoreboard * sb)', 448, 466), ('queue_blames( struct blame_scoreboard * sb , struct blame_origin * porigin , struct blame_entry * sorted)', 474, 490), ('fill_blob_sha1_and_mode( struct blame_origin * origin)', 501, 514), ('find_origin( struct commit * parent , struct blame_origin * origin)', 520, 602), ('find_rename( struct commit * parent , struct blame_origin * origin)', 608, 643), ('add_blame_entry( struct blame_entry ** * queue , const struct blame_entry * src)', 648, 658), ('dup_entry( struct blame_entry ** * queue , struct blame_entry * dst , struct blame_entry * src)', 665, 674), ('blame_nth_line( struct blame_scoreboard * sb , long lno)', 676, 679), ('split_overlap( struct blame_entry * split , struct blame_entry * e , int tlno , int plno , int same , struct blame_origin * parent)', 695, 736), ('split_blame( struct blame_entry ** * blamed , struct blame_entry ** * unblamed , struct blame_entry * split , struct blame_entry * e)', 743, 774), ('decref_split( struct blame_entry * split)', 780, 786), ('reverse_blame( struct blame_entry * head , struct blame_entry * tail)', 798, 808), ('blame_chunk( struct blame_entry ** * dstq , struct blame_entry ** * srcq , int tlno , int offset , int same , struct blame_origin * parent)', 820, 910), ('blame_chunk_cb( long start_a , long count_a , long start_b , long count_b , void * data)', 920, 930), ('pass_blame_to_parent( struct blame_scoreboard * sb , struct blame_origin * target , struct blame_origin * parent)', 937, 966), ('blame_entry_score( struct blame_scoreboard * sb , struct blame_entry * e)', 977, 996), ('copy_split_if_better( struct blame_scoreboard * sb , struct blame_entry * best_so_far , struct blame_entry * potential)', 1004, 1022), ('handle_split( struct blame_scoreboard * sb , struct blame_entry * ent , int tlno , int plno , int same , struct blame_origin * parent , struct blame_entry * split)', 1039, 1055), ('handle_split_cb( long start_a , long count_a , long start_b , long count_b , void * data)', 1066, 1075), ('find_copy_in_blob( struct blame_scoreboard * sb , struct blame_entry * ent , struct blame_origin * parent , struct blame_entry * split , mmfile_t * file_p)', 1082, 1111), ('filter_small( struct blame_scoreboard * sb , struct blame_entry ** small , struct blame_entry ** source , unsigned score_min)', 1118, 1139), ('find_move_in_parent( struct blame_scoreboard * sb , struct blame_entry ** * blamed , struct blame_entry ** toosmall , struct blame_origin * target , struct blame_origin * parent)', 1145, 1187), ('setup_blame_list( struct blame_entry * unblamed , int * num_ents_p)', 1198, 1214), ('find_copy_in_parent( struct blame_scoreboard * sb , struct blame_entry ** * blamed , struct blame_entry ** toosmall , struct blame_origin * target , struct commit * parent , struct blame_origin * porigin , int opt)', 1221, 1321), ('pass_whole_blame( struct blame_scoreboard * sb , struct blame_origin * origin , struct blame_origin * porigin)', 1327, 1345), ('first_scapegoat( struct rev_info * revs , struct commit * commit , int reverse)', 1352, 1365), ('num_scapegoats( struct rev_info * revs , struct commit * commit , int reverse)', 1367, 1371), ('distribute_blame( struct blame_scoreboard * sb , struct blame_entry * blamed)', 1376, 1393), ('pass_blame( struct blame_scoreboard * sb , struct blame_origin * origin , int opt)', 1397, 1540), ('assign_blame( struct blame_scoreboard * sb , int opt)', 1546, 1608), ('get_next_line( const char * start , const char * end)', 1610, 1614), ('prepare_lines( struct blame_scoreboard * sb)', 1620, 1642), ('find_single_final( struct rev_info * revs , const char ** name_p)', 1644, 1667), ('dwim_reverse_initial( struct rev_info * revs , const char ** name_p)', 1669, 1704), ('find_single_initial( struct rev_info * revs , const char ** name_p)', 1706, 1739), ('init_scoreboard( struct blame_scoreboard * sb)', 1741, 1746), ('setup_scoreboard( struct blame_scoreboard * sb , const char * path , struct blame_origin ** orig)', 1748, 1847), ('blame_entry_prepend( struct blame_entry * head , long start , long end , struct blame_origin * o)', 1851, 1863)], '/home/kevin/thesis/git/blame.h': [('blame_origin_incref( struct blame_origin * o)', 156, 161)], '/home/kevin/thesis/git/blob.c': [('lookup_blob( const struct object_id * oid)', 6, 12), ('parse_blob_buffer( struct blob * item , void * buffer , unsigned long size)', 14, 18)], '/home/kevin/thesis/git/blob.h': [], '/home/kevin/thesis/git/branch.c': [('find_tracked_branch( struct remote * remote , void * priv)', 18, 36), ('should_setup_rebase( const char * origin)', 38, 51), ('install_branch_config( int flag , const char * local , const char * origin , const char * remote)', 59, 128), ('setup_tracking( const char * new_ref , const char * orig_ref , enum branch_track track , int quiet)', 135, 165), ('read_branch_desc( struct strbuf * buf , const char * branch_name)', 167, 180), ('validate_branchname( const char * name , struct strbuf * ref)', 187, 193), ('validate_new_branchname( const char * name , struct strbuf * ref , int force)', 201, 217), ('check_tracking_branch( struct remote * remote , void * cb_data)', 219, 226), ('validate_remote_tracking_branch( char * ref)', 228, 231), ('create_branch( const char * name , const char * start_name , int force , int clobber_head_ok , int reflog , int quiet , enum branch_track track)', 247, 339), ('remove_branch_state( void)', 341, 350), ('die_if_checked_out( const char * branch , int ignore_current_worktree)', 352, 362), ('replace_each_worktree_head_symref( const char * oldref , const char * newref , const char * logmsg)', 364, 389)], '/home/kevin/thesis/git/branch.h': [], '/home/kevin/thesis/git/builtin.h': [], '/home/kevin/thesis/git/bulk-checkin.c': [('finish_bulk_checkin( struct bulk_checkin_state * state)', 25, 62), ('already_written( struct bulk_checkin_state * state , struct object_id * oid)', 64, 79), ('stream_to_pack( struct bulk_checkin_state * state , git_hash_ctx * ctx , off_t * already_hashed_to , int fd , size_t size , enum object_type type , const char * path , unsigned flags)', 96, 171), ('prepare_to_stream( struct bulk_checkin_state * state , unsigned flags)', 174, 187), ('deflate_to_pack( struct bulk_checkin_state * state , struct object_id * result_oid , int fd , size_t size , enum object_type type , const char * path , unsigned flags)', 189, 257), ('index_bulk_checkin( struct object_id * oid , int fd , size_t size , enum object_type type , const char * path , unsigned flags)', 259, 268), ('plug_bulk_checkin( void)', 270, 273), ('unplug_bulk_checkin( void)', 275, 280)], '/home/kevin/thesis/git/bulk-checkin.h': [], '/home/kevin/thesis/git/bundle.c': [('add_to_ref_list( const struct object_id * oid , const char * name , struct ref_list * list)', 15, 22), ('parse_bundle_header( int fd , struct bundle_header * header , const char * report_path)', 24, 81), ('read_bundle_header( const char * path , struct bundle_header * header)', 83, 90), ('is_bundle( const char * path , int quiet)', 92, 104), ('list_refs( struct ref_list * r , int argc , const char ** argv)', 106, 123), ('verify_bundle( struct bundle_header * header , int verbose)', 128, 207), ('list_bundle_refs( struct bundle_header * header , int argc , const char ** argv)', 209, 212), ('is_tag_in_date_range( struct object * tag , struct rev_info * revs)', 214, 241), ('write_pack_data( int bundle_fd , struct rev_info * revs)', 245, 271), ('compute_and_write_prerequisites( int bundle_fd , struct rev_info * revs , int argc , const char ** argv)', 273, 313), ('write_bundle_refs( int bundle_fd , struct rev_info * revs)', 324, 407), ('create_bundle( struct bundle_header * header , const char * path , int argc , const char ** argv)', 409, 480), ('unbundle( struct bundle_header * header , int bundle_fd , int flags)', 482, 500)], '/home/kevin/thesis/git/bundle.h': [], '/home/kevin/thesis/git/cache-tree.c': [('cache_tree( void)', 11, 16), ('cache_tree_free( struct cache_tree ** it_p)', 18, 33), ('subtree_name_cmp( const char * one , int onelen , const char * two , int twolen)', 35, 43), ('subtree_pos( struct cache_tree * it , const char * path , int pathlen)', 45, 64), ('find_subtree( struct cache_tree * it , const char * path , int pathlen , int create)', 66, 91), ('cache_tree_sub( struct cache_tree * it , const char * path)', 93, 97), ('do_invalidate_path( struct cache_tree * it , const char * path)', 99, 143), ('cache_tree_invalidate_path( struct index_state * istate , const char * path)', 145, 149), ('verify_cache( struct cache_entry ** cache , int entries , int flags)', 151, 202), ('discard_unused_subtrees( struct cache_tree * it)', 204, 219), ('cache_tree_fully_valid( struct cache_tree * it)', 221, 233), ('update_one( struct cache_tree * it , struct cache_entry ** cache , int entries , const char * base , int baselen , int * skip_count , int flags)', 235, 424), ('cache_tree_update( struct index_state * istate , int flags)', 426, 440), ('write_one( struct strbuf * buffer , struct cache_tree * it , const char * path , int pathlen)', 442, 480), ('cache_tree_write( struct strbuf * sb , struct cache_tree * root)', 482, 485), ('read_one( const char ** buffer , unsigned long * size_p)', 487, 569), ('cache_tree_read( const char * buffer , unsigned long size)', 571, 576), ('cache_tree_find( struct cache_tree * it , const char * path)', 578, 601), ('write_index_as_tree( struct object_id * oid , struct index_state * index_state , const char * index_path , int flags , const char * prefix)', 603, 652), ('write_cache_as_tree( struct object_id * oid , int flags , const char * prefix)', 654, 657), ('prime_cache_tree_rec( struct cache_tree * it , struct tree * tree)', 659, 683), ('prime_cache_tree( struct index_state * istate , struct tree * tree)', 685, 691), ('find_cache_tree_from_traversal( struct cache_tree * root , struct traverse_info * info)', 701, 710), ('cache_tree_matches_traversal( struct cache_tree * root , struct name_entry * ent , struct traverse_info * info)', 712, 723), ('update_main_cache_tree( int flags)', 725, 730)], '/home/kevin/thesis/git/cache-tree.h': [], '/home/kevin/thesis/git/cache.h': [('copy_cache_entry( struct cache_entry * dst , const struct cache_entry * src)', 226, 238), ('create_ce_flags( unsigned stage)', 240, 243), ('create_ce_mode( unsigned int mode)', 254, 261), ('ce_mode_from_stat( const struct cache_entry * ce , unsigned int mode)', 262, 275), ('ce_to_dtype( const struct cache_entry * ce)', 276, 287), ('canon_mode( unsigned int mode)', 288, 297), ('object_type( unsigned int mode)', 397, 402), ('hashcmp( const unsigned char * sha1 , const unsigned char * sha2)', 973, 976), ('oidcmp( const struct object_id * oid1 , const struct object_id * oid2)', 978, 981), ('is_null_sha1( const unsigned char * sha1)', 983, 986), ('is_null_oid( const struct object_id * oid)', 988, 991), ('hashcpy( unsigned char * sha_dst , const unsigned char * sha_src)', 993, 996), ('oidcpy( struct object_id * dst , const struct object_id * src)', 998, 1001), ('oiddup( const struct object_id * src)', 1003, 1008), ('hashclr( unsigned char * hash)', 1010, 1013), ('oidclr( struct object_id * oid)', 1015, 1018), ('oidread( struct object_id * oid , const unsigned char * hash)', 1020, 1023), ('is_empty_blob_sha1( const unsigned char * sha1)', 1025, 1028), ('is_empty_blob_oid( const struct object_id * oid)', 1030, 1033), ('is_empty_tree_sha1( const unsigned char * sha1)', 1035, 1038), ('is_empty_tree_oid( const struct object_id * oid)', 1040, 1043), ('is_absolute_path( const char * path)', 1144, 1147), ('read_object_file( const struct object_id * oid , enum object_type * type , unsigned long * size)', 1198, 1201), ('has_sha1_file( const unsigned char * sha1)', 1249, 1252), ('hexval( unsigned char c)', 1271, 1274), ('hex2chr( const char * s)', 1280, 1284), ('cache_def_clear( struct cache_def * cache)', 1537, 1540), ('write_str_in_full( int fd , const char * str)', 1735, 1738)], '/home/kevin/thesis/git/chdir-notify.c': [('chdir_notify_register( const char * name , chdir_notify_callback cb , void * data)', 14, 23), ('reparent_cb( const char * name , const char * old_cwd , const char * new_cwd , void * data)', 25, 44), ('chdir_notify_reparent( const char * name , char ** path)', 46, 49), ('chdir_notify( const char * new_cwd)', 51, 77), ('reparent_relative_path( const char * old_cwd , const char * new_cwd , const char * path)', 79, 93)], '/home/kevin/thesis/git/chdir-notify.h': [], '/home/kevin/thesis/git/check-racy.c': [('main( int ac , char ** av)', 3, 28)], '/home/kevin/thesis/git/checkout.c': [('check_tracking_name( struct remote * remote , void * cb_data)', 13, 31), ('unique_tracking_name( const char * name , struct object_id * oid)', 33, 44)], '/home/kevin/thesis/git/checkout.h': [], '/home/kevin/thesis/git/color.c': [('match_word( const char * word , int len , const char * match)', 49, 52), ('get_hex_color( const char * in , unsigned char * out)', 54, 62), ('parse_color( struct color * out , const char * name , int len)', 64, 125), ('parse_attr( const char * name , size_t len)', 127, 157), ('color_parse( const char * value , char * dst)', 159, 162), ('color_output( char * out , int len , const struct color * c , char type)', 169, 190), ('color_empty( const struct color * c)', 192, 195), ('color_parse_mem( const char * value , int value_len , char * dst)', 197, 298), ('git_config_colorbool( const char * var , const char * value)', 300, 320), ('check_auto_color( int fd)', 322, 333), ('want_color_fd( int fd , int var)', 335, 355), ('git_color_config( const char * var , const char * value , void * cb)', 357, 365), ('git_color_default_config( const char * var , const char * value , void * cb)', 367, 373), ('color_print_strbuf( FILE * fp , const char * color , const struct strbuf * sb)', 375, 382), ('color_vfprintf( FILE * fp , const char * color , const char * fmt , va_list args , const char * trail)', 384, 397), ('color_fprintf( FILE * fp , const char * color , const char * fmt , ...)', 399, 407), ('color_fprintf_ln( FILE * fp , const char * color , const char * fmt , ...)', 409, 417), ('color_is_nil( const char * c)', 419, 422)], '/home/kevin/thesis/git/color.h': [], '/home/kevin/thesis/git/column.c': [('item_length( unsigned int colopts , const char * s)', 24, 38), ('layout( struct column_data * data , int * width)', 44, 60), ('compute_column_width( struct column_data * data)', 62, 74), ('shrink_columns( struct column_data * data)', 83, 109), ('display_plain( const struct string_list * list , const char * indent , const char * nl)', 112, 119), ('display_cell( struct column_data * data , int initial_width , const char * empty_cell , int x , int y)', 122, 152), ('display_table( const struct string_list * list , unsigned int colopts , const struct column_options * opts)', 155, 188), ('print_columns( const struct string_list * list , unsigned int colopts , const struct column_options * opts)', 190, 219), ('finalize_colopts( unsigned int * colopts , int stdout_is_tty)', 221, 231), ('parse_option( const char * arg , int len , unsigned int * colopts , int * group_set)', 242, 294), ('parse_config( unsigned int * colopts , const char * value)', 296, 322), ('column_config( const char * var , const char * value , const char * key , unsigned int * colopts)', 324, 332), ('git_column_config( const char * var , const char * value , const char * command , unsigned int * colopts)', 334, 349), ('parseopt_column_callback( const struct option * opt , const char * arg , int unset)', 351, 365), ('run_column_filter( int colopts , const struct column_options * opts)', 370, 402), ('stop_column_filter( void)', 404, 416)], '/home/kevin/thesis/git/column.h': [('column_active( unsigned int colopts)', 34, 37)], '/home/kevin/thesis/git/combine-diff.c': [('compare_paths( const struct combine_diff_path * one , const struct diff_filespec * two)', 15, 23), ('intersect_paths( struct combine_diff_path * curr , int n , int num_parent)', 25, 88), ('match_string_spaces( const char * line1 , int len1 , const char * line2 , int len2 , long flags)', 121, 159), ('coalesce_lines( struct lline * base , int * lenbase , struct lline * newline , int lennew , unsigned long parent , long flags)', 164, 285), ('grab_blob( const struct object_id * oid , unsigned int mode , unsigned long * size , struct userdiff_driver * textconv , const char * path)', 287, 314), ('append_lost( struct sline * sline , int n , const char * line , int len)', 316, 334), ('consume_line( void * state_ , char * line , unsigned long len)', 346, 389), ('combine_diff( const struct object_id * parent , unsigned int mode , mmfile_t * result_file , struct sline * sline , unsigned int cnt , int n , int num_parent , int result_deleted , struct userdiff_driver * textconv , const char * path , long flags)', 391, 459), ('interesting( struct sline * sline , unsigned long all_mask)', 464, 470), ('adjust_hunk_tail( struct sline * sline , unsigned long all_mask , unsigned long hunk_begin , unsigned long i)', 472, 487), ('find_next( struct sline * sline , unsigned long mark , unsigned long i , unsigned long cnt , int look_for_uninteresting)', 489, 510), ('give_context( struct sline * sline , unsigned long cnt , int num_parent)', 512, 575), ('make_hunks( struct sline * sline , unsigned long cnt , int num_parent , int dense)', 577, 691), ('show_parent_lno( struct sline * sline , unsigned long l0 , unsigned long l1 , int n , unsigned long null_context)', 693, 698), ('hunk_comment_line( const char * bol)', 700, 708), ('show_line_to_eol( const char * line , int len , const char * reset)', 710, 720), ('dump_sline( struct sline * sline , const char * line_prefix , unsigned long cnt , int num_parent , int use_color , int result_deleted)', 722, 846), ('reuse_combine_diff( struct sline * sline , unsigned long cnt , int i , int j)', 848, 873), ('dump_quoted_path( const char * head , const char * prefix , const char * path , const char * line_prefix , const char * c_meta , const char * c_reset)', 875, 890), ('show_combined_header( struct combine_diff_path * elem , int num_parent , int dense , struct rev_info * rev , const char * line_prefix , int mode_differs , int show_file_header)', 892, 967), ('show_patch_diff( struct combine_diff_path * elem , int num_parent , int dense , int working_tree_file , struct rev_info * rev)', 969, 1176), ('show_raw_diff( struct combine_diff_path * p , int num_parent , struct rev_info * rev)', 1178, 1219), ('show_combined_diff( struct combine_diff_path * p , int num_parent , int dense , struct rev_info * rev)', 1227, 1240), ('free_combined_pair( struct diff_filepair * pair)', 1242, 1246), ('combined_pair( struct combine_diff_path * p , int num_parent)', 1257, 1283), ('handle_combined_callback( struct diff_options * opt , struct combine_diff_path * paths , int num_parent , int num_paths)', 1285, 1303), ('path_path( void * obj)', 1305, 1310), ('find_paths_generic( const struct object_id * oid , const struct oid_array * parents , struct diff_options * opt)', 1314, 1355), ('find_paths_multitree( const struct object_id * oid , const struct oid_array * parents , struct diff_options * opt)', 1362, 1384), ('diff_tree_combined( const struct object_id * oid , const struct oid_array * parents , int dense , struct rev_info * rev)', 1387, 1530), ('diff_tree_combined_merge( const struct commit * commit , int dense , struct rev_info * rev)', 1532, 1544)], '/home/kevin/thesis/git/commit-graph.c': [('get_commit_graph_filename( const char * obj_dir)', 42, 45), ('alloc_commit_graph( void)', 47, 53), ('load_commit_graph_one( const char * graph_file)', 55, 180), ('prepare_commit_graph_one( const char * obj_dir)', 185, 196), ('prepare_commit_graph( void)', 199, 215), ('close_commit_graph( void)', 217, 229), ('bsearch_graph( struct commit_graph * g , struct object_id * oid , uint32_t * pos)', 231, 235), ('insert_parent_or_die( struct commit_graph * g , uint64_t pos , struct commit_list ** pptr)', 237, 249), ('fill_commit_in_graph( struct commit * item , struct commit_graph * g , uint32_t pos)', 251, 294), ('parse_commit_in_graph( struct commit * item)', 296, 319), ('load_tree_for_commit( struct commit_graph * g , struct commit * c)', 321, 331), ('get_commit_tree_in_graph( const struct commit * c)', 333, 341), ('write_graph_chunk_fanout( struct hashfile * f , struct commit ** commits , int nr_commits)', 343, 365), ('write_graph_chunk_oids( struct hashfile * f , int hash_len , struct commit ** commits , int nr_commits)', 367, 374), ('commit_to_sha1( size_t index , void * table)', 376, 380), ('write_graph_chunk_data( struct hashfile * f , int hash_len , struct commit ** commits , int nr_commits)', 382, 448), ('write_graph_chunk_large_edges( struct hashfile * f , struct commit ** commits , int nr_commits)', 450, 486), ('commit_compare( const void * _a , const void * _b)', 488, 493), ('add_packed_commits( const struct object_id * oid , struct packed_git * pack , uint32_t pos , void * data)', 507, 529), ('add_missing_parents( struct packed_oid_list * oids , struct commit * commit)', 531, 542), ('close_reachable( struct packed_oid_list * oids)', 544, 573), ('write_commit_graph( const char * obj_dir , const char ** pack_indexes , int nr_packs , const char ** commit_hex , int nr_commits , int append)', 575, 761)], '/home/kevin/thesis/git/commit-graph.h': [], '/home/kevin/thesis/git/commit-slab.h': [], '/home/kevin/thesis/git/commit.c': [('lookup_commit_reference_gently( const struct object_id * oid , int quiet)', 24, 32), ('lookup_commit_reference( const struct object_id * oid)', 34, 37), ('lookup_commit_or_die( const struct object_id * oid , const char * ref_name)', 39, 49), ('lookup_commit( const struct object_id * oid)', 51, 57), ('lookup_commit_reference_by_name( const char * name)', 59, 70), ('parse_commit_date( const char * buf , const char * tail)', 72, 97), ('commit_graft_sha1_access( size_t index , void * table)', 102, 106), ('commit_graft_pos( const unsigned char * sha1)', 108, 112), ('register_commit_graft( struct commit_graft * graft , int ignore_dups)', 114, 135), ('read_graft_line( struct strbuf * line)', 137, 173), ('read_graft_file( const char * graft_file)', 175, 201), ('prepare_commit_graft( void)', 203, 218), ('lookup_commit_graft( const struct object_id * oid)', 220, 228), ('for_each_commit_graft( each_commit_graft_fn fn , void * cb_data)', 230, 236), ('unregister_shallow( const struct object_id * oid)', 238, 248), ('set_commit_buffer( struct commit * commit , void * buffer , unsigned long size)', 257, 262), ('get_cached_commit_buffer( const struct commit * commit , unsigned long * sizep)', 264, 275), ('get_commit_buffer( const struct commit * commit , unsigned long * sizep)', 277, 294), ('unuse_commit_buffer( const struct commit * commit , const void * buffer)', 296, 301), ('free_commit_buffer( struct commit * commit)', 303, 310), ('get_commit_tree( const struct commit * commit)', 312, 321), ('get_commit_tree_oid( const struct commit * commit)', 323, 326), ('detach_commit_buffer( struct commit * commit , unsigned long * sizep)', 328, 345), ('parse_commit_buffer( struct commit * item , const void * buffer , unsigned long size)', 347, 403), ('parse_commit_gently( struct commit * item , int quiet_on_missing)', 405, 435), ('parse_commit_or_die( struct commit * item)', 437, 442), ('find_commit_subject( const char * commit_buffer , const char ** subject)', 444, 460), ('commit_list_insert( struct commit * item , struct commit_list ** list_p)', 462, 469), ('commit_list_count( const struct commit_list * l)', 471, 477), ('copy_commit_list( struct commit_list * list)', 479, 488), ('free_commit_list( struct commit_list * list)', 490, 494), ('commit_list_insert_by_date( struct commit * item , struct commit_list ** list)', 496, 507), ('commit_list_compare_by_date( const void * a , const void * b)', 509, 518), ('commit_list_get_next( const void * a)', 520, 523), ('commit_list_set_next( void * a , void * next)', 525, 528), ('commit_list_sort_by_date( struct commit_list ** list)', 530, 534), ('pop_most_recent_commit( struct commit_list ** list , unsigned int mark)', 536, 551), ('clear_commit_marks_1( struct commit_list ** plist , struct commit * commit , unsigned int mark)', 553, 573), ('clear_commit_marks_many( int nr , struct commit ** commit , unsigned int mark)', 575, 585), ('clear_commit_marks( struct commit * commit , unsigned int mark)', 587, 590), ('pop_commit( struct commit_list ** stack)', 592, 602), ('record_author_date( struct author_date_slab * author_date , struct commit * commit)', 614, 638), ('compare_commits_by_author_date( const void * a_ , const void * b_ , void * cb_data)', 640, 654), ('compare_commits_by_commit_date( const void * a_ , const void * b_ , void * unused)', 656, 665), ('sort_in_topological_order( struct commit_list ** list , enum rev_sort_order sort_order)', 670, 779), ('queue_has_nonstale( struct prio_queue * queue)', 791, 800), ('paint_down_to_common( struct commit * one , int n , struct commit ** twos)', 803, 850), ('merge_bases_many( struct commit * one , int n , struct commit ** twos)', 852, 882), ('get_octopus_merge_bases( struct commit_list * in)', 884, 909), ('remove_redundant( struct commit ** array , int cnt)', 911, 964), ('get_merge_bases_many_0( struct commit * one , int n , struct commit ** twos , int cleanup)', 966, 1005), ('get_merge_bases_many( struct commit * one , int n , struct commit ** twos)', 1007, 1012), ('get_merge_bases_many_dirty( struct commit * one , int n , struct commit ** twos)', 1014, 1019), ('get_merge_bases( struct commit * one , struct commit * two)', 1021, 1024), ('is_descendant_of( struct commit * commit , struct commit_list * with_commit)', 1029, 1042), ('in_merge_bases_many( struct commit * commit , int nr_reference , struct commit ** reference)', 1047, 1065), ('in_merge_bases( struct commit * commit , struct commit * reference)', 1070, 1073), ('reduce_heads( struct commit_list * heads)', 1075, 1106), ('reduce_heads_replace( struct commit_list ** heads)', 1108, 1113), ('do_sign_commit( struct strbuf * buf , const char * keyid)', 1118, 1154), ('parse_signed_commit( const struct commit * commit , struct strbuf * payload , struct strbuf * signature)', 1156, 1194), ('remove_signature( struct strbuf * buf)', 1196, 1228), ('handle_signed_tag( struct commit * parent , struct commit_extra_header ** * tail)', 1230, 1268), ('check_commit_signature( const struct commit * commit , struct signature_check * sigc)', 1270, 1288), ('append_merge_tag_headers( struct commit_list * parents , struct commit_extra_header ** * tail)', 1292, 1300), ('add_extra_header( struct strbuf * buffer , struct commit_extra_header * extra)', 1302, 1310), ('read_commit_extra_headers( struct commit * commit , const char ** exclude)', 1312, 1321), ('for_each_mergetag( each_mergetag_fn fn , struct commit * commit , void * data)', 1323, 1336), ('standard_header_field( const char * field , size_t len)', 1338, 1345), ('excluded_header_field( const char * field , size_t len , const char ** exclude)', 1347, 1359), ('read_commit_extra_header_lines( const char * buffer , size_t size , const char ** exclude)', 1361, 1402), ('free_commit_extra_headers( struct commit_extra_header * extra)', 1404, 1413), ('commit_tree( const char * msg , size_t msg_len , const struct object_id * tree , struct commit_list * parents , struct object_id * ret , const char * author , const char * sign_commit)', 1415, 1427), ('find_invalid_utf8( const char * buf , int len)', 1429, 1505), ('verify_utf8( struct strbuf * buf)', 1513, 1537), ('commit_tree_extended( const char * msg , size_t msg_len , const struct object_id * tree , struct commit_list * parents , struct object_id * ret , const char * author , const char * sign_commit , struct commit_extra_header * extra)', 1544, 1606), ('set_merge_remote_desc( struct commit * commit , const char * name , struct object * obj)', 1608, 1615), ('get_merge_parent( const char * name)', 1617, 1629), ('commit_list_append( struct commit * commit , struct commit_list ** next)', 1648, 1656), ('find_commit_header( const char * msg , const char * key , size_t * out_len)', 1658, 1678), ('ignore_non_trailer( const char * buf , size_t len)', 1690, 1724)], '/home/kevin/thesis/git/commit.h': [('parse_commit( struct commit * item)', 73, 76)], '/home/kevin/thesis/git/common-main.c': [('restore_sigpipe_to_default( void)', 16, 24), ('main( int argc , const char ** argv)', 26, 46)], '/home/kevin/thesis/git/config.c': [('config_file_fgetc( struct config_source * conf)', 77, 80), ('config_file_ungetc( int c , struct config_source * conf)', 82, 85), ('config_file_ftell( struct config_source * conf)', 87, 90), ('config_buf_fgetc( struct config_source * conf)', 93, 99), ('config_buf_ungetc( int c , struct config_source * conf)', 101, 111), ('config_buf_ftell( struct config_source * conf)', 113, 116), ('handle_path_include( const char * path , struct config_include_data * inc)', 125, 168), ('prepare_include_condition_pattern( struct strbuf * pat)', 170, 204), ('include_by_gitdir( const struct config_options * opts , const char * cond , size_t cond_len , int icase)', 206, 262), ('include_condition_is_true( const struct config_options * opts , const char * cond , size_t cond_len)', 264, 275), ('git_config_include( const char * var , const char * value , void * data)', 277, 301), ('git_config_push_parameter( const char * text)', 303, 314), ('iskeychar( int c)', 316, 319), ('git_config_parse_key_1( const char * key , char ** store_key , int * baselen_ , int quiet)', 333, 395), ('git_config_parse_key( const char * key , char ** store_key , int * baselen)', 397, 400), ('git_config_key_is_valid( const char * key)', 402, 405), ('git_config_parse_parameter( const char * text , config_fn_t fn , void * data)', 407, 440), ('git_config_from_parameters( config_fn_t fn , void * data)', 442, 480), ('get_next_char( void)', 482, 503), ('parse_value( void)', 505, 564), ('get_value( config_fn_t fn , void * data , struct strbuf * name)', 566, 603), ('get_extended_base_var( struct strbuf * name , int c)', 605, 639), ('get_base_var( struct strbuf * name)', 641, 655), ('do_event( enum config_event_t type , struct parse_event_data * data)', 663, 692), ('git_parse_source( config_fn_t fn , void * data , const struct config_options * opts)', 694, 819), ('parse_unit_factor( const char * end , uintmax_t * val)', 821, 838), ('git_parse_signed( const char * value , intmax_t * ret , intmax_t max)', 840, 868), ('git_parse_unsigned( const char * value , uintmax_t * ret , uintmax_t max)', 870, 895), ('git_parse_int( const char * value , int * ret)', 897, 904), ('git_parse_int64( const char * value , int64_t * ret)', 906, 913), ('git_parse_ulong( const char * value , unsigned long * ret)', 915, 922), ('git_parse_ssize_t( const char * value , ssize_t * ret)', 924, 931), ('die_bad_number( const char * name , const char * value)', 934, 965), ('git_config_int( const char * name , const char * value)', 967, 973), ('git_config_int64( const char * name , const char * value)', 975, 981), ('git_config_ulong( const char * name , const char * value)', 983, 989), ('git_config_ssize_t( const char * name , const char * value)', 991, 997), ('git_parse_maybe_bool_text( const char * value)', 999, 1014), ('git_parse_maybe_bool( const char * value)', 1016, 1024), ('git_config_bool_or_int( const char * name , const char * value , int * is_bool)', 1026, 1035), ('git_config_bool( const char * name , const char * value)', 1037, 1041), ('git_config_string( const char ** dest , const char * var , const char * value)', 1043, 1049), ('git_config_pathname( const char ** dest , const char * var , const char * value)', 1051, 1059), ('git_config_expiry_date( timestamp_t * timestamp , const char * var , const char * value)', 1061, 1069), ('git_config_color( char * dest , const char * var , const char * value)', 1071, 1078), ('git_default_core_config( const char * var , const char * value)', 1080, 1351), ('git_default_i18n_config( const char * var , const char * value)', 1353, 1363), ('git_default_branch_config( const char * var , const char * value)', 1365, 1393), ('git_default_push_config( const char * var , const char * value)', 1395, 1422), ('git_default_mailmap_config( const char * var , const char * value)', 1424, 1433), ('git_default_config( const char * var , const char * value , void * dummy)', 1435, 1481), ('do_config_from( struct config_source * top , config_fn_t fn , void * data , const struct config_options * opts)', 1488, 1509), ('do_config_from_file( config_fn_t fn , const enum config_origin_type origin_type , const char * name , const char * path , FILE * f , void * data , const struct config_options * opts)', 1511, 1532), ('git_config_from_stdin( config_fn_t fn , void * data)', 1534, 1538), ('git_config_from_file_with_options( config_fn_t fn , const char * filename , void * data , const struct config_options * opts)', 1540, 1554), ('git_config_from_file( config_fn_t fn , const char * filename , void * data)', 1556, 1559), ('git_config_from_mem( config_fn_t fn , const enum config_origin_type origin_type , const char * name , const char * buf , size_t len , void * data)', 1561, 1578), ('git_config_from_blob_oid( config_fn_t fn , const char * name , const struct object_id * oid , void * data)', 1580, 1602), ('git_config_from_blob_ref( config_fn_t fn , const char * name , void * data)', 1604, 1613), ('git_etc_gitconfig( void)', 1615, 1621), ('git_env_bool( const char * k , int def)', 1627, 1631), ('git_env_ulong( const char * k , unsigned long val)', 1637, 1643), ('git_config_system( void)', 1645, 1648), ('do_git_config_sequence( const struct config_options * opts , config_fn_t fn , void * data)', 1650, 1688), ('config_with_options( config_fn_t fn , void * data , struct git_config_source * config_source , const struct config_options * opts)', 1690, 1716), ('configset_iter( struct config_set * cs , config_fn_t fn , void * data)', 1718, 1739), ('read_early_config( config_fn_t cb , void * data)', 1741, 1769), ('configset_find_element( struct config_set * cs , const char * key)', 1771, 1788), ('configset_add_value( struct config_set * cs , const char * key , const char * value)', 1790, 1832), ('config_set_element_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 1834, 1843), ('git_configset_init( struct config_set * cs)', 1845, 1852), ('git_configset_clear( struct config_set * cs)', 1854, 1872), ('config_set_callback( const char * key , const char * value , void * cb)', 1874, 1879), ('git_configset_add_file( struct config_set * cs , const char * filename)', 1881, 1884), ('git_configset_get_value( struct config_set * cs , const char * key , const char ** value)', 1886, 1901), ('git_configset_get_value_multi( struct config_set * cs , const char * key)', 1903, 1907), ('git_configset_get_string_const( struct config_set * cs , const char * key , const char ** dest)', 1909, 1916), ('git_configset_get_string( struct config_set * cs , const char * key , char ** dest)', 1918, 1921), ('git_configset_get_int( struct config_set * cs , const char * key , int * dest)', 1923, 1931), ('git_configset_get_ulong( struct config_set * cs , const char * key , unsigned long * dest)', 1933, 1941), ('git_configset_get_bool( struct config_set * cs , const char * key , int * dest)', 1943, 1951), ('git_configset_get_bool_or_int( struct config_set * cs , const char * key , int * is_bool , int * dest)', 1953, 1962), ('git_configset_get_maybe_bool( struct config_set * cs , const char * key , int * dest)', 1964, 1974), ('git_configset_get_pathname( struct config_set * cs , const char * key , const char ** dest)', 1976, 1983), ('repo_read_config( struct repository * repo)', 1986, 2014), ('git_config_check_init( struct repository * repo)', 2016, 2021), ('repo_config_clear( struct repository * repo)', 2023, 2028), ('repo_config( struct repository * repo , config_fn_t fn , void * data)', 2030, 2034), ('repo_config_get_value( struct repository * repo , const char * key , const char ** value)', 2036, 2041), ('repo_config_get_value_multi( struct repository * repo , const char * key)', 2043, 2048), ('repo_config_get_string_const( struct repository * repo , const char * key , const char ** dest)', 2050, 2059), ('repo_config_get_string( struct repository * repo , const char * key , char ** dest)', 2061, 2066), ('repo_config_get_int( struct repository * repo , const char * key , int * dest)', 2068, 2073), ('repo_config_get_ulong( struct repository * repo , const char * key , unsigned long * dest)', 2075, 2080), ('repo_config_get_bool( struct repository * repo , const char * key , int * dest)', 2082, 2087), ('repo_config_get_bool_or_int( struct repository * repo , const char * key , int * is_bool , int * dest)', 2089, 2094), ('repo_config_get_maybe_bool( struct repository * repo , const char * key , int * dest)', 2096, 2101), ('repo_config_get_pathname( struct repository * repo , const char * key , const char ** dest)', 2103, 2112), ('git_config( config_fn_t fn , void * data)', 2115, 2118), ('git_config_clear( void)', 2120, 2123), ('git_config_get_value( const char * key , const char ** value)', 2125, 2128), ('git_config_get_value_multi( const char * key)', 2130, 2133), ('git_config_get_string_const( const char * key , const char ** dest)', 2135, 2138), ('git_config_get_string( const char * key , char ** dest)', 2140, 2143), ('git_config_get_int( const char * key , int * dest)', 2145, 2148), ('git_config_get_ulong( const char * key , unsigned long * dest)', 2150, 2153), ('git_config_get_bool( const char * key , int * dest)', 2155, 2158), ('git_config_get_bool_or_int( const char * key , int * is_bool , int * dest)', 2160, 2163), ('git_config_get_maybe_bool( const char * key , int * dest)', 2165, 2168), ('git_config_get_pathname( const char * key , const char ** dest)', 2170, 2173), ('config_from_gitmodules( config_fn_t fn , void * data)', 2183, 2190), ('git_config_get_expiry( const char * key , const char ** output)', 2192, 2203), ('git_config_get_expiry_in_days( const char * key , timestamp_t * expiry , timestamp_t now)', 2205, 2225), ('git_config_get_untracked_cache( void)', 2227, 2249), ('git_config_get_split_index( void)', 2251, 2259), ('git_config_get_max_percent_split_change( void)', 2261, 2274), ('git_config_get_fsmonitor( void)', 2276, 2288), ('git_die_config_linenr( const char * key , const char * filename , int linenr)', 2291, 2298), ('git_die_config( const char * key , const char * err , ...)', 2301, 2315), ('config_store_data_clear( struct config_store_data * store)', 2336, 2347), ('matches( const char * key , const char * value , const struct config_store_data * store)', 2349, 2361), ('store_aux_event( enum config_event_t type , size_t begin , size_t end , void * data)', 2363, 2393), ('store_aux( const char * key , const char * value , void * cb)', 2395, 2427), ('write_error( const char * filename)', 2429, 2435), ('store_create_section( const char * key , const struct config_store_data * store)', 2437, 2458), ('write_section( int fd , const char * key , const struct config_store_data * store)', 2460, 2470), ('write_pair( int fd , const char * key , const char * value , const struct config_store_data * store)', 2472, 2521), ('maybe_remove_section( struct config_store_data * store , const char * contents , size_t * begin_offset , size_t * end_offset , int * seen_ptr)', 2532, 2602), ('git_config_set_in_file_gently( const char * config_filename , const char * key , const char * value)', 2604, 2608), ('git_config_set_in_file( const char * config_filename , const char * key , const char * value)', 2610, 2614), ('git_config_set_gently( const char * key , const char * value)', 2616, 2619), ('git_config_set( const char * key , const char * value)', 2621, 2624), ('git_config_set_multivar_in_file_gently( const char * config_filename , const char * key , const char * value , const char * value_regex , int multi_replace)', 2651, 2895), ('git_config_set_multivar_in_file( const char * config_filename , const char * key , const char * value , const char * value_regex , int multi_replace)', 2897, 2908), ('git_config_set_multivar_gently( const char * key , const char * value , const char * value_regex , int multi_replace)', 2910, 2915), ('git_config_set_multivar( const char * key , const char * value , const char * value_regex , int multi_replace)', 2917, 2922), ('section_name_match( const char * buf , const char * name)', 2924, 2961), ('section_name_is_ok( const char * name)', 2963, 2977), ('git_config_copy_or_rename_section_in_file( const char * config_filename , const char * old_name , const char * new_name , int copy)', 2980, 3131), ('git_config_rename_section_in_file( const char * config_filename , const char * old_name , const char * new_name)', 3133, 3138), ('git_config_rename_section( const char * old_name , const char * new_name)', 3140, 3143), ('git_config_copy_section_in_file( const char * config_filename , const char * old_name , const char * new_name)', 3145, 3150), ('git_config_copy_section( const char * old_name , const char * new_name)', 3152, 3155), ('config_error_nonbool( const char * var)', 3162, 3165), ('parse_config_key( const char * var , const char * section , const char ** subsection , int * subsection_len , const char ** key)', 3167, 3201), ('current_config_origin_type( void)', 3203, 3227), ('current_config_name( void)', 3229, 3239), ('current_config_scope( void)', 3241, 3247)], '/home/kevin/thesis/git/config.h': [], '/home/kevin/thesis/git/connect.c': [('check_ref( const char * name , unsigned int flags)', 23, 45), ('check_ref_type( const struct ref * ref , int flags)', 47, 50), ('die_initial_contact( int unexpected)', 52, 66), ('server_supports_v2( const char * c , int die_on_error)', 69, 84), ('server_supports_feature( const char * c , const char * feature , int die_on_error)', 86, 106), ('process_capabilities_v2( struct packet_reader * reader)', 108, 115), ('discover_version( struct packet_reader * reader)', 117, 152), ('parse_one_symref_info( struct string_list * symref , const char * val , int len)', 154, 178), ('annotate_refs_with_symref_info( struct ref * ref)', 180, 205), ('process_capabilities( const char * line , int * len)', 207, 214), ('process_dummy_ref( const char * line)', 216, 228), ('check_no_capabilities( const char * line , int len)', 230, 235), ('process_ref( const char * line , int len , struct ref ** * list , unsigned int flags , struct oid_array * extra_have)', 237, 261), ('process_shallow( const char * line , int len , struct oid_array * shallow_points)', 263, 279), ('get_remote_heads( struct packet_reader * reader , struct ref ** list , unsigned int flags , struct oid_array * extra_have , struct oid_array * shallow_points)', 291, 345), ('process_ref_v2( const char * line , struct ref ** * list)', 348, 408), ('get_remote_refs( int fd_out , struct packet_reader * reader , struct ref ** list , int for_push , const struct argv_array * ref_prefixes , const struct string_list * server_options)', 410, 451), ('parse_feature_value( const char * feature_list , const char * feature , int * lenp)', 453, 488), ('parse_feature_request( const char * feature_list , const char * feature)', 490, 493), ('server_feature_value( const char * feature , int * len)', 495, 498), ('server_supports( const char * feature)', 500, 503), ('url_is_local_not_ssh( const char * url)', 512, 518), ('prot_name( enum protocol protocol)', 520, 533), ('get_protocol( const char * name)', 535, 548), ('host_end( char ** hoststart , int removebrackets)', 550, 572), ('get_host_and_port( char ** host , const char ** port)', 577, 591), ('enable_keepalive( int sockfd)', 593, 600), ('ai_name( const struct addrinfo * ai)', 604, 612), ('git_tcp_connect_sock( char * host , int flags)', 617, 678), ('git_tcp_connect_sock( char * host , int flags)', 685, 751), ('git_connection_is_socket( struct child_process * conn)', 762, 765), ('git_tcp_connect( int fd [ 2 ] , char * host , int flags)', 767, 775), ('git_proxy_command_options( const char * var , const char * value , void * cb)', 780, 828), ('git_use_proxy( const char * host)', 830, 835), ('git_proxy_connect( int fd [ 2 ] , char * host)', 837, 861), ('get_port( char * host)', 863, 877), ('parse_connect_url( const char * url_orig , char ** ret_host , char ** ret_path)', 883, 946), ('get_ssh_command( void)', 948, 959), ('override_ssh_variant( enum ssh_variant * ssh_variant)', 970, 989), ('determine_ssh_variant( const char * ssh_command , int is_cmdline)', 991, 1036), ('git_connect_git( int fd [ 2 ] , char * hostandport , const char * path , const char * prog , enum protocol_version version , int flags)', 1044, 1096), ('push_ssh_options( struct argv_array * args , struct argv_array * env , enum ssh_variant variant , const char * port , enum protocol_version version , int flags)', 1102, 1160), ('fill_ssh_args( struct child_process * conn , const char * ssh_host , const char * port , enum protocol_version version , int flags)', 1163, 1208), ('git_connect( int fd [ 2 ] , const char * url , const char * prog , int flags)', 1221, 1313), ('finish_connect( struct child_process * conn)', 1315, 1324)], '/home/kevin/thesis/git/connect.h': [], '/home/kevin/thesis/git/connected.c': [('check_connected( oid_iterate_fn fn , void * cb_data , struct check_connected_options * opt)', 19, 109)], '/home/kevin/thesis/git/connected.h': [], '/home/kevin/thesis/git/convert.c': [('gather_stats( const char * buf , unsigned long size , struct text_stat * stats)', 45, 88), ('convert_is_binary( unsigned long size , const struct text_stat * stats)', 94, 103), ('gather_convert_stats( const char * data , unsigned long size)', 105, 120), ('gather_convert_stats_ascii( const char * data , unsigned long size)', 122, 138), ('get_cached_convert_stats_ascii( const struct index_state * istate , const char * path)', 140, 149), ('get_wt_convert_stats_ascii( const char * path)', 151, 159), ('text_eol_is_crlf( void)', 161, 172), ('output_eol( enum crlf_action crlf_action)', 174, 195), ('check_global_conv_flags_eol( const char * path , enum crlf_action crlf_action , struct text_stat * old_stats , struct text_stat * new_stats , int conv_flags)', 197, 222), ('has_crlf_in_index( const struct index_state * istate , const char * path)', 224, 245), ('will_convert_lf_to_crlf( size_t len , struct text_stat * stats , enum crlf_action crlf_action)', 247, 267), ('validate_encoding( const char * path , const char * enc , const char * data , size_t len , int die_on_error)', 269, 325), ('trace_encoding( const char * context , const char * path , const char * encoding , const char * buf , size_t len)', 327, 348), ('check_roundtrip( const char * enc_name)', 350, 384), ('encode_to_git( const char * path , const char * src , size_t src_len , struct strbuf * buf , const char * enc , int conv_flags)', 388, 477), ('encode_to_worktree( const char * path , const char * src , size_t src_len , struct strbuf * buf , const char * enc)', 479, 502), ('crlf_to_git( const struct index_state * istate , const char * path , const char * src , size_t len , struct strbuf * buf , enum crlf_action crlf_action , int conv_flags)', 504, 591), ('crlf_to_worktree( const char * path , const char * src , size_t len , struct strbuf * buf , enum crlf_action crlf_action)', 593, 628), ('filter_buffer_or_fd( int in , int out , void * data)', 638, 702), ('apply_single_file_filter( const char * path , const char * src , size_t len , int fd , struct strbuf * dst , const char * cmd)', 704, 747), ('start_multi_file_filter_fn( struct subprocess_entry * subprocess)', 761, 774), ('handle_filter_error( const struct strbuf * filter_status , struct cmd2process * entry , const unsigned int wanted_capability)', 776, 797), ('apply_multi_file_filter( const char * path , const char * src , size_t len , int fd , struct strbuf * dst , const char * cmd , const unsigned int wanted_capability , struct delayed_checkout * dco)', 799, 912), ('async_query_available_blobs( const char * cmd , struct string_list * available_paths)', 915, 962), ('apply_filter( const char * path , const char * src , size_t len , int fd , struct strbuf * dst , struct convert_driver * drv , const unsigned int wanted_capability , struct delayed_checkout * dco)', 973, 998), ('read_convert_config( const char * var , const char * value , void * cb)', 1000, 1046), ('count_ident( const char * cp , unsigned long size)', 1048, 1088), ('ident_to_git( const char * path , const char * src , size_t len , struct strbuf * buf , int ident)', 1090, 1132), ('ident_to_worktree( const char * path , const char * src , size_t len , struct strbuf * buf , int ident)', 1134, 1215), ('git_path_check_encoding( struct attr_check_item * check)', 1217, 1233), ('git_path_check_crlf( struct attr_check_item * check)', 1235, 1250), ('git_path_check_eol( struct attr_check_item * check)', 1252, 1263), ('git_path_check_convert( struct attr_check_item * check)', 1265, 1276), ('git_path_check_ident( struct attr_check_item * check)', 1278, 1283), ('convert_attrs( struct conv_attrs * ca , const char * path)', 1293, 1340), ('would_convert_to_git_filter_fd( const char * path)', 1342, 1359), ('get_convert_attr_ascii( const char * path)', 1361, 1385), ('convert_to_git( const struct index_state * istate , const char * path , const char * src , size_t len , struct strbuf * dst , int conv_flags)', 1387, 1419), ('convert_to_git_filter_fd( const struct index_state * istate , const char * path , int fd , struct strbuf * dst , int conv_flags)', 1421, 1437), ('convert_to_working_tree_internal( const char * path , const char * src , size_t len , struct strbuf * dst , int normalizing , struct delayed_checkout * dco)', 1439, 1478), ('async_convert_to_working_tree( const char * path , const char * src , size_t len , struct strbuf * dst , void * dco)', 1480, 1485), ('convert_to_working_tree( const char * path , const char * src , size_t len , struct strbuf * dst)', 1487, 1490), ('renormalize_buffer( const struct index_state * istate , const char * path , const char * src , size_t len , struct strbuf * dst)', 1492, 1501), ('null_filter_fn( struct stream_filter * filter , const char * input , size_t * isize_p , char * output , size_t * osize_p)', 1523, 1540), ('null_free_fn( struct stream_filter * filter)', 1542, 1545), ('is_null_stream_filter( struct stream_filter * filter)', 1556, 1559), ('lf_to_crlf_filter_fn( struct stream_filter * filter , const char * input , size_t * isize_p , char * output , size_t * osize_p)', 1572, 1649), ('lf_to_crlf_free_fn( struct stream_filter * filter)', 1651, 1654), ('lf_to_crlf_filter( void)', 1661, 1667), ('cascade_filter_fn( struct stream_filter * filter , const char * input , size_t * isize_p , char * output , size_t * osize_p)', 1681, 1742), ('cascade_free_fn( struct stream_filter * filter)', 1744, 1750), ('cascade_filter( struct stream_filter * one , struct stream_filter * two)', 1757, 1773), ('is_foreign_ident( const char * str)', 1787, 1798), ('ident_drain( struct ident_filter * ident , char ** output_p , size_t * osize_p)', 1800, 1814), ('ident_filter_fn( struct stream_filter * filter , const char * input , size_t * isize_p , char * output , size_t * osize_p)', 1816, 1895), ('ident_free_fn( struct stream_filter * filter)', 1897, 1902), ('ident_filter( const struct object_id * oid)', 1909, 1919), ('get_stream_filter( const char * path , const struct object_id * oid)', 1929, 1953), ('free_stream_filter( struct stream_filter * filter)', 1955, 1958), ('stream_filter( struct stream_filter * filter , const char * input , size_t * isize_p , char * output , size_t * osize_p)', 1960, 1965)], '/home/kevin/thesis/git/convert.h': [('would_convert_to_git( const struct index_state * istate , const char * path)', 78, 82)], '/home/kevin/thesis/git/copy.c': [('copy_fd( int ifd , int ofd)', 3, 16), ('copy_times( const char * dst , const char * src)', 18, 29), ('copy_file( const char * dst , const char * src , int mode)', 31, 59), ('copy_file_with_time( const char * dst , const char * src , int mode)', 61, 67)], '/home/kevin/thesis/git/credential-cache--daemon.c': [('cache_credential( struct credential * c , int timeout)', 16, 27), ('lookup_credential( const struct credential * c)', 29, 38), ('remove_credential( const struct credential * c)', 40, 47), ('check_expirations( void)', 49, 91), ('read_request( FILE * fh , struct credential * c , struct strbuf * action , int * timeout)', 93, 111), ('serve_one_client( FILE * in , FILE * out)', 113, 156), ('serve_cache_loop( int fd)', 158, 198), ('serve_cache( const char * socket_path , int debug)', 200, 219), ('init_socket_directory( const char * path)', 226, 257), ('cmd_main( int argc , const char ** argv)', 259, 296)], '/home/kevin/thesis/git/credential-cache.c': [('send_request( const char * socket , const struct strbuf * out)', 11, 37), ('spawn_daemon( const char * socket)', 39, 60), ('do_cache( const char * socket , const char * action , int timeout , int flags)', 62, 84), ('get_socket_path( void)', 86, 97), ('cmd_main( int argc , const char ** argv)', 99, 136)], '/home/kevin/thesis/git/credential-store.c': [('parse_credential_file( const char * fn , struct credential * c , void(*match_cb)(structcredential*) , void(*other_cb)(structstrbuf*))', 9, 44), ('print_entry( struct credential * c)', 46, 50), ('print_line( struct strbuf * buf)', 52, 56), ('rewrite_credential_file( const char * fn , struct credential * c , struct strbuf * extra)', 58, 68), ('store_credential_file( const char * fn , struct credential * c)', 70, 88), ('store_credential( const struct string_list * fns , struct credential * c)', 90, 115), ('remove_credential( const struct string_list * fns , struct credential * c)', 117, 134), ('lookup_credential( const struct string_list * fns , struct credential * c)', 136, 143), ('cmd_main( int argc , const char ** argv)', 145, 194)], '/home/kevin/thesis/git/credential.c': [('credential_init( struct credential * c)', 10, 14), ('credential_clear( struct credential * c)', 16, 26), ('credential_match( const struct credential * want , const struct credential * have)', 28, 37), ('credential_config_callback( const char * var , const char * value , void * data)', 39, 81), ('proto_is_http( const char * s)', 83, 88), ('credential_apply_config( struct credential * c)', 90, 100), ('credential_describe( struct credential * c , struct strbuf * out)', 102, 113), ('credential_ask_one( const char * what , struct credential * c , int flags)', 115, 133), ('credential_getpass( struct credential * c)', 135, 143), ('credential_read( struct credential * c , FILE * fp)', 145, 192), ('credential_write_item( FILE * fp , const char * key , const char * value)', 194, 199), ('credential_write( const struct credential * c , FILE * fp)', 201, 208), ('run_credential_helper( struct credential * c , const char * cmd , int want_output)', 210, 250), ('credential_do( struct credential * c , const char * helper , const char * operation)', 252, 270), ('credential_fill( struct credential * c)', 272, 293), ('credential_approve( struct credential * c)', 295, 309), ('credential_reject( struct credential * c)', 311, 323), ('credential_from_url( struct credential * c , const char * url)', 325, 374)], '/home/kevin/thesis/git/credential.h': [], '/home/kevin/thesis/git/csum-file.c': [('flush( struct hashfile * f , const void * buf , unsigned int count)', 14, 43), ('hashflush( struct hashfile * f)', 45, 54), ('finalize_hashfile( struct hashfile * f , unsigned char * result , unsigned int flags)', 56, 87), ('hashwrite( struct hashfile * f , const void * buf , unsigned int count)', 89, 119), ('hashfd( int fd , const char * name)', 121, 124), ('hashfd_check( const char * name)', 126, 140), ('hashfd_throughput( int fd , const char * name , struct progress * tp)', 142, 154), ('hashfile_checkpoint( struct hashfile * f , struct hashfile_checkpoint * checkpoint)', 156, 161), ('hashfile_truncate( struct hashfile * f , struct hashfile_checkpoint * checkpoint)', 163, 174), ('crc32_begin( struct hashfile * f)', 176, 180), ('crc32_end( struct hashfile * f)', 182, 186)], '/home/kevin/thesis/git/csum-file.h': [('hashwrite_u8( struct hashfile * f , uint8_t data)', 43, 46), ('hashwrite_be32( struct hashfile * f , uint32_t data)', 48, 52)], '/home/kevin/thesis/git/ctype.c': [], '/home/kevin/thesis/git/daemon.c': [('get_canon_hostname( struct hostinfo * hi)', 69, 73), ('get_ip_address( struct hostinfo * hi)', 75, 79), ('logreport( int priority , const char * err , va_list params)', 81, 106), ('logerror( const char * err , ...)', 109, 115), ('loginfo( const char * err , ...)', 118, 126), ('daemon_die( const char * err , va_list params)', 128, 132), ('expand_path( struct strbuf * sb , const char * placeholder , void * ctx)', 139, 168), ('path_ok( const char * directory , struct hostinfo * hi)', 170, 297), ('daemon_error( const char * dir , const char * msg)', 308, 314), ('run_access_hook( struct daemon_service * service , const char * dir , const char * path , struct hostinfo * hi)', 318, 377), ('run_service( const char * dir , struct daemon_service * service , struct hostinfo * hi , const struct argv_array * env)', 379, 440), ('copy_to_log( int fd)', 442, 461), ('run_service_command( struct child_process * cld)', 463, 477), ('upload_pack( const struct argv_array * env)', 479, 488), ('upload_archive( const struct argv_array * env)', 490, 498), ('receive_pack( const struct argv_array * env)', 500, 508), ('enable_service( const char * name , int ena)', 516, 526), ('make_service_overridable( const char * name , int ena)', 528, 538), ('parse_host_and_port( char * hostport , char ** host , char ** port)', 540, 565), ('sanitize_client( struct strbuf * out , const char * in)', 573, 585), ('canonicalize_client( struct strbuf * out , const char * in)', 591, 595), ('parse_host_arg( struct hostinfo * hi , char * extra_args , int buflen)', 603, 634), ('parse_extra_args( struct hostinfo * hi , struct argv_array * env , char * extra_args , int buflen)', 636, 671), ('lookup_hostname( struct hostinfo * hi)', 676, 728), ('hostinfo_init( struct hostinfo * hi)', 730, 737), ('hostinfo_clear( struct hostinfo * hi)', 739, 745), ('set_keep_alive( int sockfd)', 747, 756), ('execute( void)', 758, 806), ('addrcmp( const struct sockaddr_storage * s1 , const struct sockaddr_storage * s2)', 808, 827), ('add_child( struct child_process * cld , struct sockaddr * addr , socklen_t addrlen)', 839, 852), ('kill_some_child( void)', 860, 872), ('check_dead_children( void)', 874, 894), ('handle( int incoming , struct sockaddr * addr , socklen_t addrlen)', 897, 938), ('child_handler( int signo)', 940, 948), ('set_reuse_addr( int sockfd)', 950, 958), ('ip2str( int family , struct sockaddr * sin , socklen_t len)', 966, 987), ('setup_named_sock( char * listen_addr , int listen_port , struct socketlist * socklist)', 991, 1068), ('setup_named_sock( char * listen_addr , int listen_port , struct socketlist * socklist)', 1072, 1125), ('socksetup( struct string_list * listen_addr , int listen_port , struct socketlist * socklist)', 1129, 1144), ('service_loop( struct socketlist * socklist)', 1146, 1199), ('drop_privileges( struct credentials * cred)', 1205, 1208), ('prepare_credentials( const char * user_name , const char * group_name)', 1210, 1214), ('drop_privileges( struct credentials * cred)', 1223, 1228), ('prepare_credentials( const char * user_name , const char * group_name)', 1230, 1250), ('serve( struct string_list * listen_addr , int listen_port , struct credentials * cred)', 1253, 1268), ('cmd_main( int argc , const char ** argv)', 1270, 1485)], '/home/kevin/thesis/git/date.c': [('tm_to_time_t( const struct tm * tm)', 12, 31), ('gm_time_t( timestamp_t time , int tz)', 42, 60), ('time_to_tm( timestamp_t time , int tz)', 67, 71), ('time_to_tm_local( timestamp_t time)', 73, 77), ('local_tzoffset( timestamp_t time)', 83, 108), ('show_date_relative( timestamp_t time , int tz , const struct timeval * now , struct strbuf * timebuf)', 110, 182), ('date_mode_from_type( enum date_mode_type type)', 184, 192), ('show_date( timestamp_t time , int tz , const struct date_mode * mode)', 194, 270), ('match_string( const char * date , const char * str)', 331, 345), ('skip_alpha( const char * date)', 347, 354), ('match_alpha( const char * date , struct tm * tm , int * offset)', 359, 407), ('is_date( int year , int month , int day , struct tm * now_tm , time_t now , struct tm * tm)', 409, 449), ('match_multi_number( timestamp_t num , char c , const char * date , char * end , struct tm * tm , time_t now)', 451, 510), ('nodate( struct tm * tm)', 517, 525), ('match_digit( const char * date , struct tm * tm , int * offset , int * tm_gmt)', 530, 622), ('match_tz( const char * date , int * offp)', 624, 659), ('date_string( timestamp_t date , int offset , struct strbuf * buf)', 661, 670), ('match_object_header_date( const char * date , timestamp_t * timestamp , int * offset)', 676, 697), ('parse_date_basic( const char * date , timestamp_t * timestamp , int * offset)', 701, 771), ('parse_expiry_date( const char * date , timestamp_t * timestamp)', 773, 793), ('parse_date( const char * date , struct strbuf * result)', 795, 803), ('parse_date_type( const char * format , const char ** end)', 805, 830), ('parse_date_format( const char * format , struct date_mode * mode)', 832, 852), ('datestamp( struct strbuf * out)', 854, 865), ('update_tm( struct tm * tm , struct tm * now , time_t sec)', 871, 888), ('date_now( struct tm * tm , struct tm * now , int * num)', 890, 893), ('date_yesterday( struct tm * tm , struct tm * now , int * num)', 895, 898), ('date_time( struct tm * tm , struct tm * now , int hour)', 900, 907), ('date_midnight( struct tm * tm , struct tm * now , int * num)', 909, 912), ('date_noon( struct tm * tm , struct tm * now , int * num)', 914, 917), ('date_tea( struct tm * tm , struct tm * now , int * num)', 919, 922), ('date_pm( struct tm * tm , struct tm * now , int * num)', 924, 936), ('date_am( struct tm * tm , struct tm * now , int * num)', 938, 950), ('date_never( struct tm * tm , struct tm * now , int * num)', 952, 956), ('approxidate_alpha( const char * date , struct tm * tm , struct tm * now , int * num , int * touched)', 990, 1086), ('approxidate_digit( const char * date , struct tm * tm , int * num , time_t now)', 1088, 1111), ('pending_number( struct tm * tm , int * num)', 1118, 1138), ('approxidate_str( const char * date , const struct timeval * tv , int * error_ret)', 1140, 1175), ('approxidate_relative( const char * date , const struct timeval * tv)', 1177, 1186), ('approxidate_careful( const char * date , int * error_ret)', 1188, 1204), ('date_overflows( timestamp_t t)', 1206, 1221)], '/home/kevin/thesis/git/decorate.c': [('hash_obj( const struct object * obj , unsigned int n)', 9, 12), ('insert_decoration( struct decoration * n , const struct object * base , void * decoration)', 14, 33), ('grow_decoration( struct decoration * n)', 35, 54), ('add_decoration( struct decoration * n , const struct object * obj , void * decoration)', 56, 64), ('lookup_decoration( struct decoration * n , const struct object * obj)', 66, 83)], '/home/kevin/thesis/git/decorate.h': [], '/home/kevin/thesis/git/delta.h': [('diff_delta( const void * src_buf , unsigned long src_bufsize , const void * trg_buf , unsigned long trg_bufsize , unsigned long * delta_size , unsigned long max_delta_size)', 57, 69), ('get_delta_hdr_size( const unsigned char ** datap , const unsigned char * top)', 89, 102)], '/home/kevin/thesis/git/diff-delta.c': [('create_delta_index( const void * buf , unsigned long bufsize)', 133, 296), ('free_delta_index( struct delta_index * index)', 298, 301), ('sizeof_delta_index( struct delta_index * index)', 303, 309), ('create_delta( const struct delta_index * index , const void * trg_buf , unsigned long trg_size , unsigned long * delta_size , unsigned long max_size)', 318, 494)], '/home/kevin/thesis/git/diff-lib.c': [('check_removed( const struct cache_entry * ce , struct stat * st)', 30, 58), ('match_stat_with_submodule( struct diff_options * diffopt , const struct cache_entry * ce , struct stat * st , unsigned ce_option , unsigned * dirty_submodule)', 68, 87), ('run_diff_files( struct rev_info * revs , unsigned int option)', 89, 252), ('diff_index_show_file( struct rev_info * revs , const char * prefix , const struct cache_entry * ce , const struct object_id * oid , int oid_valid , unsigned int mode , unsigned dirty_submodule)', 259, 268), ('get_stat_data( const struct cache_entry * ce , const struct object_id ** oidp , unsigned int * modep , int cached , int match_missing , unsigned * dirty_submodule , struct diff_options * diffopt)', 270, 304), ('show_new_file( struct rev_info * revs , const struct cache_entry * new_file , int cached , int match_missing)', 306, 323), ('show_modified( struct rev_info * revs , const struct cache_entry * old_entry , const struct cache_entry * new_entry , int report_missing , int cached , int match_missing)', 325, 377), ('do_oneway_diff( struct unpack_trees_options * o , const struct cache_entry * idx , const struct cache_entry * tree)', 385, 440), ('oneway_diff( const struct cache_entry * const * src , struct unpack_trees_options * o)', 457, 482), ('diff_cache( struct rev_info * revs , const struct object_id * tree_oid , const char * tree_name , int cached)', 484, 512), ('run_diff_index( struct rev_info * revs , int cached)', 514, 529), ('do_diff_cache( const struct object_id * tree_oid , struct diff_options * opt)', 531, 542), ('index_differs_from( const char * def , const struct diff_flags * flags , int ita_invisible_in_index)', 544, 562)], '/home/kevin/thesis/git/diff-no-index.c': [('read_directory_contents( const char * path , struct string_list * list)', 20, 34), ('get_mode( const char * path , int * mode)', 43, 60), ('populate_from_stdin( struct diff_filespec * s)', 62, 76), ('noindex_filespec( const char * name , int mode)', 78, 89), ('queue_diff( struct diff_options * o , const char * name1 , const char * name2)', 91, 197), ('append_basename( struct strbuf * path , const char * dir , const char * file)', 200, 209), ('fixup_paths( const char ** path , struct strbuf * replacement)', 216, 234), ('diff_no_index( struct rev_info * revs , int argc , const char ** argv)', 236, 303)], '/home/kevin/thesis/git/diff.c': [('die_want_option( const char * option_name)', 72, 75), ('parse_diff_color_slot( const char * var)', 77, 112), ('parse_dirstat_params( struct diff_options * options , const char * params_string , struct strbuf * errmsg)', 114, 165), ('parse_submodule_params( struct diff_options * options , const char * value)', 167, 178), ('git_config_rename( const char * var , const char * value)', 180, 187), ('parse_algorithm_value( const char * value)', 189, 202), ('parse_one_token( const char ** arg , const char * token)', 204, 212), ('parse_ws_error_highlight( const char * arg)', 214, 239), ('init_diff_ui_defaults( void)', 247, 250), ('git_diff_heuristic_config( const char * var , const char * value , void * cb)', 252, 257), ('parse_color_moved( const char * arg)', 259, 282), ('git_diff_ui_config( const char * var , const char * value , void * cb)', 284, 365), ('git_diff_basic_config( const char * var , const char * value , void * cb)', 367, 412), ('quote_two( const char * one , const char * two)', 414, 430), ('external_diff( void)', 432, 444), ('count_lines( const char * data , int size)', 481, 502), ('fill_mmfile( mmfile_t * mf , struct diff_filespec * one)', 504, 517), ('diff_filespec_size( struct diff_filespec * one)', 520, 526), ('count_trailing_blank( mmfile_t * mf , unsigned ws_rule)', 528, 552), ('check_blank_at_eof( mmfile_t * mf1 , mmfile_t * mf2 , struct emit_callback * ecbdata)', 554, 571), ('emit_line_0( struct diff_options * o , const char * set , const char * reset , int first , const char * line , int len)', 573, 608), ('emit_line( struct diff_options * o , const char * set , const char * reset , const char * line , int len)', 610, 614), ('append_emitted_diff_symbol( struct diff_options * o , struct emitted_diff_symbol * e)', 690, 702), ('moved_entry_cmp( const struct diff_options * diffopt , const struct moved_entry * a , const struct moved_entry * b , const void * keydata)', 710, 718), ('prepare_entry( struct diff_options * o , int line_no)', 720, 731), ('add_lines_to_move_detection( struct diff_options * o , struct hashmap * add_lines , struct hashmap * del_lines)', 733, 763), ('shrink_potential_moved_blocks( struct moved_entry ** pmb , int pmb_nr)', 765, 790), ('adjust_last_block( struct diff_options * o , int n , int block_length)', 805, 822), ('mark_color_as_moved( struct diff_options * o , struct hashmap * add_lines , struct hashmap * del_lines)', 825, 908), ('dim_moved_lines( struct diff_options * o)', 912, 969), ('emit_line_ws_markup( struct diff_options * o , const char * set , const char * reset , const char * line , int len , char sign , unsigned ws_rule , int blank_at_eof)', 971, 995), ('emit_diff_symbol_from_struct( struct diff_options * o , struct emitted_diff_symbol * eds)', 997, 1190), ('emit_diff_symbol( struct diff_options * o , enum diff_symbol s , const char * line , int len , unsigned flags)', 1192, 1201), ('diff_emit_submodule_del( struct diff_options * o , const char * line)', 1203, 1206), ('diff_emit_submodule_add( struct diff_options * o , const char * line)', 1208, 1211), ('diff_emit_submodule_untracked( struct diff_options * o , const char * path)', 1213, 1217), ('diff_emit_submodule_modified( struct diff_options * o , const char * path)', 1219, 1223), ('diff_emit_submodule_header( struct diff_options * o , const char * header)', 1225, 1229), ('diff_emit_submodule_error( struct diff_options * o , const char * err)', 1231, 1234), ('diff_emit_submodule_pipethrough( struct diff_options * o , const char * line , int len)', 1236, 1240), ('new_blank_line_at_eof( struct emit_callback * ecbdata , const char * line , int len)', 1242, 1251), ('emit_add_line( const char * reset , struct emit_callback * ecbdata , const char * line , int len)', 1253, 1262), ('emit_del_line( const char * reset , struct emit_callback * ecbdata , const char * line , int len)', 1264, 1270), ('emit_context_line( const char * reset , struct emit_callback * ecbdata , const char * line , int len)', 1272, 1278), ('emit_hunk_header( struct emit_callback * ecbdata , const char * line , int len)', 1280, 1339), ('claim_diff_tempfile( void)', 1341, 1347), ('remove_tempfile( void)', 1349, 1357), ('add_line_count( struct strbuf * out , int count)', 1359, 1372), ('emit_rewrite_lines( struct emit_callback * ecb , int prefix , const char * data , int size)', 1374, 1397), ('emit_rewrite_diff( const char * name_a , const char * name_b , struct diff_filespec * one , struct diff_filespec * two , struct userdiff_driver * textconv_one , struct userdiff_driver * textconv_two , struct diff_options * o)', 1399, 1476), ('diff_words_append( char * line , unsigned long len , struct diff_words_buffer * buffer)', 1487, 1496), ('fn_out_diff_words_write_helper( struct diff_options * o , struct diff_words_style_elem * st_el , const char * newline , size_t count , const char * buf)', 1527, 1571), ('color_words_output_graph_prefix( struct diff_words_data * diff_words)', 1604, 1614), ('fn_out_diff_words_aux( void * priv , char * line , unsigned long len)', 1616, 1669), ('find_word_boundaries( mmfile_t * buffer , regex_t * word_regex , int * begin , int * end)', 1672, 1700), ('diff_words_fill( struct diff_words_buffer * buffer , mmfile_t * out , regex_t * word_regex)', 1707, 1740), ('diff_words_show( struct diff_words_data * diff_words)', 1743, 1794), ('diff_words_flush( struct emit_callback * ecbdata)', 1797, 1822), ('diff_filespec_load_driver( struct diff_filespec * one)', 1824, 1836), ('userdiff_word_regex( struct diff_filespec * one)', 1838, 1842), ('init_diff_words_data( struct emit_callback * ecbdata , struct diff_options * orig_opts , struct diff_filespec * one , struct diff_filespec * two)', 1844, 1890), ('free_diff_words_data( struct emit_callback * ecbdata)', 1892, 1908), ('diff_get_color( int diff_use_color , enum color_diff ix)', 1910, 1915), ('diff_line_prefix( struct diff_options * opt)', 1917, 1925), ('sane_truncate_line( struct emit_callback * ecb , char * line , unsigned long len)', 1927, 1941), ('find_lno( const char * line , struct emit_callback * ecbdata)', 1943, 1956), ('fn_out_consume( void * priv , char * line , unsigned long len)', 1958, 2046), ('pprint_rename( struct strbuf * name , const char * a , const char * b)', 2048, 2123), ('diffstat_add( struct diffstat_t * diffstat , const char * name_a , const char * name_b)', 2141, 2159), ('diffstat_consume( void * priv , char * line , unsigned long len)', 2161, 2170), ('scale_linear( int it , int width , int max_change)', 2174, 2185), ('show_graph( struct strbuf * out , char ch , int cnt , const char * set , const char * reset)', 2187, 2195), ('fill_print_name( struct diffstat_file * file)', 2197, 2213), ('print_stat_summary_inserts_deletes( struct diff_options * options , int files , int insertions , int deletions)', 2215, 2254), ('print_stat_summary( FILE * fp , int files , int insertions , int deletions)', 2256, 2264), ('show_stats( struct diffstat_t * data , struct diff_options * options)', 2266, 2519), ('show_shortstats( struct diffstat_t * data , struct diff_options * options)', 2521, 2541), ('show_numstat( struct diffstat_t * data , struct diff_options * options)', 2543, 2578), ('gather_dirstat( struct diff_options * opt , struct dirstat_dir * dir , unsigned long changed , const char * base , int baselen)', 2590, 2639), ('dirstat_compare( const void * _a , const void * _b)', 2641, 2646), ('show_dirstat( struct diff_options * options)', 2648, 2745), ('show_dirstat_by_line( struct diffstat_t * data , struct diff_options * options)', 2747, 2789), ('free_diffstat_info( struct diffstat_t * diffstat)', 2791, 2802), ('is_conflict_marker( const char * line , int marker_size , unsigned long len)', 2813, 2834), ('checkdiff_consume( void * priv , char * line , unsigned long len)', 2836, 2878), ('deflate_it( char * data , unsigned long size , unsigned long * result_size)', 2880, 2901), ('emit_binary_diff_body( struct diff_options * o , mmfile_t * one , mmfile_t * two)', 2903, 2973), ('emit_binary_diff( struct diff_options * o , mmfile_t * one , mmfile_t * two)', 2975, 2981), ('diff_filespec_is_binary( struct diff_filespec * one)', 2983, 3000), ('diff_funcname_pattern( struct diff_filespec * one)', 3002, 3006), ('diff_set_mnemonic_prefix( struct diff_options * options , const char * a , const char * b)', 3008, 3014), ('get_textconv( struct diff_filespec * one)', 3016, 3023), ('builtin_diff( const char * name_a , const char * name_b , struct diff_filespec * one , struct diff_filespec * two , const char * xfrm_msg , int must_show_header , struct diff_options * o , int complete_rewrite)', 3025, 3244), ('get_compact_summary( const struct diff_filepair * p , int is_renamed)', 3246, 3270), ('builtin_diffstat( const char * name_a , const char * name_b , struct diff_filespec * one , struct diff_filespec * two , struct diffstat_t * diffstat , struct diff_options * o , struct diff_filepair * p)', 3272, 3341), ('builtin_checkdiff( const char * name_a , const char * name_b , const char * attr_path , struct diff_filespec * one , struct diff_filespec * two , struct diff_options * o)', 3343, 3409), ('alloc_filespec( const char * path)', 3411, 3419), ('free_filespec( struct diff_filespec * spec)', 3421, 3427), ('fill_filespec( struct diff_filespec * spec , const struct object_id * oid , int oid_valid , unsigned short mode)', 3429, 3437), ('reuse_worktree_file( const char * name , const struct object_id * oid , int want_file)', 3444, 3513), ('diff_populate_gitlink( struct diff_filespec * s , int size_only)', 3515, 3535), ('diff_populate_filespec( struct diff_filespec * s , unsigned int flags)', 3542, 3659), ('diff_free_filespec_blob( struct diff_filespec * s)', 3661, 3672), ('diff_free_filespec_data( struct diff_filespec * s)', 3674, 3678), ('prep_temp_blob( const char * path , struct diff_tempfile * temp , void * blob , unsigned long size , const struct object_id * oid , int mode)', 3680, 3712), ('prepare_temp_file( const char * name , struct diff_filespec * one)', 3714, 3774), ('add_external_diff_name( struct argv_array * argv , const char * name , struct diff_filespec * df)', 3776, 3784), ('run_external_diff( const char * pgm , const char * name , const char * other , struct diff_filespec * one , struct diff_filespec * two , const char * xfrm_msg , int complete_rewrite , struct diff_options * o)', 3792, 3828), ('similarity_index( struct diff_filepair * p)', 3830, 3833), ('diff_abbrev_oid( const struct object_id * oid , int abbrev)', 3835, 3849), ('fill_metainfo( struct strbuf * msg , const char * name , const char * other , struct diff_filespec * one , struct diff_filespec * two , struct diff_options * o , struct diff_filepair * p , int * must_show_header , int use_color)', 3851, 3917), ('run_diff_cmd( const char * pgm , const char * name , const char * other , const char * attr_path , struct diff_filespec * one , struct diff_filespec * two , struct strbuf * msg , struct diff_options * o , struct diff_filepair * p)', 3919, 3962), ('diff_fill_oid_info( struct diff_filespec * one)', 3964, 3981), ('strip_prefix( int prefix_length , const char ** namep , const char ** otherp)', 3983, 3996), ('run_diff( struct diff_filepair * p , struct diff_options * o)', 3998, 4049), ('run_diffstat( struct diff_filepair * p , struct diff_options * o , struct diffstat_t * diffstat)', 4051, 4073), ('run_checkdiff( struct diff_filepair * p , struct diff_options * o)', 4075, 4097), ('diff_setup( struct diff_options * options)', 4099, 4135), ('diff_setup_done( struct diff_options * options)', 4137, 4248), ('opt_arg( const char * arg , int arg_short , const char * arg_long , int * val)', 4250, 4292), ('short_opt( char opt , const char ** argv , const char ** optarg)', 4296, 4310), ('parse_long_opt( const char * opt , const char ** argv , const char ** optarg)', 4312, 4331), ('stat_opt( struct diff_options * options , const char ** av)', 4333, 4404), ('parse_dirstat_opt( struct diff_options * options , const char * params)', 4406, 4419), ('parse_submodule_opt( struct diff_options * options , const char * value)', 4421, 4427), ('prepare_filter_bits( void)', 4445, 4453), ('filter_bit_tst( char status , const struct diff_options * opt)', 4455, 4458), ('parse_diff_filter_opt( const char * optarg , struct diff_options * opt)', 4460, 4501), ('enable_patch_output( int * fmt)', 4503, 4506), ('parse_ws_error_highlight_opt( struct diff_options * opt , const char * arg)', 4508, 4519), ('parse_objfind_opt( struct diff_options * opt , const char * arg)', 4521, 4536), ('diff_opt_parse( struct diff_options * options , const char ** av , int ac , const char * prefix)', 4538, 4846), ('parse_rename_score( const char ** cp_p)', 4848, 4882), ('diff_scoreopt_parse( const char * opt)', 4884, 4923), ('diff_q( struct diff_queue_struct * queue , struct diff_filepair * dp)', 4927, 4931), ('diff_queue( struct diff_queue_struct * queue , struct diff_filespec * one , struct diff_filespec * two)', 4933, 4943), ('diff_free_filepair( struct diff_filepair * p)', 4945, 4950), ('diff_aligned_abbrev( const struct object_id * oid , int len)', 4952, 4998), ('diff_flush_raw( struct diff_filepair * p , struct diff_options * opt)', 5000, 5034), ('diff_unmodified_pair( struct diff_filepair * p)', 5036, 5066), ('diff_flush_patch( struct diff_filepair * p , struct diff_options * o)', 5068, 5078), ('diff_flush_stat( struct diff_filepair * p , struct diff_options * o , struct diffstat_t * diffstat)', 5080, 5091), ('diff_flush_checkdiff( struct diff_filepair * p , struct diff_options * o)', 5093, 5104), ('diff_queue_is_empty( void)', 5106, 5114), ('diff_debug_filespec( struct diff_filespec * s , int x , const char * one)', 5117, 5128), ('diff_debug_filepair( const struct diff_filepair * p , int i)', 5130, 5137), ('diff_debug_queue( const char * msg , struct diff_queue_struct * q)', 5139, 5149), ('diff_resolve_rename_copy( void)', 5152, 5210), ('check_pair_status( struct diff_filepair * p)', 5212, 5222), ('flush_one_pair( struct diff_filepair * p , struct diff_options * opt)', 5224, 5240), ('show_file_mode_name( struct diff_options * opt , const char * newdelete , struct diff_filespec * fs)', 5242, 5255), ('show_mode_change( struct diff_options * opt , struct diff_filepair * p , int show_name)', 5257, 5273), ('show_rename_copy( struct diff_options * opt , const char * renamecopy , struct diff_filepair * p)', 5275, 5289), ('diff_summary( struct diff_options * opt , struct diff_filepair * p)', 5291, 5319), ('remove_space( char * line , int len)', 5326, 5337), ('patch_id_consume( void * priv , char * line , unsigned long len)', 5339, 5352), ('patch_id_add_string( git_SHA_CTX * ctx , const char * str)', 5354, 5357), ('patch_id_add_mode( git_SHA_CTX * ctx , unsigned mode)', 5359, 5365), ('diff_get_patch_id( struct diff_options * options , struct object_id * oid , int diff_header_only)', 5368, 5457), ('diff_flush_patch_id( struct diff_options * options , struct object_id * oid , int diff_header_only)', 5459, 5472), ('is_summary_empty( const struct diff_queue_struct * q)', 5474, 5497), ('diff_warn_rename_limit( const char * varname , int needed , int degraded_cc)', 5509, 5520), ('diff_flush_patch_all_file_pairs( struct diff_options * o)', 5522, 5565), ('diff_flush( struct diff_options * options)', 5567, 5683), ('match_filter( const struct diff_options * options , const struct diff_filepair * p)', 5685, 5694), ('diffcore_apply_filter( struct diff_options * options)', 5696, 5736), ('diff_filespec_is_identical( struct diff_filespec * one , struct diff_filespec * two)', 5739, 5749), ('diff_filespec_check_stat_unmatch( struct diff_filepair * p)', 5751, 5781), ('diffcore_skip_stat_unmatch( struct diff_options * diffopt)', 5783, 5808), ('diffnamecmp( const void * a_ , const void * b_)', 5810, 5819), ('diffcore_fix_diff_index( struct diff_options * options)', 5821, 5825), ('diffcore_std( struct diff_options * options)', 5827, 5856), ('diff_result_code( struct diff_options * opt , int status)', 5858, 5875), ('diff_can_quit_early( struct diff_options * opt)', 5877, 5882), ('is_submodule_ignored( const char * path , struct diff_options * options)', 5890, 5900), ('diff_addremove( struct diff_options * options , int addremove , unsigned mode , const struct object_id * oid , int oid_valid , const char * concatpath , unsigned dirty_submodule)', 5902, 5946), ('diff_change( struct diff_options * options , unsigned old_mode , unsigned new_mode , const struct object_id * old_oid , const struct object_id * new_oid , int old_oid_valid , int new_oid_valid , const char * concatpath , unsigned old_dirty_submodule , unsigned new_dirty_submodule)', 5948, 5990), ('diff_unmerge( struct diff_options * options , const char * path)', 5992, 6006), ('run_textconv( const char * pgm , struct diff_filespec * spec , size_t * outsize)', 6008, 6043), ('fill_textconv( struct userdiff_driver * driver , struct diff_filespec * df , char ** outbuf)', 6045, 6091), ('textconv_object( const char * path , unsigned mode , const struct object_id * oid , int oid_valid , char ** buf , unsigned long * buf_size)', 6093, 6114), ('setup_diff_pager( struct diff_options * opt)', 6116, 6130)], '/home/kevin/thesis/git/diff.h': [('diff_flags_or( struct diff_flags * a , const struct diff_flags * b)', 99, 108)], '/home/kevin/thesis/git/diffcore-break.c': [('should_break( struct diff_filespec * src , struct diff_filespec * dst , int break_score , int * merge_score_p)', 8, 115), ('diffcore_break( int break_score)', 117, 224), ('merge_broken( struct diff_filepair * p , struct diff_filepair * pp , struct diff_queue_struct * outq)', 226, 259), ('diffcore_merge_broken( void)', 261, 303)], '/home/kevin/thesis/git/diffcore-delta.c': [('spanhash_rehash( struct spanhash_top * orig)', 49, 81), ('add_spanhash( struct spanhash_top * top , unsigned int hashval , int cnt)', 83, 108), ('spanhash_cmp( const void * a_ , const void * b_)', 110, 122), ('hash_chars( struct diff_filespec * one)', 124, 163), ('diffcore_count_changes( struct diff_filespec * src , struct diff_filespec * dst , void ** src_count_p , void ** dst_count_p , unsigned long * src_copied , unsigned long * literal_added)', 165, 231)], '/home/kevin/thesis/git/diffcore-order.c': [('prepare_order( const char * orderfile)', 11, 58), ('match_order( const char * path)', 60, 79), ('compare_objs_order( const void * a_ , const void * b_)', 81, 89), ('order_objects( const char * orderfile , obj_path_fn_t obj_path , struct obj_order * objs , int nr)', 91, 105), ('pair_pathtwo( void * obj)', 107, 112), ('diffcore_order( const char * orderfile)', 114, 131)], '/home/kevin/thesis/git/diffcore-pickaxe.c': [('diffgrep_consume( void * priv , char * line , unsigned long len)', 22, 37), ('diff_grep( mmfile_t * one , mmfile_t * two , struct diff_options * o , regex_t * regexp , kwset_t kws)', 39, 68), ('contains( mmfile_t * mf , regex_t * regexp , kwset_t kws)', 70, 108), ('has_changes( mmfile_t * one , mmfile_t * two , struct diff_options * o , regex_t * regexp , kwset_t kws)', 110, 117), ('pickaxe_match( struct diff_filepair * p , struct diff_options * o , regex_t * regexp , kwset_t kws , pickaxe_fn fn)', 119, 171), ('pickaxe( struct diff_queue_struct * q , struct diff_options * o , regex_t * regexp , kwset_t kws , pickaxe_fn fn)', 173, 209), ('regcomp_or_die( regex_t * regex , const char * needle , int cflags)', 211, 220), ('diffcore_pickaxe( struct diff_options * o)', 222, 261)], '/home/kevin/thesis/git/diffcore-rename.c': [('find_rename_dst( struct diff_filespec * two)', 18, 37), ('locate_rename_dst( struct diff_filespec * two)', 39, 43), ('add_rename_dst( struct diff_filespec * two)', 48, 67), ('register_rename_src( struct diff_filepair * p)', 76, 106), ('basename_same( struct diff_filespec * src , struct diff_filespec * dst)', 108, 121), ('estimate_similarity( struct diff_filespec * src , struct diff_filespec * dst , int minimum_score)', 130, 206), ('record_rename_pair( int dst_index , int src_index , int score)', 208, 230), ('score_compare( const void * a_ , const void * b_)', 236, 250), ('hash_filespec( struct diff_filespec * filespec)', 258, 267), ('find_identical_files( struct hashmap * srcs , int dst_index , struct diff_options * options)', 269, 316), ('insert_file_table( struct hashmap * table , int index , struct diff_filespec * filespec)', 318, 327), ('find_exact_renames( struct diff_options * options)', 336, 356), ('record_if_better( struct diff_score m [ ] , struct diff_score * o)', 359, 372), ('too_many_rename_candidates( int num_create , struct diff_options * options)', 380, 420), ('find_renames( struct diff_score * mx , int dst_cnt , int minimum_score , int copies)', 422, 441), ('diffcore_rename( struct diff_options * options)', 443, 674)], '/home/kevin/thesis/git/diffcore.h': [], '/home/kevin/thesis/git/dir-iterator.c': [('dir_iterator_advance( struct dir_iterator * dir_iterator)', 53, 162), ('dir_iterator_abort( struct dir_iterator * dir_iterator)', 164, 183), ('dir_iterator_begin( const char * path)', 185, 202)], '/home/kevin/thesis/git/dir-iterator.h': [], '/home/kevin/thesis/git/dir.c': [('count_slashes( const char * s)', 58, 65), ('fspathcmp( const char * a , const char * b)', 67, 70), ('fspathncmp( const char * a , const char * b , size_t count)', 72, 75), ('git_fnmatch( const struct pathspec_item * item , const char * pattern , const char * string , int prefix)', 77, 102), ('fnmatch_icase_mem( const char * pattern , int patternlen , const char * string , int stringlen , int flags)', 104, 131), ('common_prefix_len( const struct pathspec * pathspec)', 133, 177), ('common_prefix( const struct pathspec * pathspec)', 183, 188), ('fill_directory( struct dir_struct * dir , struct index_state * istate , const struct pathspec * pathspec)', 190, 208), ('within_depth( const char * name , int namelen , int depth , int max_depth)', 210, 223), ('do_read_blob( const struct object_id * oid , struct oid_stat * oid_stat , size_t * size_out , char ** data_out)', 237, 272), ('match_attrs( const char * name , int namelen , const struct pathspec_item * item)', 278, 306), ('match_pathspec_item( const struct pathspec_item * item , int prefix , const char * name , int namelen , unsigned flags)', 320, 411), ('do_match_pathspec( const struct pathspec * ps , const char * name , int namelen , int prefix , char * seen , unsigned flags)', 428, 496), ('match_pathspec( const struct pathspec * ps , const char * name , int namelen , int prefix , char * seen , int is_dir)', 498, 512), ('submodule_path_match( const struct pathspec * ps , const char * submodule_name , char * seen)', 517, 527), ('report_path_error( const char * ps_matched , const struct pathspec * pathspec , const char * prefix)', 529, 568), ('simple_length( const char * match)', 573, 583), ('no_wildcard( const char * string)', 585, 588), ('parse_exclude_pattern( const char ** pattern , int * patternlen , unsigned * flags , int * nowildcardlen)', 590, 626), ('add_exclude( const char * string , const char * base , int baselen , struct exclude_list * el , int srcpos)', 628, 652), ('read_skip_worktree_file_from_index( const struct index_state * istate , const char * path , size_t * size_out , char ** data_out , struct oid_stat * oid_stat)', 654, 669), ('clear_exclude_list( struct exclude_list * el)', 675, 685), ('trim_trailing_spaces( char * buf)', 687, 708), ('lookup_untracked( struct untracked_cache * uc , struct untracked_cache_dir * dir , const char * name , int len)', 717, 753), ('do_invalidate_gitignore( struct untracked_cache_dir * dir)', 755, 762), ('invalidate_gitignore( struct untracked_cache * uc , struct untracked_cache_dir * dir)', 764, 769), ('invalidate_directory( struct untracked_cache * uc , struct untracked_cache_dir * dir)', 771, 789), ('add_excludes( const char * fname , const char * base , int baselen , struct exclude_list * el , struct index_state * istate , struct oid_stat * oid_stat)', 804, 868), ('add_excludes_from_buffer( char * buf , size_t size , const char * base , int baselen , struct exclude_list * el)', 870, 896), ('add_excludes_from_file_to_list( const char * fname , const char * base , int baselen , struct exclude_list * el , struct index_state * istate)', 898, 903), ('add_excludes_from_blob_to_list( struct object_id * oid , const char * base , int baselen , struct exclude_list * el)', 905, 920), ('add_exclude_list( struct dir_struct * dir , int group_type , const char * src)', 922, 934), ('add_excludes_from_file_1( struct dir_struct * dir , const char * fname , struct oid_stat * oid_stat)', 939, 953), ('add_excludes_from_file( struct dir_struct * dir , const char * fname)', 955, 959), ('match_basename( const char * basename , int basenamelen , const char * pattern , int prefix , int patternlen , unsigned flags)', 961, 983), ('match_pathname( const char * pathname , int pathlen , const char * base , int baselen , const char * pattern , int prefix , int patternlen , unsigned flags)', 985, 1042), ('last_exclude_matching_from_list( const char * pathname , int pathlen , const char * basename , int * dtype , struct exclude_list * el , struct index_state * istate)', 1050, 1095), ('is_excluded_from_list( const char * pathname , int pathlen , const char * basename , int * dtype , struct exclude_list * el , struct index_state * istate)', 1101, 1111), ('last_exclude_matching_from_lists( struct dir_struct * dir , struct index_state * istate , const char * pathname , int pathlen , const char * basename , int * dtype_p)', 1113, 1132), ('prep_exclude( struct dir_struct * dir , struct index_state * istate , const char * base , int baselen)', 1138, 1287), ('last_exclude_matching( struct dir_struct * dir , struct index_state * istate , const char * pathname , int * dtype_p)', 1295, 1311), ('is_excluded( struct dir_struct * dir , struct index_state * istate , const char * pathname , int * dtype_p)', 1318, 1326), ('dir_entry_new( const char * pathname , int len)', 1328, 1335), ('dir_add_name( struct dir_struct * dir , struct index_state * istate , const char * pathname , int len)', 1337, 1346), ('dir_add_ignored( struct dir_struct * dir , struct index_state * istate , const char * pathname , int len)', 1348, 1357), ('directory_exists_in_index_icase( struct index_state * istate , const char * dirname , int len)', 1370, 1383), ('directory_exists_in_index( struct index_state * istate , const char * dirname , int len)', 1392, 1418), ('treat_directory( struct dir_struct * dir , struct index_state * istate , struct untracked_cache_dir * untracked , const char * dirname , int len , int baselen , int exclude , const struct pathspec * pathspec)', 1453, 1516), ('simplify_away( const char * path , int pathlen , const struct pathspec * pathspec)', 1523, 1551), ('exclude_matches_pathspec( const char * path , int pathlen , const struct pathspec * pathspec)', 1564, 1593), ('get_index_dtype( struct index_state * istate , const char * path , int len)', 1595, 1632), ('get_dtype( struct dirent * de , struct index_state * istate , const char * path , int len)', 1634, 1654), ('treat_one_path( struct dir_struct * dir , struct untracked_cache_dir * untracked , struct index_state * istate , struct strbuf * path , int baselen , const struct pathspec * pathspec , int dtype , struct dirent * de)', 1656, 1734), ('treat_path_fast( struct dir_struct * dir , struct untracked_cache_dir * untracked , struct cached_dir * cdir , struct index_state * istate , struct strbuf * path , int baselen , const struct pathspec * pathspec)', 1736, 1767), ('treat_path( struct dir_struct * dir , struct untracked_cache_dir * untracked , struct cached_dir * cdir , struct index_state * istate , struct strbuf * path , int baselen , const struct pathspec * pathspec)', 1769, 1792), ('add_untracked( struct untracked_cache_dir * dir , const char * name)', 1794, 1801), ('valid_cached_dir( struct dir_struct * dir , struct untracked_cache_dir * untracked , struct index_state * istate , struct strbuf * path , int check_only)', 1803, 1849), ('open_cached_dir( struct cached_dir * cdir , struct dir_struct * dir , struct untracked_cache_dir * untracked , struct index_state * istate , struct strbuf * path , int check_only)', 1851, 1875), ('read_cached_dir( struct cached_dir * cdir)', 1877, 1902), ('close_cached_dir( struct cached_dir * cdir)', 1904, 1916), ('read_directory_recursive( struct dir_struct * dir , struct index_state * istate , const char * base , int baselen , struct untracked_cache_dir * untracked , int check_only , int stop_at_first_file , const struct pathspec * pathspec)', 1937, 2041), ('cmp_dir_entry( const void * p1 , const void * p2)', 2043, 2049), ('check_dir_entry_contains( const struct dir_entry * out , const struct dir_entry * in)', 2052, 2057), ('treat_leading_path( struct dir_struct * dir , struct index_state * istate , const char * path , int len , const struct pathspec * pathspec)', 2059, 2099), ('get_ident_string( void)', 2101, 2113), ('ident_in_untracked( const struct untracked_cache * uc)', 2115, 2124), ('set_untracked_ident( struct untracked_cache * uc)', 2126, 2136), ('new_untracked_cache( struct index_state * istate)', 2138, 2148), ('add_untracked_cache( struct index_state * istate)', 2150, 2160), ('remove_untracked_cache( struct index_state * istate)', 2162, 2169), ('validate_untracked_cache( struct dir_struct * dir , int base_len , const struct pathspec * pathspec)', 2171, 2259), ('read_directory( struct dir_struct * dir , struct index_state * istate , const char * path , int len , const struct pathspec * pathspec)', 2261, 2332), ('file_exists( const char * f)', 2334, 2338), ('cmp_icase( char a , char b)', 2340, 2347), ('dir_inside_of( const char * subdir , const char * dir)', 2354, 2379), ('is_inside_dir( const char * dir)', 2381, 2393), ('is_empty_dir( const char * path)', 2395, 2412), ('remove_dir_recurse( struct strbuf * path , int flag , int * kept_up)', 2414, 2487), ('remove_dir_recursively( struct strbuf * path , int flag)', 2489, 2492), ('setup_standard_excludes( struct dir_struct * dir)', 2496, 2514), ('remove_path( const char * name)', 2516, 2533), ('clear_directory( struct dir_struct * dir)', 2539, 2564), ('stat_data_to_disk( struct stat_data * to , const struct stat_data * from)', 2588, 2599), ('write_one_dir( struct untracked_cache_dir * untracked , struct write_data * wd)', 2601, 2651), ('write_untracked_extension( struct strbuf * out , struct untracked_cache * untracked)', 2653, 2706), ('free_untracked( struct untracked_cache_dir * ucd)', 2708, 2720), ('free_untracked_cache( struct untracked_cache * uc)', 2722, 2727), ('stat_data_from_disk( struct stat_data * to , const unsigned char * data)', 2739, 2751), ('read_one_dir( struct untracked_cache_dir ** untracked_ , struct read_data * rd)', 2753, 2808), ('set_check_only( size_t pos , void * cb)', 2810, 2815), ('read_stat( size_t pos , void * cb)', 2817, 2828), ('read_oid( size_t pos , void * cb)', 2830, 2840), ('load_oid_stat( struct oid_stat * oid_stat , const unsigned char * data , const unsigned char * sha1)', 2842, 2848), ('read_untracked_extension( const void * data , unsigned long sz)', 2850, 2937), ('invalidate_one_directory( struct untracked_cache * uc , struct untracked_cache_dir * ucd)', 2939, 2945), ('invalidate_one_component( struct untracked_cache * uc , struct untracked_cache_dir * dir , const char * path , int len)', 2971, 2991), ('untracked_cache_invalidate_path( struct index_state * istate , const char * path , int safe_path)', 2993, 3002), ('untracked_cache_remove_from_index( struct index_state * istate , const char * path)', 3004, 3008), ('untracked_cache_add_to_index( struct index_state * istate , const char * path)', 3010, 3014), ('connect_wt_gitdir_in_nested( const char * sub_worktree , const char * sub_gitdir)', 3016, 3062), ('connect_work_tree_and_git_dir( const char * work_tree_ , const char * git_dir_ , int recurse_into_nested)', 3064, 3102), ('relocate_gitdir( const char * path , const char * old_git_dir , const char * new_git_dir)', 3107, 3114)], '/home/kevin/thesis/git/dir.h': [('is_dot_or_dotdot( const char * name)', 276, 281), ('ce_path_match( const struct cache_entry * ce , const struct pathspec * pathspec , char * seen)', 333, 339), ('dir_path_match( const struct dir_entry * ent , const struct pathspec * pathspec , int prefix , char * seen)', 341, 349)], '/home/kevin/thesis/git/editor.c': [('is_terminal_dumb( void)', 10, 14), ('git_editor( void)', 16, 35), ('launch_editor( const char * path , struct strbuf * buffer , const char * const * env)', 37, 97)], '/home/kevin/thesis/git/entry.c': [('create_directories( const char * path , int path_len , const struct checkout * state)', 9, 48), ('remove_subtree( struct strbuf * path)', 50, 77), ('create_file( const char * path , unsigned int mode)', 79, 83), ('read_blob_entry( const struct cache_entry * ce , unsigned long * size)', 85, 96), ('open_output_fd( char * path , const struct cache_entry * ce , int to_tempfile)', 98, 108), ('fstat_output( int fd , const struct checkout * state , struct stat * st)', 110, 119), ('streaming_write_entry( const struct cache_entry * ce , char * path , struct stream_filter * filter , const struct checkout * state , int to_tempfile , int * fstat_done , struct stat * statbuf)', 121, 140), ('enable_delayed_checkout( struct checkout * state)', 142, 150), ('remove_available_paths( struct string_list_item * item , void * cb_data)', 152, 161), ('finish_delayed_checkout( struct checkout * state)', 163, 251), ('write_entry( struct cache_entry * ce , char * path , const struct checkout * state , int to_tempfile)', 253, 382), ('check_path( const char * path , int len , struct stat * st , int skiplen)', 388, 399), ('checkout_entry( struct cache_entry * ce , const struct checkout * state , char * topath)', 409, 477)], '/home/kevin/thesis/git/environment.c': [('expand_namespace( const char * raw_namespace)', 134, 153), ('getenv_safe( struct argv_array * argv , const char * name)', 159, 168), ('setup_git_env( const char * git_dir)', 170, 196), ('is_bare_repository( void)', 198, 202), ('have_git_dir( void)', 204, 208), ('get_git_dir( void)', 210, 215), ('get_git_common_dir( void)', 217, 222), ('get_git_namespace( void)', 224, 229), ('strip_namespace( const char * namespaced_ref)', 231, 237), ('get_super_prefix( void)', 239, 247), ('set_git_work_tree( const char * new_work_tree)', 256, 268), ('get_git_work_tree( void)', 270, 273), ('get_object_directory( void)', 275, 280), ('odb_mkstemp( struct strbuf * temp_filename , const char * pattern)', 282, 300), ('odb_pack_keep( const char * name)', 302, 313), ('get_index_file( void)', 315, 320), ('get_graft_file( void)', 322, 327), ('set_git_dir_1( const char * path)', 329, 334), ('update_relative_gitdir( const char * name , const char * old_cwd , const char * new_cwd , void * data)', 336, 347), ('set_git_dir( const char * path)', 349, 354), ('get_log_output_encoding( void)', 356, 360), ('get_commit_output_encoding( void)', 362, 365), ('set_shared_repository( int value)', 370, 374), ('get_shared_repository( void)', 376, 386), ('reset_shared_repository( void)', 388, 391), ('use_optional_locks( void)', 393, 396), ('print_sha1_ellipsis( void)', 398, 411)], '/home/kevin/thesis/git/exec-cmd.c': [('system_prefix( void)', 40, 57), ('git_get_exec_path_from_argv0( struct strbuf * buf , const char * argv0)', 64, 79), ('git_get_exec_path_procfs( struct strbuf * buf)', 87, 96), ('git_get_exec_path_bsd_sysctl( struct strbuf * buf)', 105, 123), ('git_get_exec_path_darwin( struct strbuf * buf)', 132, 144), ('git_get_exec_path_wpgmptr( struct strbuf * buf)', 153, 162), ('git_get_exec_path( struct strbuf * buf , const char * argv0)', 170, 213), ('git_resolve_executable_dir( const char * argv0)', 215, 237), ('system_prefix( void)', 244, 247), ('git_resolve_executable_dir( const char * argv0)', 253, 255), ('system_path( const char * path)', 259, 268), ('git_set_exec_path( const char * exec_path)', 272, 279), ('git_exec_path( void)', 282, 292), ('add_path( struct strbuf * out , const char * path)', 294, 300), ('setup_path( void)', 302, 319), ('prepare_git_cmd( struct argv_array * out , const char ** argv)', 321, 326), ('execv_git_cmd( const char ** argv)', 328, 342), ('execl_git_cmd( const char * cmd , ...)', 344, 365)], '/home/kevin/thesis/git/exec-cmd.h': [], '/home/kevin/thesis/git/fast-import.c': [('write_branch_report( FILE * rpt , struct branch * b)', 378, 404), ('write_crash_report( const char * err)', 408, 493), ('die_nicely( const char * err , va_list params)', 499, 517), ('set_checkpoint_signal( void)', 521, 523), ('checkpoint_signal( int signo)', 527, 530), ('set_checkpoint_signal( void)', 532, 541), ('alloc_objects( unsigned int cnt)', 545, 556), ('new_object( struct object_id * oid)', 558, 568), ('find_object( struct object_id * oid)', 570, 578), ('insert_object( struct object_id * oid)', 580, 596), ('invalidate_pack_id( unsigned int id)', 598, 623), ('hc_str( const char * s , size_t len)', 625, 631), ('pool_strdup( const char * s)', 633, 639), ('insert_mark( uintmax_t idnum , struct object_entry * oe)', 641, 662), ('find_mark( uintmax_t idnum)', 664, 681), ('to_atom( const char * s , unsigned short len)', 683, 700), ('lookup_branch( const char * name)', 702, 711), ('new_branch( const char * name)', 713, 734), ('hc_entries( unsigned int cnt)', 736, 740), ('new_tree_content( unsigned int cnt)', 742, 767), ('release_tree_content( struct tree_content * t)', 770, 776), ('release_tree_content_recursive( struct tree_content * t)', 778, 784), ('grow_tree_content( struct tree_content * t , int amt)', 786, 796), ('new_tree_entry( void)', 798, 817), ('release_tree_entry( struct tree_entry * e)', 819, 825), ('dup_tree_content( struct tree_content * s)', 827, 850), ('start_packfile( void)', 852, 878), ('create_index( void)', 880, 901), ('keep_pack( const char * curr_index_name)', 903, 926), ('unkeep_all_packs( void)', 928, 939), ('loosen_small_pack( const struct packed_git * p)', 941, 956), ('end_packfile( void)', 958, 1032), ('cycle_packfile( void)', 1034, 1038), ('store_object( enum object_type type , struct strbuf * dat , struct last_object * last , struct object_id * oidout , uintmax_t mark)', 1040, 1176), ('truncate_pack( struct hashfile_checkpoint * checkpoint)', 1178, 1183), ('stream_blob( uintmax_t len , struct object_id * oidout , uintmax_t mark)', 1185, 1288), ('gfi_unpack_entry( struct object_entry * oe , unsigned long * sizep)', 1308, 1335), ('get_mode( const char * str , uint16_t * modep)', 1337, 1349), ('load_tree( struct tree_entry * root)', 1351, 1399), ('tecmp0( const void * _a , const void * _b)', 1401, 1408), ('tecmp1( const void * _a , const void * _b)', 1410, 1417), ('mktree( struct tree_content * t , int v , struct strbuf * b)', 1419, 1445), ('store_tree( struct tree_entry * root)', 1447, 1491), ('tree_content_replace( struct tree_entry * root , const struct object_id * oid , const uint16_t mode , struct tree_content * newtree)', 1493, 1506), ('tree_content_set( struct tree_entry * root , const char * p , const struct object_id * oid , const uint16_t mode , struct tree_content * subtree)', 1508, 1595), ('tree_content_remove( struct tree_entry * root , const char * p , struct tree_entry * backup_leaf , int allow_root)', 1597, 1660), ('tree_content_get( struct tree_entry * root , const char * p , struct tree_entry * leaf , int allow_root)', 1662, 1708), ('update_branch( struct branch * b)', 1710, 1753), ('dump_branches( void)', 1755, 1764), ('dump_tags( void)', 1766, 1796), ('dump_marks_helper( FILE * f , uintmax_t base , struct mark_set * m)', 1798, 1816), ('dump_marks( void)', 1818, 1847), ('read_marks( void)', 1849, 1889), ('read_next_command( void)', 1892, 1948), ('skip_optional_lf( void)', 1950, 1955), ('parse_mark( void)', 1957, 1966), ('parse_data( struct strbuf * sb , uintmax_t limit , uintmax_t * len_res)', 1968, 2014), ('validate_raw_date( const char * src , struct strbuf * result)', 2016, 2039), ('parse_ident( const char * buf)', 2041, 2083), ('parse_and_store_blob( struct last_object * last , struct object_id * oidout , uintmax_t mark)', 2085, 2104), ('parse_new_blob( void)', 2106, 2111), ('unload_one_branch( void)', 2113, 2143), ('load_branch( struct branch * b)', 2145, 2155), ('convert_num_notes_to_fanout( uintmax_t num_notes)', 2157, 2163), ('construct_path_with_fanout( const char * hex_sha1 , unsigned char fanout , char * path)', 2165, 2179), ('do_change_note_fanout( struct tree_entry * orig_root , struct tree_entry * root , char * hex_oid , unsigned int hex_oid_len , char * fullpath , unsigned int fullpath_len , unsigned char fanout)', 2181, 2258), ('change_note_fanout( struct tree_entry * root , unsigned char fanout)', 2260, 2271), ('parse_mark_ref( const char * p , char ** endptr)', 2283, 2293), ('parse_mark_ref_eol( const char * p)', 2299, 2308), ('parse_mark_ref_space( const char ** p)', 2314, 2324), ('file_change_m( const char * p , struct branch * b)', 2326, 2423), ('file_change_d( const char * p , struct branch * b)', 2425, 2437), ('file_change_cr( const char * s , struct branch * b , int rename)', 2439, 2489), ('note_change_n( const char * p , struct branch * b , unsigned char * old_fanout)', 2491, 2588), ('file_change_deleteall( struct branch * b)', 2590, 2597), ('parse_from_commit( struct branch * b , char * buf , unsigned long size)', 2599, 2608), ('parse_from_existing( struct branch * b)', 2610, 2624), ('parse_from( struct branch * b)', 2626, 2675), ('parse_merge( unsigned int * count)', 2677, 2714), ('parse_new_commit( const char * arg)', 2716, 2814), ('parse_new_tag( const char * arg)', 2816, 2894), ('parse_reset_branch( const char * arg)', 2896, 2916), ('cat_blob_write( const char * buf , unsigned long size)', 2918, 2922), ('cat_blob( struct object_entry * oe , struct object_id * oid)', 2924, 2967), ('parse_get_mark( const char * p)', 2969, 2984), ('parse_cat_blob( const char * p)', 2986, 3006), ('dereference( struct object_entry * oe , struct object_id * oid)', 3008, 3058), ('parse_treeish_dataref( const char ** p)', 3060, 3081), ('print_ls( int mode , const unsigned char * sha1 , const char * path)', 3083, 3108), ('parse_ls( const char * p , struct branch * b)', 3110, 3151), ('checkpoint( void)', 3153, 3162), ('parse_checkpoint( void)', 3164, 3168), ('parse_progress( void)', 3170, 3176), ('make_fast_import_path( const char * path)', 3178, 3183), ('option_import_marks( const char * marks , int from_stream , int ignore_missing)', 3185, 3201), ('option_date_format( const char * fmt)', 3203, 3213), ('ulong_arg( const char * option , const char * arg)', 3215, 3222), ('option_depth( const char * depth)', 3224, 3229), ('option_active_branches( const char * branches)', 3231, 3234), ('option_export_marks( const char * marks)', 3236, 3240), ('option_cat_blob_fd( const char * fd)', 3242, 3248), ('option_export_pack_edges( const char * edges)', 3250, 3255), ('parse_one_option( const char * option)', 3257, 3291), ('parse_one_feature( const char * feature , int from_stream)', 3293, 3324), ('parse_feature( const char * feature)', 3326, 3335), ('parse_option( const char * option)', 3337, 3346), ('git_pack_config( void)', 3348, 3373), ('parse_argv( void)', 3378, 3410), ('cmd_main( int argc , const char ** argv)', 3412, 3517)], '/home/kevin/thesis/git/fetch-object.c': [('fetch_refs( const char * remote_name , struct ref * ref)', 8, 24), ('fetch_object( const char * remote_name , const unsigned char * sha1)', 26, 31), ('fetch_objects( const char * remote_name , const struct oid_array * to_fetch)', 33, 45)], '/home/kevin/thesis/git/fetch-object.h': [], '/home/kevin/thesis/git/fetch-pack.c': [('print_verbose( const struct fetch_pack_args * args , const char * fmt , ...)', 62, 74), ('cache_one_alternate( const char * refname , const struct object_id * oid , void * vcache)', 81, 94), ('for_each_cached_alternate( void(*cb)(structobject*))', 96, 109), ('rev_list_push( struct commit * commit , int mark)', 111, 124), ('rev_list_insert_ref( const char * refname , const struct object_id * oid)', 126, 134), ('rev_list_insert_ref_oid( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 136, 140), ('clear_marks( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 142, 151), ('mark_common( struct commit * commit , int ancestors_only , int dont_parse)', 159, 185), ('get_rev( void)', 191, 231), ('consume_shallow_list( struct fetch_pack_args * args , int fd)', 241, 257), ('get_ack( int fd , struct object_id * result_oid)', 259, 287), ('send_request( struct fetch_pack_args * args , int fd , struct strbuf * buf)', 289, 297), ('insert_one_alternate_object( struct object * obj)', 299, 302), ('next_flush( int stateless_rpc , int count)', 308, 322), ('find_common( struct fetch_pack_args * args , int fd [ 2 ] , struct object_id * result_oid , struct ref * refs)', 324, 566), ('mark_complete( const struct object_id * oid)', 570, 589), ('mark_complete_oid( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 591, 595), ('mark_recent_complete_commits( struct fetch_pack_args * args , timestamp_t cutoff)', 597, 605), ('add_refs_to_oidset( struct oidset * oids , struct ref * refs)', 607, 611), ('tip_oids_contain( struct oidset * tip_oids , struct ref * unmatched , struct ref * newlist , const struct object_id * id)', 613, 628), ('filter_refs( struct fetch_pack_args * args , struct ref ** refs , struct ref ** sought , int nr_sought)', 630, 708), ('mark_alternate_complete( struct object * obj)', 710, 713), ('add_loose_objects_to_set( const struct object_id * oid , const char * path , void * data)', 724, 735), ('everything_local( struct fetch_pack_args * args , struct ref ** refs , struct ref ** sought , int nr_sought)', 737, 835), ('sideband_demux( int in , int out , void * data)', 837, 845), ('get_pack( struct fetch_pack_args * args , int xd [ 2 ] , char ** pack_lockfile)', 847, 964), ('cmp_ref_by_name( const void * a_ , const void * b_)', 966, 971), ('do_fetch_pack( struct fetch_pack_args * args , int fd [ 2 ] , const struct ref * orig_ref , struct ref ** sought , int nr_sought , struct shallow_info * si , char ** pack_lockfile)', 973, 1081), ('add_shallow_requests( struct strbuf * req_buf , const struct fetch_pack_args * args)', 1083, 1101), ('add_wants( const struct ref * wants , struct strbuf * req_buf)', 1103, 1128), ('add_common( struct strbuf * req_buf , struct oidset * common)', 1130, 1139), ('add_haves( struct strbuf * req_buf , int * haves_to_send , int * in_vain)', 1141, 1164), ('send_fetch_request( int fd_out , const struct fetch_pack_args * args , const struct ref * wants , struct oidset * common , int * haves_to_send , int * in_vain)', 1166, 1231), ('process_section_header( struct packet_reader * reader , const char * section , int peek)', 1239, 1257), ('process_acks( struct packet_reader * reader , struct oidset * common)', 1259, 1298), ('receive_shallow_info( struct fetch_pack_args * args , struct packet_reader * reader)', 1300, 1335), ('do_fetch_pack_v2( struct fetch_pack_args * args , int fd [ 2 ] , const struct ref * orig_ref , struct ref ** sought , int nr_sought , char ** pack_lockfile)', 1345, 1425), ('fetch_pack_config( void)', 1427, 1436), ('fetch_pack_setup( void)', 1438, 1449), ('remove_duplicates_in_refs( struct ref ** ref , int nr)', 1451, 1470), ('update_shallow( struct fetch_pack_args * args , struct ref ** sought , int nr_sought , struct shallow_info * si)', 1472, 1564), ('fetch_pack( struct fetch_pack_args * args , int fd [ ] , struct child_process * conn , const struct ref * ref , const char * dest , struct ref ** sought , int nr_sought , struct oid_array * shallow , char ** pack_lockfile , enum protocol_version version)', 1566, 1597), ('report_unmatched_refs( struct ref ** sought , int nr_sought)', 1599, 1620)], '/home/kevin/thesis/git/fetch-pack.h': [], '/home/kevin/thesis/git/fmt-merge-msg.h': [], '/home/kevin/thesis/git/fsck.c': [('FOREACH_MSG_ID( MSG_ID)', 95, 96), ('parse_msg_id( const char * text)', 100, 126), ('fsck_msg_type( enum fsck_msg_id msg_id , struct fsck_options * options)', 128, 144), ('init_skiplist( struct fsck_options * options , const char * path)', 146, 182), ('parse_msg_type( const char * str)', 184, 194), ('is_valid_msg_type( const char * msg_id , const char * msg_type)', 196, 202), ('fsck_set_msg_type( struct fsck_options * options , const char * msg_id , const char * msg_type)', 204, 226), ('fsck_set_msg_types( struct fsck_options * options , const char * values)', 228, 264), ('append_msg_id( struct strbuf * sb , const char * msg_id)', 266, 282), ('report( struct fsck_options * options , struct object * object , enum fsck_msg_id id , const char * fmt , ...)', 285, 313), ('get_object_name( struct fsck_options * options , struct object * obj)', 315, 320), ('put_object_name( struct fsck_options * options , struct object * obj , const char * fmt , ...)', 322, 338), ('describe_object( struct fsck_options * o , struct object * obj)', 340, 351), ('fsck_walk_tree( struct tree * tree , void * data , struct fsck_options * options)', 353, 397), ('fsck_walk_commit( struct commit * commit , void * data , struct fsck_options * options)', 399, 460), ('fsck_walk_tag( struct tag * tag , void * data , struct fsck_options * options)', 462, 471), ('fsck_walk( struct object * obj , void * data , struct fsck_options * options)', 473, 494), ('verify_ordered( unsigned mode1 , const char * name1 , unsigned mode2 , const char * name2)', 507, 540), ('fsck_tree( struct tree * item , struct fsck_options * options)', 542, 657), ('verify_headers( const void * data , unsigned long size , struct object * obj , struct fsck_options * options)', 659, 688), ('fsck_ident( const char ** ident , struct object * obj , struct fsck_options * options)', 690, 732), ('fsck_commit_buffer( struct commit * commit , const char * buffer , unsigned long size , struct fsck_options * options)', 734, 811), ('fsck_commit( struct commit * commit , const char * data , unsigned long size , struct fsck_options * options)', 813, 821), ('fsck_tag_buffer( struct tag * tag , const char * data , unsigned long size , struct fsck_options * options)', 823, 916), ('fsck_tag( struct tag * tag , const char * data , unsigned long size , struct fsck_options * options)', 918, 927), ('fsck_gitmodules_fn( const char * var , const char * value , void * vdata)', 935, 955), ('fsck_blob( struct blob * blob , const char * buf , unsigned long size , struct fsck_options * options)', 957, 987), ('fsck_object( struct object * obj , void * data , unsigned long size , struct fsck_options * options)', 989, 1008), ('fsck_error_function( struct fsck_options * o , struct object * obj , int msg_type , const char * message)', 1010, 1019), ('fsck_finish( struct fsck_options * options)', 1021, 1069)], '/home/kevin/thesis/git/fsck.h': [], '/home/kevin/thesis/git/fsmonitor.c': [('fsmonitor_ewah_callback( size_t pos , void * is)', 14, 20), ('read_fsmonitor_extension( struct index_state * istate , const void * data , unsigned long sz)', 22, 55), ('fill_fsmonitor_bitmap( struct index_state * istate)', 57, 64), ('write_fsmonitor_extension( struct strbuf * sb , struct index_state * istate)', 66, 92), ('query_fsmonitor( int version , uint64_t last_update , struct strbuf * query_result)', 97, 111), ('fsmonitor_refresh_callback( struct index_state * istate , const char * name)', 113, 128), ('refresh_fsmonitor( struct index_state * istate)', 130, 192), ('add_fsmonitor( struct index_state * istate)', 194, 216), ('remove_fsmonitor( struct index_state * istate)', 218, 225), ('tweak_fsmonitor( struct index_state * istate)', 227, 263)], '/home/kevin/thesis/git/fsmonitor.h': [('mark_fsmonitor_valid( struct cache_entry * ce)', 49, 55), ('mark_fsmonitor_invalid( struct index_state * istate , struct cache_entry * ce)', 64, 71)], '/home/kevin/thesis/git/gettext.c': [('get_preferred_languages( void)', 30, 47), ('use_gettext_poison( void)', 50, 56), ('test_vsnprintf( const char * fmt , ...)', 60, 69), ('init_gettext_charset( const char * domain)', 71, 157), ('git_setup_gettext( void)', 159, 179), ('gettext_width( const char * s)', 182, 189), ('is_utf8_locale( void)', 192, 209)], '/home/kevin/thesis/git/gettext.h': [('git_setup_gettext( void)', 35, 37), ('gettext_width( const char * s)', 38, 41), ('_( const char * msgid)', 50, 55), ('Q_( const char * msgid , const char * plu , unsigned long n)', 58, 63)], '/home/kevin/thesis/git/git-compat-util.h': [('git_has_dos_drive_prefix( const char * path)', 346, 349), ('git_skip_dos_drive_prefix( char ** path)', 354, 357), ('git_is_dir_sep( int c)', 362, 365), ('git_offset_1st_component( const char * path)', 370, 373), ('git_find_last_dir_sep( const char * path)', 378, 381), ('const_error( void)', 446, 449), ('skip_prefix( const char * str , const char * prefix , const char ** out)', 480, 490), ('skip_to_optional_arg( const char * str , const char * prefix , const char ** arg)', 509, 513), ('skip_prefix_mem( const char * buf , size_t len , const char * prefix , const char ** out , size_t * outlen)', 519, 530), ('strip_suffix_mem( const char * buf , size_t * len , const char * suffix)', 536, 544), ('strip_suffix( const char * str , const char * suffix , size_t * len)', 553, 557), ('ends_with( const char * str , const char * suffix)', 559, 563), ('gitstrchrnul( const char * s , int c)', 759, 764), ('st_add( size_t a , size_t b)', 783, 789), ('st_mult( size_t a , size_t b)', 793, 799), ('st_sub( size_t a , size_t b)', 801, 807), ('copy_array( void * dst , const void * src , size_t n , size_t size)', 851, 855), ('move_array( void * dst , const void * src , size_t n , size_t size)', 859, 863), ('xstrdup_or_null( const char * str)', 922, 925), ('xsize_t( off_t len)', 927, 934), ('sane_case( int x , int high)', 991, 996), ('sane_iscase( int x , int is_lower)', 998, 1007), ('skip_iprefix( const char * str , const char * prefix , const char ** out)', 1014, 1024), ('strtoul_ui( char const * s , int base , unsigned int * result)', 1026, 1040), ('strtol_i( char const * s , int base , int * result)', 1042, 1053), ('sane_qsort( void * base , size_t nmemb , size_t size , int(*compar)(constvoid*,constvoid*))', 1062, 1067), ('regexec_buf( const regex_t * preg , const char * buf , size_t size , size_t nmatch , regmatch_t pmatch [ ] , int eflags)', 1084, 1091), ('is_missing_file_error( int errno_)', 1215, 1218)], '/home/kevin/thesis/git/git-p4.py': [('__init__( self , returncode , cmd )', 39, 41), ('__str__( self )', 42, 43), ('p4_build_cmd( cmd )', 55, 103), ('git_dir( path )', 105, 113), ('chdir( path , is_client_path = False )', 115, 135), ('calcDiskFree( )', 137, 145), ('die( msg )', 147, 152), ('write_pipe( c , stdin )', 154, 166), ('p4_write_pipe( c , stdin )', 168, 170), ('read_pipe_full( c )', 172, 183), ('read_pipe( c , ignore_error = False )', 185, 196), ('read_pipe_text( c )', 198, 206), ('p4_read_pipe( c , ignore_error = False )', 208, 210), ('read_pipe_lines( c )', 212, 223), ('p4_read_pipe_lines( c )', 225, 228), ('p4_has_command( cmd )', 230, 237), ('p4_has_move_command( )', 239, 256), ('system( cmd , ignore_error = False )', 258, 266), ('p4_system( cmd )', 268, 274), ('die_bad_access( s )', 276, 277), ('p4_check_access( min_expiration = 1 )', 279, 320), ('p4_version_string( )', 323, 336), ('p4_integrate( src , dest )', 338, 339), ('p4_sync( f , * options )', 341, 342), ('p4_add( f )', 344, 349), ('p4_delete( f )', 351, 352), ('p4_edit( f , * options )', 354, 355), ('p4_revert( f )', 357, 358), ('p4_reopen( type , f )', 360, 361), ('p4_reopen_in_change( changelist , files )', 363, 365), ('p4_move( src , dest )', 367, 368), ('p4_last_change( )', 370, 372), ('p4_describe( change , shelved = False )', 374, 400), ('split_p4_type( p4type )', 407, 435), ('p4_type( f )', 440, 442), ('p4_keywords_regexp_for_type( base , type_mods )', 448, 465), ('p4_keywords_regexp_for_file( file )', 472, 477), ('setP4ExecBit( file , mode )', 479, 492), ('getP4OpenedType( file )', 494, 502), ('getP4Labels( depotPaths )', 505, 514), ('getGitTags( )', 517, 522), ('diffTreePattern( )', 524, 529), ('parseDiffTreeEntry( entry )', 531, 562), ('isModeExec( mode )', 564, 567), ('__init__( self , exit_code )', 571, 572), ('__init__( self , exit_code , p4_result )', 576, 580), ('__init__( self , exit_code , p4_result , limit )', 584, 586), ('isModeExecChanged( src_mode , dst_mode )', 588, 589), ("p4CmdList( cmd , stdin = None , stdin_mode = 'w+b' , cb = None , skip_info = False , errors_as_exceptions = False )", 591, 592), ('p4Cmd( cmd )', 661, 666), ('p4Where( depotPath )', 668, 701), ('currentGitBranch( )', 703, 704), ('isValidGitDir( path )', 706, 707), ('parseRevision( ref )', 709, 710), ('branchExists( ref )', 712, 715), ('extractLogMessageFromGitCommit( commit )', 717, 729), ('extractSettingsGitLog( log )', 731, 754), ('gitBranchExists( branch )', 756, 759), ('gitUpdateRef( ref , newvalue )', 761, 762), ('gitDeleteRef( ref )', 764, 765), ('gitConfig( key , typeSpecifier = None )', 769, 777), ('gitConfigBool( key )', 779, 786), ('gitConfigInt( key )', 788, 797), ('gitConfigList( key )', 799, 805), ('p4BranchesInGit( branchesAreInRemotes = True )', 807, 837), ('branch_exists( branch )', 839, 848), ('findUpstreamBranchPoint( head = "HEAD" )', 850, 875), ('createOrUpdateBranchesFromOrigin( localRefPrefix = "refs/remotes/p4/" , silent = True )', 877, 922), ('originP4BranchesExist( )', 924, 925), ('p4ParseNumericChangeRange( parts )', 928, 935), ('chooseBlockSize( blockSize )', 937, 941), ('p4ChangesForPaths( depotPaths , changeRange , requestedBlockSize )', 943, 1018), ('p4PathStartsWith( path , prefix )', 1020, 1030), ('getClientSpec( )', 1032, 1060), ('getClientRoot( )', 1062, 1073), ('wildcard_decode( path )', 1080, 1090), ('wildcard_encode( path )', 1092, 1098), ('wildcard_present( path )', 1100, 1102), ('__init__( self , writeToGitStream )', 1107, 1109), ('generatePointer( self , cloneDestination , contentFile )', 1111, 1114), ('pushFile( self , localLargeFile )', 1116, 1119), ('hasLargeFileExtension( self , relPath )', 1121, 1126), ('generateTempFile( self , contents )', 1128, 1133), ('exceedsLargeFileThreshold( self , relPath , contents )', 1135, 1154), ('addLargeFile( self , relPath )', 1156, 1157), ('removeLargeFile( self , relPath )', 1159, 1160), ('isLargeFile( self , relPath )', 1162, 1163), ('processContent( self , git_mode , relPath , contents )', 1165, 1185), ('generatePointer( self , contentFile )', 1190, 1199), ('pushFile( self , localLargeFile )', 1201, 1208), ('__init__( self , * args )', 1214, 1216), ('generatePointer( self , contentFile )', 1218, 1251), ('pushFile( self , localLargeFile )', 1253, 1258), ('generateGitAttributes( self )', 1260, 1275), ('addLargeFile( self , relPath )', 1277, 1279), ('removeLargeFile( self , relPath )', 1281, 1283), ('processContent( self , git_mode , relPath , contents )', 1285, 1290), ('__init__( self )', 1293, 1296), ('ensure_value( self , attr , value )', 1299, 1302), ('__init__( self )', 1305, 1307), ('p4UserId( self )', 1309, 1318), ('p4UserIsMe( self , p4User )', 1320, 1326), ('getUserCacheFilename( self )', 1328, 1330), ('getUserMapFromPerforceServer( self )', 1332, 1359), ('loadUserMapFromCache( self )', 1361, 1372), ('__init__( self )', 1375, 1379), ('run( self , args )', 1381, 1387), ('__init__( self )', 1390, 1396), ('run( self , args )', 1398, 1446), ('__init__( self )', 1452, 1500), ('check( self )', 1502, 1504), ('separate_jobs_from_description( self , message )', 1506, 1528), ('prepareLogMessage( self , template , message , jobs )', 1530, 1560), ('patchRCSKeywords( self , file , pattern )', 1562, 1583), ('p4UserForCommit( self , id )', 1585, 1594), ('checkValidP4Users( self , commits )', 1596, 1605), ('lastP4Changelist( self )', 1607, 1624), ('modifyChangelistUser( self , changelist , newUser )', 1626, 1646), ('canChangeChangelists( self )', 1648, 1658), ('prepareSubmitTemplate( self , changelist = None )', 1660, 1726), ('edit_template( self , template_file )', 1728, 1761), ('get_diff_description( self , editedFiles , filesToAdd , symlinks )', 1763, 1790), ('applyCommit( self , id )', 1792, 2067), ('exportGitTags( self , gitTags )', 2071, 2138), ('run( self , args )', 2140, 2389), ('__init__( self , client_name )', 2395, 2399), ('append( self , view_line )', 2401, 2443), ('convert_client_path( self , clientFile )', 2445, 2450), ('update_client_spec_path_cache( self , files )', 2452, 2480), ('map_in_client( self , depot_path )', 2482, 2494), ('__init__( self )', 2499, 2575), ('checkpoint( self )', 2578, 2583), ('cmp_shelved( self , path , filerev , revision )', 2585, 2596), ('extractFilesFromCommit( self , commit , shelved = False , shelved_cl = 0 , origin_revision = 0 )', 2598, 2636), ('extractJobsFromCommit( self , commit )', 2638, 2645), ('stripRepoPath( self , path , prefixes )', 2647, 2677), ('splitFilesIntoBranches( self , commit )', 2679, 2720), ('writeToGitStream( self , gitMode , relPath , contents )', 2722, 2727), ('encodeWithUTF8( self , path )', 2729, 2739), ('streamOneP4File( self , file , contents )', 2744, 2822), ('streamOneP4Deletion( self , file )', 2824, 2833), ('streamP4FilesCb( self , marshalled )', 2836, 2897), ('streamP4Files.streamP4FilesCbSelf( entry )', 2922, 2923), ('streamP4Files( self , files )', 2900, 2942), ('make_email( self , userid )', 2944, 2948), ('streamTag( self , gitStream , labelName , labelDetails , commit , epoch )', 2950, 2983), ('inClientSpec( self , path )', 2985, 2991), ('hasBranchPrefix( self , path )', 2993, 3000), ('commit( self , details , files , branch , parent = "" )', 3002, 3084), ('getLabels( self )', 3087, 3111), ('importP4Labels( self , stream , p4Labels )', 3117, 3180), ('guessProjectName( self )', 3182, 3189), ('getBranchMapping( self )', 3191, 3250), ('getBranchMappingFromGitBranches( self )', 3252, 3259), ('updateOptionDict( self , d )', 3261, 3266), ('readOptions( self , d )', 3268, 3270), ('gitRefForBranch( self , branch )', 3272, 3279), ('gitCommitByP4Change( self , ref , change )', 3281, 3312), ('importNewBranch( self , branch , maxChange )', 3314, 3340), ('searchParent( self , parent , branch , target )', 3342, 3355), ('importChanges( self , changes , shelved = False , origin_revision = 0 )', 3357, 3437), ('sync_origin_only( self )', 3439, 3445), ('importHeadRevision( self , revision )', 3447, 3501), ('openStreams( self )', 3503, 3510), ('closeStreams( self )', 3512, 3517), ('run( self , args )', 3519, 3796), ('__init__( self )', 3799, 3806), ('run( self , args )', 3808, 3813), ('rebase( self )', 3815, 3832), ('__init__( self )', 3835, 3848), ('defaultDestination( self , args )', 3850, 3857), ('run( self , args )', 3859, 3911), ('__init__( self )', 3914, 3926), ('renameBranch( self , branch_name )', 3928, 3943), ('findLastP4Revision( self , starting_point )', 3945, 3956), ('run( self , args )', 3958, 3994), ('__init__( self )', 3997, 4002), ('run( self , args )', 4004, 4022), ('__init__( self )', 4025, 4026), ('format_description( self , description )', 4028, 4032), ('printUsage( commands )', 4034, 4040), ('main( )', 4055, 4109)], '/home/kevin/thesis/git/git.c': [('exclude_helpers_from_list( struct string_list * list)', 42, 52), ('match_token( const char * spec , int len , const char * token)', 54, 59), ('list_cmds( const char * spec)', 61, 99), ('commit_pager_choice( void)', 101, 112), ('setup_auto_pager( const char * cmd , int def)', 114, 122), ('handle_options( const char ** * argv , int * argc , int * envchanged)', 124, 308), ('handle_alias( int * argcp , const char ** * argv)', 310, 377), ('run_builtin( struct cmd_struct * p , int argc , const char ** argv)', 379, 436), ('get_builtin( const char * s)', 565, 574), ('is_builtin( const char * s)', 576, 579), ('list_builtins( struct string_list * out , unsigned int exclude_option)', 581, 590), ('strip_extension( const char ** argv)', 593, 599), ('handle_builtin( int argc , const char ** argv)', 604, 634), ('execv_dashed_external( const char ** argv)', 636, 667), ('run_argv( int * argcp , const char ** * argv)', 669, 701), ('cmd_main( int argc , const char ** argv)', 703, 781)], '/home/kevin/thesis/git/gpg-interface.c': [('signature_check_clear( struct signature_check * sigc)', 15, 22), ('parse_gpg_output( struct signature_check * sigc)', 38, 65), ('check_signature( const char * payload , size_t plen , const char * signature , size_t slen , struct signature_check * sigc)', 67, 90), ('print_signature_buffer( const struct signature_check * sigc , unsigned flags)', 92, 102), ('is_gpg_start( const char * line)', 104, 108), ('parse_signature( const char * buf , size_t size)', 110, 124), ('set_signing_key( const char * key)', 126, 130), ('git_gpg_config( const char * var , const char * value , void * cb)', 132, 149), ('get_signing_key( void)', 151, 156), ('sign_buffer( struct strbuf * buffer , struct strbuf * signature , const char * signing_key)', 158, 197), ('verify_signed_buffer( const char * payload , size_t payload_size , const char * signature , size_t signature_size , struct strbuf * gpg_output , struct strbuf * gpg_status)', 199, 240)], '/home/kevin/thesis/git/gpg-interface.h': [], '/home/kevin/thesis/git/graph.c': [('graph_show_line_prefix( const struct diff_options * diffopt)', 70, 79), ('parse_graph_colors_config( struct argv_array * colors , const char * string)', 84, 102), ('graph_set_column_colors( const char ** colors , unsigned short colors_max)', 104, 108), ('column_get_color_code( unsigned short color)', 110, 113), ('strbuf_write_column( struct strbuf * sb , const struct column * c , char col_char)', 115, 123), ('diff_output_prefix_callback( struct diff_options * opt , void * data)', 231, 245), ('graph_setup_line_prefix( struct diff_options * diffopt)', 249, 256), ('graph_init( struct rev_info * opt)', 259, 316), ('graph_update_state( struct git_graph * graph , enum graph_state s)', 318, 322), ('graph_ensure_capacity( struct git_graph * graph , int num_columns)', 324, 337), ('graph_is_interesting( struct git_graph * graph , struct commit * commit)', 343, 360), ('next_interesting_parent( struct git_graph * graph , struct commit_list * orig)', 362, 383), ('first_interesting_parent( struct git_graph * graph)', 385, 406), ('graph_get_current_column_color( const struct git_graph * graph)', 408, 413), ('graph_increment_column_color( struct git_graph * graph)', 418, 422), ('graph_find_commit_color( const struct git_graph * graph , const struct commit * commit)', 424, 433), ('graph_insert_into_new_columns( struct git_graph * graph , struct commit * commit , int * mapping_index)', 435, 461), ('graph_update_width( struct git_graph * graph , int is_commit_in_existing_columns)', 463, 496), ('graph_update_columns( struct git_graph * graph)', 498, 603), ('graph_update( struct git_graph * graph , struct commit * commit)', 605, 665), ('graph_is_mapping_correct( struct git_graph * graph)', 667, 687), ('graph_pad_horizontally( struct git_graph * graph , struct strbuf * sb , int chars_written)', 689, 701), ('graph_output_padding_line( struct git_graph * graph , struct strbuf * sb)', 703, 727), ('graph_width( struct git_graph * graph)', 730, 733), ('graph_output_skip_line( struct git_graph * graph , struct strbuf * sb)', 736, 750), ('graph_output_pre_commit_line( struct git_graph * graph , struct strbuf * sb)', 752, 824), ('graph_output_commit_char( struct git_graph * graph , struct strbuf * sb)', 826, 842), ('graph_draw_octopus_merge( struct git_graph * graph , struct strbuf * sb)', 847, 866), ('graph_output_commit_line( struct git_graph * graph , struct strbuf * sb)', 868, 943), ('find_new_column_by_commit( struct git_graph * graph , struct commit * commit)', 945, 954), ('graph_output_post_merge_line( struct git_graph * graph , struct strbuf * sb)', 956, 1022), ('graph_output_collapsing_line( struct git_graph * graph , struct strbuf * sb)', 1024, 1170), ('graph_next_line( struct git_graph * graph , struct strbuf * sb)', 1172, 1197), ('graph_padding_line( struct git_graph * graph , struct strbuf * sb)', 1199, 1238), ('graph_is_commit_finished( struct git_graph const * graph)', 1240, 1243), ('graph_show_commit( struct git_graph * graph)', 1245, 1277), ('graph_show_oneline( struct git_graph * graph)', 1279, 1291), ('graph_show_padding( struct git_graph * graph)', 1293, 1305), ('graph_show_remainder( struct git_graph * graph)', 1307, 1337), ('graph_show_strbuf( struct git_graph * graph , FILE * file , struct strbuf const * sb)', 1339, 1364), ('graph_show_commit_msg( struct git_graph * graph , FILE * file , struct strbuf const * sb)', 1366, 1402)], '/home/kevin/thesis/git/graph.h': [], '/home/kevin/thesis/git/grep.c': [('std_output( struct grep_opt * opt , const void * buf , size_t size)', 16, 19), ('color_set( char * dst , const char * color_bytes)', 21, 24), ('init_grep_defaults( void)', 31, 55), ('parse_pattern_type_arg( const char * opt , const char * arg)', 57, 70), ('grep_config( const char * var , const char * value , void * cb)', 76, 137), ('grep_init( struct grep_opt * opt , const char * prefix)', 144, 171), ('grep_set_pattern_type_option( enum grep_pattern_type pattern_type , struct grep_opt * opt)', 173, 222), ('grep_commit_pattern_type( enum grep_pattern_type pattern_type , struct grep_opt * opt)', 224, 237), ('create_grep_pat( const char * pat , size_t patlen , const char * origin , int no , enum grep_pat_token t , enum grep_header_field field)', 239, 252), ('do_append_grep_pat( struct grep_pat ** * tail , struct grep_pat * p)', 254, 289), ('append_header_grep_pattern( struct grep_opt * opt , enum grep_header_field field , const char * pat)', 291, 299), ('append_grep_pattern( struct grep_opt * opt , const char * pat , const char * origin , int no , enum grep_pat_token t)', 301, 305), ('append_grep_pat( struct grep_opt * opt , const char * pat , size_t patlen , const char * origin , int no , enum grep_pat_token t)', 307, 312), ('grep_opt_dup( const struct grep_opt * opt)', 314, 334), ('compile_regexp_failed( const struct grep_pat * p , const char * error)', 336, 349), ('is_fixed( const char * s , size_t len)', 351, 361), ('has_null( const char * s , size_t len)', 363, 373), ('compile_pcre1_regexp( struct grep_pat * p , const struct grep_opt * opt)', 376, 411), ('pcre1match( struct grep_pat * p , const char * line , const char * eol , regmatch_t * match , int eflags)', 413, 443), ('free_pcre1_regexp( struct grep_pat * p)', 445, 458), ('compile_pcre1_regexp( struct grep_pat * p , const struct grep_opt * opt)', 460, 463), ('pcre1match( struct grep_pat * p , const char * line , const char * eol , regmatch_t * match , int eflags)', 465, 469), ('free_pcre1_regexp( struct grep_pat * p)', 471, 473), ('compile_pcre2_pattern( struct grep_pat * p , const struct grep_opt * opt)', 477, 556), ('pcre2match( struct grep_pat * p , const char * line , const char * eol , regmatch_t * match , int eflags)', 558, 591), ('free_pcre2_pattern( struct grep_pat * p)', 593, 600), ('compile_pcre2_pattern( struct grep_pat * p , const struct grep_opt * opt)', 602, 610), ('pcre2match( struct grep_pat * p , const char * line , const char * eol , regmatch_t * match , int eflags)', 612, 616), ('free_pcre2_pattern( struct grep_pat * p)', 618, 620), ('compile_fixed_regexp( struct grep_pat * p , struct grep_opt * opt)', 623, 641), ('compile_regexp( struct grep_pat * p , struct grep_opt * opt)', 643, 705), ('compile_pattern_atom( struct grep_pat ** list)', 708, 735), ('compile_pattern_not( struct grep_pat ** list)', 737, 759), ('compile_pattern_and( struct grep_pat ** list)', 761, 782), ('compile_pattern_or( struct grep_pat ** list)', 784, 802), ('compile_pattern_expr( struct grep_pat ** list)', 804, 807), ('indent( int in)', 809, 813), ('dump_grep_pat( struct grep_pat * p)', 815, 845), ('dump_grep_expression_1( struct grep_expr * x , int in)', 847, 878), ('dump_grep_expression( struct grep_opt * opt)', 880, 888), ('grep_true_expr( void)', 890, 895), ('grep_or_expr( struct grep_expr * left , struct grep_expr * right)', 897, 904), ('prep_header_patterns( struct grep_opt * opt)', 906, 952), ('grep_splice_or( struct grep_expr * x , struct grep_expr * y)', 954, 968), ('compile_grep_patterns_real( struct grep_opt * opt)', 970, 1011), ('compile_grep_patterns( struct grep_opt * opt)', 1013, 1018), ('free_pattern_expr( struct grep_expr * x)', 1020, 1036), ('free_grep_patterns( struct grep_opt * opt)', 1038, 1067), ('end_of_line( char * cp , unsigned long * left)', 1069, 1078), ('word_char( char ch)', 1080, 1083), ('output_color( struct grep_opt * opt , const void * data , size_t size , const char * color)', 1085, 1094), ('output_sep( struct grep_opt * opt , char sign)', 1096, 1102), ('show_name( struct grep_opt * opt , const char * name)', 1104, 1108), ('fixmatch( struct grep_pat * p , char * line , char * eol , regmatch_t * match)', 1110, 1123), ('patmatch( struct grep_pat * p , char * line , char * eol , regmatch_t * match , int eflags)', 1125, 1141), ('strip_timestamp( char * bol , char ** eol_p)', 1143, 1157), ('match_one_pattern( struct grep_pat * p , char * bol , char * eol , enum grep_context ctx , regmatch_t * pmatch , int eflags)', 1168, 1249), ('match_expr_eval( struct grep_expr * x , char * bol , char * eol , enum grep_context ctx , int collect_hits)', 1251, 1290), ('match_expr( struct grep_opt * opt , char * bol , char * eol , enum grep_context ctx , int collect_hits)', 1292, 1297), ('match_line( struct grep_opt * opt , char * bol , char * eol , enum grep_context ctx , int collect_hits)', 1299, 1314), ('match_next_pattern( struct grep_pat * p , char * bol , char * eol , enum grep_context ctx , regmatch_t * pmatch , int eflags)', 1316, 1335), ('next_match( struct grep_opt * opt , char * bol , char * eol , enum grep_context ctx , regmatch_t * pmatch , int eflags)', 1337, 1359), ('show_line( struct grep_opt * opt , char * bol , char * eol , const char * name , unsigned lno , char sign)', 1361, 1429), ('grep_attr_lock( void)', 1440, 1444), ('grep_attr_unlock( void)', 1446, 1450), ('match_funcname( struct grep_opt * opt , struct grep_source * gs , char * bol , char * eol)', 1462, 1486), ('show_funcname_line( struct grep_opt * opt , struct grep_source * gs , char * bol , unsigned lno)', 1488, 1506), ('show_pre_context( struct grep_opt * opt , struct grep_source * gs , char * bol , char * end , unsigned lno)', 1510, 1571), ('should_lookahead( struct grep_opt * opt)', 1573, 1586), ('look_ahead( struct grep_opt * opt , unsigned long * left_p , unsigned * lno_p , char ** bol_p)', 1588, 1627), ('fill_textconv_grep( struct userdiff_driver * driver , struct grep_source * gs)', 1629, 1679), ('is_empty_line( const char * bol , const char * eol)', 1681, 1686), ('grep_source_1( struct grep_opt * opt , struct grep_source * gs , int collect_hits)', 1688, 1901), ('clr_hit_marker( struct grep_expr * x)', 1903, 1915), ('chk_hit_marker( struct grep_expr * x)', 1917, 1927), ('grep_source( struct grep_opt * opt , struct grep_source * gs)', 1929, 1948), ('grep_buffer( struct grep_opt * opt , char * buf , unsigned long size)', 1950, 1963), ('grep_source_init( struct grep_source * gs , enum grep_source_type type , const char * name , const char * path , const void * identifier)', 1965, 1987), ('grep_source_clear( struct grep_source * gs)', 1989, 1995), ('grep_source_clear_data( struct grep_source * gs)', 1997, 2009), ('grep_source_load_oid( struct grep_source * gs)', 2011, 2024), ('grep_source_load_file( struct grep_source * gs)', 2026, 2058), ('grep_source_load( struct grep_source * gs)', 2060, 2074), ('grep_source_load_driver( struct grep_source * gs)', 2076, 2087), ('grep_source_is_binary( struct grep_source * gs)', 2089, 2099)], '/home/kevin/thesis/git/grep.h': [('grep_read_lock( void)', 229, 233), ('grep_read_unlock( void)', 235, 239)], '/home/kevin/thesis/git/hash.h': [], '/home/kevin/thesis/git/hashmap.c': [('strhash( const char * str)', 10, 16), ('strihash( const char * str)', 18, 27), ('memhash( const void * buf , size_t len)', 29, 38), ('memihash( const void * buf , size_t len)', 40, 51), ('memihash_cont( unsigned int hash_seed , const void * buf , size_t len)', 57, 68), ('alloc_table( struct hashmap * map , unsigned int size)', 76, 92), ('entry_equals( const struct hashmap * map , const struct hashmap_entry * e1 , const struct hashmap_entry * e2 , const void * keydata)', 94, 101), ('bucket( const struct hashmap * map , const struct hashmap_entry * key)', 103, 107), ('hashmap_bucket( const struct hashmap * map , unsigned int hash)', 109, 112), ('rehash( struct hashmap * map , unsigned int newsize)', 114, 131), ('find_entry_ptr( const struct hashmap * map , const struct hashmap_entry * key , const void * keydata)', 133, 140), ('always_equal( const void * unused_cmp_data , const void * unused1 , const void * unused2 , const void * unused_keydata)', 142, 148), ('hashmap_init( struct hashmap * map , hashmap_cmp_fn equals_function , const void * cmpfn_data , size_t initial_size)', 150, 172), ('hashmap_free( struct hashmap * map , int free_entries)', 174, 187), ('hashmap_get( const struct hashmap * map , const void * key , const void * keydata)', 189, 192), ('hashmap_get_next( const struct hashmap * map , const void * entry)', 194, 201), ('hashmap_add( struct hashmap * map , void * entry)', 203, 217), ('hashmap_remove( struct hashmap * map , const void * key , const void * keydata)', 219, 239), ('hashmap_put( struct hashmap * map , void * entry)', 241, 246), ('hashmap_iter_init( struct hashmap * map , struct hashmap_iter * iter)', 248, 253), ('hashmap_iter_next( struct hashmap_iter * iter)', 255, 269), ('pool_entry_cmp( const void * unused_cmp_data , const struct pool_entry * e1 , const struct pool_entry * e2 , const unsigned char * keydata)', 277, 284), ('memintern( const void * data , size_t len)', 286, 307)], '/home/kevin/thesis/git/hashmap.h': [('sha1hash( const unsigned char * sha1)', 121, 130), ('hashmap_entry_init( void * entry , unsigned int hash)', 245, 250), ('hashmap_get_size( struct hashmap * map)', 255, 262), ('hashmap_get_from_hash( const struct hashmap * map , unsigned int hash , const void * keydata)', 302, 309), ('hashmap_iter_first( struct hashmap * map , struct hashmap_iter * iter)', 374, 379), ('hashmap_disable_item_counting( struct hashmap * map)', 391, 394), ('hashmap_enable_item_counting( struct hashmap * map)', 401, 415), ('strintern( const char * string)', 433, 436)], '/home/kevin/thesis/git/help.c': [('drop_prefix( const char * name , uint32_t category)', 42, 52), ('extract_cmds( struct cmdname_help ** p_cmds , uint32_t mask)', 54, 77), ('print_command_list( const struct cmdname_help * cmds , uint32_t mask , int longest)', 79, 91), ('cmd_name_cmp( const void * elem1 , const void * elem2)', 93, 99), ('print_cmd_by_category( const struct category_description * catdesc)', 101, 127), ('add_cmdname( struct cmdnames * cmds , const char * name , int len)', 129, 137), ('clean_cmdnames( struct cmdnames * cmds)', 139, 147), ('cmdname_compare( const void * a_ , const void * b_)', 149, 154), ('uniq( struct cmdnames * cmds)', 156, 171), ('exclude_cmds( struct cmdnames * cmds , struct cmdnames * excludes)', 173, 194), ('pretty_print_cmdnames( struct cmdnames * cmds , unsigned int colopts)', 196, 214), ('list_commands_in_dir( struct cmdnames * cmds , const char * path , const char * prefix)', 216, 252), ('load_command_list( const char * prefix , struct cmdnames * main_cmds , struct cmdnames * other_cmds)', 254, 286), ('list_commands( unsigned int colopts , struct cmdnames * main_cmds , struct cmdnames * other_cmds)', 288, 305), ('list_common_cmds_help( void)', 307, 311), ('list_all_main_cmds( struct string_list * list)', 313, 327), ('list_all_other_cmds( struct string_list * list)', 329, 343), ('list_cmds_by_category( struct string_list * list , const char * cat)', 345, 367), ('list_cmds_by_config( struct string_list * list)', 369, 400), ('list_common_guides_help( void)', 402, 410), ('list_all_cmds_help( void)', 412, 415), ('is_in_cmdlist( struct cmdnames * c , const char * s)', 417, 424), ('git_unknown_cmd_config( const char * var , const char * value , void * cb)', 429, 440), ('levenshtein_compare( const void * p1 , const void * p2)', 442, 449), ('add_cmd_list( struct cmdnames * cmds , struct cmdnames * old)', 451, 460), ('help_unknown_cmd( const char * cmd)', 470, 579), ('cmd_version( int argc , const char ** argv , const char * prefix)', 581, 615), ('append_similar_ref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 622, 634), ('guess_refs( const char * ref)', 636, 645), ('help_unknown_ref( const char * ref , const char * cmd , const char * error)', 647, 665)], '/home/kevin/thesis/git/help.h': [('mput_char( char c , unsigned int num)', 15, 19)], '/home/kevin/thesis/git/hex.c': [('hex_to_bytes( unsigned char * binary , const char * hex , size_t len)', 38, 48), ('get_sha1_hex( const char * hex , unsigned char * sha1)', 50, 61), ('get_oid_hex( const char * hex , struct object_id * oid)', 63, 66), ('parse_oid_hex( const char * hex , struct object_id * oid , const char ** end)', 68, 74), ('sha1_to_hex_r( char * buffer , const unsigned char * sha1)', 76, 90), ('oid_to_hex_r( char * buffer , const struct object_id * oid)', 92, 95), ('sha1_to_hex( const unsigned char * sha1)', 97, 103), ('oid_to_hex( const struct object_id * oid)', 105, 108)], '/home/kevin/thesis/git/http-backend.c': [('get_parameters( void)', 37, 57), ('get_parameter( const char * name)', 59, 64), ('format_write( int fd , const char * fmt , ...)', 67, 81), ('http_status( struct strbuf * hdr , unsigned code , const char * msg)', 83, 86), ('hdr_str( struct strbuf * hdr , const char * name , const char * value)', 88, 91), ('hdr_int( struct strbuf * hdr , const char * name , uintmax_t value)', 93, 96), ('hdr_date( struct strbuf * hdr , const char * name , timestamp_t when)', 98, 102), ('hdr_nocache( struct strbuf * hdr)', 104, 109), ('hdr_cache_forever( struct strbuf * hdr)', 111, 117), ('end_headers( struct strbuf * hdr)', 119, 124), ('not_found( struct strbuf * hdr , const char * err , ...)', 127, 140), ('forbidden( struct strbuf * hdr , const char * err , ...)', 143, 156), ('select_getanyfile( struct strbuf * hdr)', 158, 162), ('send_strbuf( struct strbuf * hdr , const char * type , struct strbuf * buf)', 164, 171), ('send_local_file( struct strbuf * hdr , const char * the_type , const char * name)', 173, 204), ('get_text_file( struct strbuf * hdr , char * name)', 206, 211), ('get_loose_object( struct strbuf * hdr , char * name)', 213, 218), ('get_pack_file( struct strbuf * hdr , char * name)', 220, 225), ('get_idx_file( struct strbuf * hdr , char * name)', 227, 232), ('http_config( void)', 234, 251), ('select_service( struct strbuf * hdr , const char * name)', 253, 280), ('read_request( int fd , unsigned char ** out)', 287, 322), ('inflate_request( const char * prog_name , int out , int buffer_input)', 324, 377), ('copy_request( const char * prog_name , int out)', 379, 389), ('run_service( const char ** argv , int buffer_input)', 391, 432), ('show_text_ref( const char * name , const struct object_id * oid , int flag , void * cb_data)', 434, 452), ('get_info_refs( struct strbuf * hdr , char * arg)', 454, 487), ('show_head_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 489, 506), ('get_head( struct strbuf * hdr , char * arg)', 508, 516), ('get_info_packs( struct strbuf * hdr , char * arg)', 518, 541), ('check_content_type( struct strbuf * hdr , const char * accepted_type)', 543, 560), ('service_rpc( struct strbuf * hdr , char * service_name)', 562, 583), ('die_webcgi( const char * err , va_list params)', 586, 598), ('die_webcgi_recursing( void)', 600, 603), ('getdir( void)', 605, 627), ('bad_request( struct strbuf * hdr , const struct service_cmd * c)', 647, 660), ('cmd_main( int argc , const char ** argv)', 662, 718)], '/home/kevin/thesis/git/http-fetch.c': [('cmd_main( int argc , const char ** argv)', 10, 80)], '/home/kevin/thesis/git/http-push.c': [('xml_entities( const char * s)', 178, 183), ('curl_setup_http_get( CURL * curl , const char * url , const char * custom_req)', 185, 192), ('curl_setup_http( CURL * curl , const char * url , const char * custom_req , struct buffer * buffer , curl_write_callback write_fn)', 194, 211), ('get_dav_token_headers( struct remote_lock * lock , enum dav_header_flag options)', 213, 236), ('process_response( void * callback_data)', 241, 247), ('start_fetch_loose( struct transfer_request * request)', 251, 276), ('start_mkcol( struct transfer_request * request)', 278, 298), ('start_fetch_packed( struct transfer_request * request)', 301, 350), ('start_put( struct transfer_request * request)', 352, 415), ('start_move( struct transfer_request * request)', 417, 437), ('refresh_lock( struct remote_lock * lock)', 439, 470), ('check_locks( void)', 472, 492), ('release_request( struct transfer_request * request)', 494, 509), ('finish_request( struct transfer_request * request)', 511, 599), ('fill_active_slot( void * unused)', 603, 624), ('add_fetch_request( struct object * obj)', 629, 658), ('add_send_request( struct object * obj , struct remote_lock * lock)', 660, 698), ('fetch_indices( void)', 700, 717), ('one_remote_object( const struct object_id * oid)', 719, 734), ('handle_lockprop_ctx( struct xml_ctx * ctx , int tag_closed)', 736, 753), ('handle_new_lock_ctx( struct xml_ctx * ctx , int tag_closed)', 755, 779), ('xml_start_tag( void * userData , const char * name , const char ** atts)', 784, 807), ('xml_end_tag( void * userData , const char * name)', 810, 825), ('xml_cdata( void * userData , const XML_Char * s , int len)', 828, 833), ('lock_remote( const char * path , long timeout)', 835, 945), ('unlock_remote( struct remote_lock * lock)', 947, 990), ('remove_locks( void)', 992, 1002), ('remove_locks_on_signal( int signo)', 1004, 1009), ('get_oid_hex_from_objpath( const char * path , struct object_id * oid)', 1016, 1027), ('process_ls_object( struct remote_ls_ctx * ls)', 1029, 1045), ('process_ls_ref( struct remote_ls_ctx * ls)', 1047, 1056), ('handle_remote_ls_ctx( struct xml_ctx * ctx , int tag_closed)', 1058, 1109), ('remote_ls( const char * path , int flags , void(*userFunc)(structremote_ls_ctx*ls) , void * userData)', 1117, 1183), ('get_remote_object_list( unsigned char parent)', 1185, 1196), ('locking_available( void)', 1198, 1265), ('add_one_object( struct object * obj , struct object_list ** p)', 1267, 1274), ('process_blob( struct blob * blob , struct object_list ** p)', 1276, 1288), ('process_tree( struct tree * tree , struct object_list ** p)', 1290, 1324), ('get_delta( struct rev_info * revs , struct remote_lock * lock)', 1326, 1370), ('update_remote( unsigned char * sha1 , struct remote_lock * lock)', 1372, 1406), ('one_remote_ref( const char * refname)', 1410, 1438), ('get_dav_remote_heads( void)', 1440, 1443), ('add_remote_info_ref( struct remote_ls_ctx * ls)', 1445, 1482), ('update_remote_info_refs( struct remote_lock * lock)', 1484, 1512), ('remote_exists( const char * path)', 1514, 1535), ('fetch_symref( const char * path , char ** symref , struct object_id * oid)', 1537, 1565), ('verify_merge_base( struct object_id * head_oid , struct ref * remote)', 1567, 1574), ('delete_remote_branch( const char * pattern , int force)', 1576, 1670), ('run_request_queue( void)', 1672, 1689), ('cmd_main( int argc , const char ** argv)', 1691, 1984)], '/home/kevin/thesis/git/http-walker.c': [('start_object_request( struct walker * walker , struct object_request * obj_req)', 55, 79), ('finish_object_request( struct object_request * obj_req)', 81, 88), ('process_object_response( void * callback_data)', 90, 114), ('release_object_request( struct object_request * obj_req)', 116, 123), ('fill_active_slot( struct walker * walker)', 126, 143), ('prefetch( struct walker * walker , unsigned char * sha1)', 146, 165), ('is_alternate_allowed( const char * url)', 167, 196), ('process_alternates_response( void * callback_data)', 198, 337), ('fetch_alternates( struct walker * walker , const char * base)', 339, 396), ('fetch_indices( struct walker * walker , struct alt_base * repo)', 398, 420), ('http_fetch_pack( struct walker * walker , struct alt_base * repo , unsigned char * sha1)', 422, 469), ('abort_object_request( struct object_request * obj_req)', 471, 474), ('fetch_object( struct walker * walker , unsigned char * sha1)', 476, 558), ('fetch( struct walker * walker , unsigned char * sha1)', 560, 575), ('fetch_ref( struct walker * walker , struct ref * ref)', 577, 581), ('cleanup( struct walker * walker)', 583, 601), ('get_http_walker( const char * url)', 603, 631)], '/home/kevin/thesis/git/http.c': [('fread_buffer( char * ptr , size_t eltsize , size_t nmemb , void * buffer_)', 158, 169), ('ioctl_buffer( CURL * handle , int cmd , void * clientp)', 172, 187), ('fwrite_buffer( char * ptr , size_t eltsize , size_t nmemb , void * buffer_)', 190, 197), ('fwrite_null( char * ptr , size_t eltsize , size_t nmemb , void * strbuf)', 199, 202), ('closedown_active_slot( struct active_request_slot * slot)', 204, 208), ('finish_active_slot( struct active_request_slot * slot)', 210, 236), ('xmulti_remove_handle( struct active_request_slot * slot)', 238, 243), ('process_curl_messages( void)', 246, 272), ('http_options( const char * var , const char * value , void * cb)', 275, 408), ('curl_empty_auth_enabled( void)', 410, 435), ('init_curl_http_auth( CURL * result)', 437, 465), ('var_override( const char ** var , char * value)', 468, 474), ('set_proxyauth_name_password( CURL * result)', 476, 492), ('init_curl_proxy_auth( CURL * result)', 494, 523), ('has_cert_password( void)', 525, 536), ('set_curl_keepalive( CURL * c)', 539, 542), ('sockopt_callback( void * client , curl_socket_t fd , curlsocktype type)', 545, 559), ('set_curl_keepalive( CURL * c)', 561, 564), ('set_curl_keepalive( CURL * c)', 567, 570), ('redact_sensitive_header( struct strbuf * header)', 573, 636), ('curl_dump_header( const char * text , unsigned char * ptr , size_t size , int hide_sensitive_header)', 638, 661), ('curl_dump_data( const char * text , unsigned char * ptr , size_t size)', 663, 689), ('curl_trace( CURL * handle , curl_infotype type , char * data , size_t size , void * userp)', 691, 737), ('setup_curl_trace( CURL * handle)', 739, 746), ('get_curl_allowed_protocols( int from_user)', 749, 763), ('get_curl_handle( void)', 766, 970), ('set_from_env( const char ** var , const char * envname)', 972, 977), ('http_init( struct remote * remote , const char * url , int proactive_auth)', 979, 1070), ('http_cleanup( void)', 1072, 1128), ('get_active_slot( void)', 1130, 1215), ('start_active_slot( struct active_request_slot * slot)', 1217, 1239), ('add_fill_function( void * data , int(*fill)(void*))', 1250, 1260), ('fill_active_slots( void)', 1262, 1285), ('step_active_slots( void)', 1287, 1299), ('run_active_slot( struct active_request_slot * slot)', 1302, 1361), ('release_active_slot( struct active_request_slot * slot)', 1363, 1377), ('finish_all_active_slots( void)', 1379, 1390), ('needs_quote( int ch)', 1393, 1403), ('quote_ref_url( const char * base , const char * ref)', 1405, 1420), ('append_remote_object_url( struct strbuf * buf , const char * url , const char * hex , int only_two_digit_prefix)', 1422, 1431), ('get_remote_object_url( const char * url , const char * hex , int only_two_digit_prefix)', 1433, 1439), ('handle_curl_result( struct slot_results * results)', 1441, 1497), ('run_one_slot( struct active_request_slot * slot , struct slot_results * results)', 1499, 1511), ('http_copy_default_headers( void)', 1513, 1521), ('curlinfo_strbuf( CURL * curl , CURLINFO info , struct strbuf * buf)', 1523, 1533), ('extract_param( const char * raw , const char * name , struct strbuf * out)', 1543, 1559), ('extract_content_type( struct strbuf * raw , struct strbuf * type , struct strbuf * charset)', 1578, 1610), ('write_accept_language( struct strbuf * buf)', 1612, 1698), ('get_accept_language( void)', 1711, 1721), ('http_opt_request_remainder( CURL * curl , off_t pos)', 1723, 1728), ('http_request( const char * url , void * result , int target , const struct http_get_options * options)', 1734, 1811), ('update_url_from_redirect( struct strbuf * base , const char * asked , const struct strbuf * got)', 1838, 1863), ('http_request_reauth( const char * url , void * result , int target , struct http_get_options * options)', 1865, 1904), ('http_get_strbuf( const char * url , struct strbuf * result , struct http_get_options * options)', 1906, 1911), ('http_get_file( const char * url , const char * filename , struct http_get_options * options)', 1919, 1942), ('http_fetch_ref( const char * base , struct ref * ref)', 1944, 1967), ('fetch_pack_index( unsigned char * sha1 , const char * base_url)', 1970, 1992), ('fetch_and_setup_pack_index( struct packed_git ** packs_head , unsigned char * sha1 , const char * base_url)', 1994, 2033), ('http_get_info_packs( const char * base_url , struct packed_git ** packs_head)', 2035, 2077), ('release_http_pack_request( struct http_pack_request * preq)', 2079, 2089), ('finish_http_pack_request( struct http_pack_request * preq)', 2091, 2138), ('new_http_pack_request( struct packed_git * target , const char * base_url)', 2140, 2191), ('fwrite_sha1_file( char * ptr , size_t eltsize , size_t nmemb , void * data)', 2194, 2231), ('new_http_object_request( const char * base_url , unsigned char * sha1)', 2233, 2361), ('process_http_object_request( struct http_object_request * freq)', 2363, 2370), ('finish_http_object_request( struct http_object_request * freq)', 2372, 2406), ('abort_http_object_request( struct http_object_request * freq)', 2408, 2413), ('release_http_object_request( struct http_object_request * freq)', 2415, 2431)], '/home/kevin/thesis/git/http.h': [('missing__target( int code , int result)', 126, 135)], '/home/kevin/thesis/git/ident.c': [('xgetpwuid_self( int * is_bogus)', 32, 49), ('copy_gecos( const struct passwd * w , struct strbuf * name)', 51, 69), ('add_mailname_host( struct strbuf * buf)', 71, 92), ('canonical_name( const char * host , struct strbuf * out)', 94, 118), ('add_domainname( struct strbuf * out , int * is_bogus)', 120, 136), ('copy_email( const struct passwd * pw , struct strbuf * email , int * is_bogus)', 138, 151), ('ident_default_name( void)', 153, 160), ('ident_default_email( void)', 162, 177), ('ident_default_date( void)', 179, 184), ('reset_ident_date( void)', 186, 189), ('crud( unsigned char c)', 191, 203), ('has_non_crud( const char * str)', 205, 212), ('strbuf_addstr_without_crud( struct strbuf * sb , const char * src)', 218, 255), ('split_ident_line( struct ident_split * split , const char * line , int len)', 264, 339), ('fmt_ident( const char * name , const char * email , const char * date_str , int flag)', 354, 423), ('fmt_name( const char * name , const char * email)', 425, 428), ('git_author_info( int flag)', 430, 440), ('git_committer_info( int flag)', 442, 452), ('ident_is_sufficient( int user_ident_explicitly_given)', 454, 461), ('committer_ident_sufficiently_given( void)', 463, 466), ('author_ident_sufficiently_given( void)', 468, 471), ('git_ident_config( const char * var , const char * value , void * data)', 473, 503), ('buf_cmp( const char * a_begin , const char * a_end , const char * b_begin , const char * b_end)', 505, 518), ('ident_cmp( const struct ident_split * a , const struct ident_split * b)', 520, 532)], '/home/kevin/thesis/git/imap-send.c': [('nfvasprintf( char ** strp , const char * fmt , va_list ap)', 72, 84), ('ssl_socket_perror( const char * func)', 189, 192), ('socket_perror( const char * func , struct imap_socket * sock , int ret)', 195, 218), ('ssl_socket_connect( struct imap_socket * sock , int use_tls_only , int verify)', 221, 225), ('host_matches( const char * host , const char * pattern)', 229, 239), ('verify_hostname( X509 * cert , const char * hostname)', 241, 274), ('ssl_socket_connect( struct imap_socket * sock , int use_tls_only , int verify)', 276, 353), ('socket_read( struct imap_socket * sock , char * buf , int len)', 356, 372), ('socket_write( struct imap_socket * sock , const char * buf , int len)', 374, 390), ('socket_shutdown( struct imap_socket * sock)', 392, 402), ('buffer_gets( struct imap_buffer * b , char ** s)', 405, 452), ('imap_info( const char * msg , ...)', 454, 464), ('imap_warn( const char * msg , ...)', 466, 475), ('next_arg( char ** s)', 477, 505), ('nfsnprintf( char * buf , int blen , const char * fmt , ...)', 507, 517), ('issue_imap_cmd( struct imap_store * ctx , struct imap_cmd_cb * cb , const char * fmt , va_list ap)', 519, 582), ('imap_exec( struct imap_store * ctx , struct imap_cmd_cb * cb , const char * fmt , ...)', 585, 598), ('imap_exec_m( struct imap_store * ctx , struct imap_cmd_cb * cb , const char * fmt , ...)', 601, 618), ('skip_imap_list_l( char ** sp , int level)', 620, 660), ('skip_list( char ** sp)', 662, 665), ('parse_capability( struct imap * imap , char * cmd)', 667, 678), ('parse_response_code( struct imap_store * ctx , struct imap_cmd_cb * cb , char * s)', 680, 725), ('get_cmd_result( struct imap_store * ctx , struct imap_cmd * tcmd)', 727, 844), ('imap_close_server( struct imap_store * ictx)', 846, 855), ('imap_close_store( struct imap_store * ctx)', 857, 861), ('hexchar( unsigned int b)', 869, 872), ('cram( const char * challenge_64 , const char * user , const char * pass)', 875, 911), ('cram( const char * challenge_64 , const char * user , const char * pass)', 915, 919), ('auth_cram_md5( struct imap_store * ctx , struct imap_cmd * cmd , const char * prompt)', 923, 937), ('server_fill_credential( struct imap_server_conf * srvc , struct credential * cred)', 939, 956), ('imap_open_store( struct imap_server_conf * srvc , char * folder)', 958, 1184), ('lf_to_crlf( struct strbuf * msg)', 1190, 1216), ('imap_store_msg( struct imap_store * ctx , struct strbuf * msg)', 1222, 1243), ('wrap_in_html( struct strbuf * msg)', 1245, 1267), ('read_message( FILE * f , struct strbuf * all_msgs)', 1271, 1279), ('count_messages( struct strbuf * all_msgs)', 1281, 1303), ('split_msg( struct strbuf * all_msgs , struct strbuf * msg , int * ofs)', 1310, 1339), ('git_imap_config( void)', 1341, 1370), ('append_msgs_to_imap( struct imap_server_conf * server , struct strbuf * all_msgs , int total)', 1372, 1408), ('setup_curl( struct imap_server_conf * srvc , struct credential * cred)', 1411, 1471), ('curl_append_msgs_to_imap( struct imap_server_conf * server , struct strbuf * all_msgs , int total)', 1473, 1531), ('cmd_main( int argc , const char ** argv)', 1534, 1603)], '/home/kevin/thesis/git/iterator.h': [], '/home/kevin/thesis/git/khash.h': [('__ac_X31_hash_string( const char * s)', 49, 54)], '/home/kevin/thesis/git/kwset.c': [('kwsalloc( unsigned char const * trans)', 87, 115), ('kwsincr( kwset_t kws , char const * text , size_t len)', 124, 279), ('enqueue( struct tree * tree , struct trie ** last)', 284, 291), ('treefails( register struct tree const * tree , struct trie const * fail , struct trie * recourse)', 297, 327), ('treedelta( register struct tree const * tree , register unsigned int depth , unsigned char delta [ ])', 332, 342), ('hasevery( register struct tree const * a , register struct tree const * b)', 346, 360), ('treenext( struct tree const * tree , struct trie * next [ ])', 365, 372), ('kwsprep( kwset_t kws)', 377, 489), ('bmexec( kwset_t kws , char const * text , size_t size)', 493, 575), ('cwexec( kwset_t kws , char const * text , size_t len , struct kwsmatch * kwsmatch)', 579, 731), ('kwsexec( kwset_t kws , char const * text , size_t size , struct kwsmatch * kwsmatch)', 741, 758), ('kwsfree( kwset_t kws)', 762, 769)], '/home/kevin/thesis/git/kwset.h': [], '/home/kevin/thesis/git/levenshtein.c': [('levenshtein( const char * string1 , const char * string2 , int w , int s , int a , int d)', 41, 86)], '/home/kevin/thesis/git/levenshtein.h': [], '/home/kevin/thesis/git/line-log.c': [('range_set_grow( struct range_set * rs , size_t extra)', 19, 22), ('range_set_init( struct range_set * rs , size_t prealloc)', 27, 33), ('range_set_release( struct range_set * rs)', 35, 39), ('range_set_copy( struct range_set * dst , struct range_set * src)', 42, 47), ('range_set_move( struct range_set * dst , struct range_set * src)', 49, 57), ('range_set_append_unsafe( struct range_set * rs , long a , long b)', 60, 67), ('range_set_append( struct range_set * rs , long a , long b)', 69, 73), ('range_cmp( const void * _r , const void * _s)', 75, 86), ('range_set_check_invariants( struct range_set * rs)', 91, 105), ('sort_and_merge_range_set( struct range_set * rs)', 111, 134), ('range_set_union( struct range_set * out , struct range_set * a , struct range_set * b)', 144, 179), ('range_set_difference( struct range_set * out , struct range_set * a , struct range_set * b)', 186, 226), ('diff_ranges_init( struct diff_ranges * diff)', 228, 232), ('diff_ranges_release( struct diff_ranges * diff)', 234, 238), ('line_log_data_init( struct line_log_data * r)', 240, 244), ('line_log_data_clear( struct line_log_data * r)', 246, 251), ('free_line_log_data( struct line_log_data * r)', 253, 261), ('search_line_log_data( struct line_log_data * list , const char * path , struct line_log_data ** insertion_point)', 264, 279), ('line_log_data_insert( struct line_log_data ** list , char * path , long begin , long end)', 285, 308), ('collect_diff_cb( long start_a , long count_a , long start_b , long count_b , void * data)', 314, 326), ('collect_diff( mmfile_t * parent , mmfile_t * target , struct diff_ranges * out)', 328, 344), ('dump_range_set( struct range_set * rs , const char * desc)', 351, 357), ('dump_line_log_data( struct line_log_data * r)', 359, 367), ('dump_diff_ranges( struct diff_ranges * diff , const char * desc)', 369, 382), ('ranges_overlap( struct range * a , struct range * b)', 386, 389), ('diff_ranges_filter_touched( struct diff_ranges * out , struct diff_ranges * diff , struct range_set * rs)', 396, 419), ('range_set_shift_diff( struct range_set * out , struct range_set * rs , struct diff_ranges * diff)', 425, 443), ('range_set_map_across_diff( struct range_set * out , struct range_set * rs , struct diff_ranges * diff , struct diff_ranges ** touched_out)', 452, 470), ('check_single_commit( struct rev_info * revs)', 472, 497), ('fill_blob_sha1( struct commit * commit , struct diff_filespec * spec)', 499, 509), ('fill_line_ends( struct diff_filespec * spec , long * lines , unsigned long ** line_ends)', 511, 537), ('nth_line( void * data , long line)', 545, 555), ('parse_lines( struct commit * commit , const char * prefix , struct string_list * args)', 558, 618), ('line_log_data_copy_one( struct line_log_data * r)', 620, 631), ('line_log_data_copy( struct line_log_data * r)', 634, 650), ('line_log_data_merge( struct line_log_data * a , struct line_log_data * b)', 653, 693), ('add_line_range( struct rev_info * revs , struct commit * commit , struct line_log_data * range)', 695, 710), ('clear_commit_line_range( struct rev_info * revs , struct commit * commit)', 712, 720), ('lookup_line_range( struct rev_info * revs , struct commit * commit)', 722, 734), ('line_log_init( struct rev_info * rev , const char * prefix , struct string_list * args)', 736, 759), ('move_diff_queue( struct diff_queue_struct * dst , struct diff_queue_struct * src)', 761, 767), ('filter_diffs_for_paths( struct line_log_data * range , int keep_deletions)', 769, 797), ('diff_might_be_rename( void)', 799, 809), ('queue_diffs( struct line_log_data * range , struct diff_options * opt , struct diff_queue_struct * queue , struct commit * commit , struct commit * parent)', 811, 828), ('get_nth_line( long line , unsigned long * ends , void * data)', 830, 836), ('print_line( const char * prefix , char first , long line , unsigned long * ends , void * data , const char * color , const char * reset , FILE * file)', 838, 859), ('output_prefix( struct diff_options * opt)', 861, 871), ('dump_diff_hacky_one( struct rev_info * rev , struct line_log_data * range)', 873, 968), ('dump_diff_hacky( struct rev_info * rev , struct line_log_data * range)', 974, 981), ('process_diff_filepair( struct rev_info * rev , struct diff_filepair * pair , struct line_log_data * range , struct diff_ranges ** diff_out)', 987, 1040), ('diff_filepair_dup( struct diff_filepair * pair)', 1042, 1050), ('free_diffqueues( int n , struct diff_queue_struct * dq)', 1052, 1059), ('process_all_files( struct line_log_data ** range_out , struct rev_info * rev , struct diff_queue_struct * queue , struct line_log_data * range)', 1061, 1099), ('line_log_print( struct rev_info * rev , struct commit * commit)', 1101, 1108), ('process_ranges_ordinary_commit( struct rev_info * rev , struct commit * commit , struct line_log_data * range)', 1110, 1127), ('process_ranges_merge_commit( struct rev_info * rev , struct commit * commit , struct line_log_data * range)', 1129, 1189), ('process_ranges_arbitrary_commit( struct rev_info * rev , struct commit * commit)', 1191, 1207), ('line_log_rewrite_one( struct rev_info * rev , struct commit ** pp)', 1209, 1223), ('line_log_filter( struct rev_info * rev)', 1225, 1250)], '/home/kevin/thesis/git/line-log.h': [], '/home/kevin/thesis/git/line-range.c': [('parse_loc( const char * spec , nth_line_fn_t nth_line , void * data , long lines , long begin , long * ret)', 22, 116), ('match_funcname( xdemitconf_t * xecfg , const char * bol , const char * eol)', 118, 131), ('find_funcname_matching_regexp( xdemitconf_t * xecfg , const char * start , regex_t * regexp)', 133, 164), ('parse_range_funcname( const char * arg , nth_line_fn_t nth_line_cb , void * cb_data , long lines , long anchor , long * begin , long * end , const char * path)', 166, 243), ('parse_range_arg( const char * arg , nth_line_fn_t nth_line_cb , void * cb_data , long lines , long anchor , long * begin , long * end , const char * path)', 245, 276), ('skip_range_arg( const char * arg)', 278, 289)], '/home/kevin/thesis/git/line-range.h': [], '/home/kevin/thesis/git/list-objects-filter-options.c': [('gently_parse_list_objects_filter( struct list_objects_filter_options * filter_options , const char * arg , struct strbuf * errbuf)', 24, 80), ('parse_list_objects_filter( struct list_objects_filter_options * filter_options , const char * arg)', 82, 89), ('opt_parse_list_objects_filter( const struct option * opt , const char * arg , int unset)', 91, 102), ('list_objects_filter_release( struct list_objects_filter_options * filter_options)', 104, 111), ('partial_clone_register( const char * remote , const struct list_objects_filter_options * filter_options)', 113, 141), ('partial_clone_get_default_filter_spec( struct list_objects_filter_options * filter_options)', 143, 152)], '/home/kevin/thesis/git/list-objects-filter-options.h': [('list_objects_filter_set_no_filter( struct list_objects_filter_options * filter_options)', 66, 71)], '/home/kevin/thesis/git/list-objects-filter.c': [('filter_blobs_none( enum list_objects_filter_situation filter_situation , struct object * obj , const char * pathname , const char * filename , void * filter_data_)', 35, 66), ('filter_blobs_none__init( struct oidset * omitted , struct list_objects_filter_options * filter_options , filter_object_fn * filter_fn , filter_free_fn * filter_free_fn)', 68, 80), ('filter_blobs_limit( enum list_objects_filter_situation filter_situation , struct object * obj , const char * pathname , const char * filename , void * filter_data_)', 91, 143), ('filter_blobs_limit__init( struct oidset * omitted , struct list_objects_filter_options * filter_options , filter_object_fn * filter_fn , filter_free_fn * filter_free_fn)', 145, 158), ('filter_sparse( enum list_objects_filter_situation filter_situation , struct object * obj , const char * pathname , const char * filename , void * filter_data_)', 197, 311), ('filter_sparse_free( void * filter_data)', 314, 319), ('filter_sparse_oid__init( struct oidset * omitted , struct list_objects_filter_options * filter_options , filter_object_fn * filter_fn , filter_free_fn * filter_free_fn)', 321, 340), ('filter_sparse_path__init( struct oidset * omitted , struct list_objects_filter_options * filter_options , filter_object_fn * filter_fn , filter_free_fn * filter_free_fn)', 342, 361), ('list_objects_filter__init( struct oidset * omitted , struct list_objects_filter_options * filter_options , filter_object_fn * filter_fn , filter_free_fn * filter_free_fn)', 380, 401)], '/home/kevin/thesis/git/list-objects-filter.h': [], '/home/kevin/thesis/git/list-objects.c': [('process_blob( struct rev_info * revs , struct blob * blob , show_object_fn show , struct strbuf * path , const char * name , void * cb_data , filter_object_fn filter_fn , void * filter_data)', 14, 59), ('process_gitlink( struct rev_info * revs , const unsigned char * sha1 , show_object_fn show , struct strbuf * path , const char * name , void * cb_data)', 83, 91), ('process_tree( struct rev_info * revs , struct tree * tree , show_object_fn show , struct strbuf * base , const char * name , void * cb_data , filter_object_fn filter_fn , void * filter_data)', 93, 186), ('mark_edge_parents_uninteresting( struct commit * commit , struct rev_info * revs , show_edge_fn show_edge)', 188, 204), ('mark_edges_uninteresting( struct rev_info * revs , show_edge_fn show_edge)', 206, 237), ('add_pending_tree( struct rev_info * revs , struct tree * tree)', 239, 242), ('traverse_trees_and_blobs( struct rev_info * revs , struct strbuf * base , show_object_fn show_object , void * show_data , filter_object_fn filter_fn , void * filter_data)', 244, 285), ('do_traverse( struct rev_info * revs , show_commit_fn show_commit , show_object_fn show_object , void * show_data , filter_object_fn filter_fn , void * filter_data)', 287, 321), ('traverse_commit_list( struct rev_info * revs , show_commit_fn show_commit , show_object_fn show_object , void * show_data)', 323, 329), ('traverse_commit_list_filtered( struct list_objects_filter_options * filter_options , struct rev_info * revs , show_commit_fn show_commit , show_object_fn show_object , void * show_data , struct oidset * omitted)', 331, 349)], '/home/kevin/thesis/git/list-objects.h': [], '/home/kevin/thesis/git/list.h': [('list_add( struct list_head * newp , struct list_head * head)', 52, 58), ('list_add_tail( struct list_head * newp , struct list_head * head)', 61, 67), ('__list_del( struct list_head * prev , struct list_head * next)', 70, 74), ('list_del( struct list_head * elem)', 77, 80), ('list_del_init( struct list_head * elem)', 83, 87), ('list_move( struct list_head * elem , struct list_head * head)', 90, 94), ('list_replace( struct list_head * old , struct list_head * newp)', 97, 103), ('list_splice( struct list_head * add , struct list_head * head)', 106, 115), ('list_empty( struct list_head * head)', 151, 154), ('list_replace_init( struct list_head * old , struct list_head * newp)', 156, 164), ('__volatile_list_del( volatile struct volatile_list_head * prev , volatile struct volatile_list_head * next)', 178, 183), ('volatile_list_del( volatile struct volatile_list_head * elem)', 185, 188), ('volatile_list_empty( volatile struct volatile_list_head * head)', 190, 193), ('volatile_list_add( volatile struct volatile_list_head * newp , volatile struct volatile_list_head * head)', 195, 202)], '/home/kevin/thesis/git/ll-merge.c': [('ll_binary_merge( const struct ll_merge_driver * drv_unused , mmbuffer_t * result , const char * path , mmfile_t * orig , const char * orig_name , mmfile_t * src1 , const char * name1 , mmfile_t * src2 , const char * name2 , const struct ll_merge_options * opts , int marker_size)', 38, 81), ('ll_xdl_merge( const struct ll_merge_driver * drv_unused , mmbuffer_t * result , const char * path , mmfile_t * orig , const char * orig_name , mmfile_t * src1 , const char * name1 , mmfile_t * src2 , const char * name2 , const struct ll_merge_options * opts , int marker_size)', 83, 121), ('ll_union_merge( const struct ll_merge_driver * drv_unused , mmbuffer_t * result , const char * path_unused , mmfile_t * orig , const char * orig_name , mmfile_t * src1 , const char * name1 , mmfile_t * src2 , const char * name2 , const struct ll_merge_options * opts , int marker_size)', 123, 140), ('create_temp( mmfile_t * src , char * path , size_t len)', 151, 160), ('ll_ext_merge( const struct ll_merge_driver * fn , mmbuffer_t * result , const char * path , mmfile_t * orig , const char * orig_name , mmfile_t * src1 , const char * name1 , mmfile_t * src2 , const char * name2 , const struct ll_merge_options * opts , int marker_size)', 165, 224), ('read_merge_config( const char * var , const char * value , void * cb)', 232, 296), ('initialize_ll_merge( void)', 298, 304), ('find_ll_merge_driver( const char * merge_attr)', 306, 337), ('normalize_file( mmfile_t * mm , const char * path)', 339, 347), ('ll_merge( mmbuffer_t * result_buf , const char * path , mmfile_t * ancestor , const char * ancestor_label , mmfile_t * ours , const char * our_label , mmfile_t * theirs , const char * their_label , const struct ll_merge_options * opts)', 349, 392), ('ll_merge_marker_size( const char * path)', 394, 407)], '/home/kevin/thesis/git/ll-merge.h': [], '/home/kevin/thesis/git/lockfile.c': [('trim_last_path_component( struct strbuf * path)', 15, 31), ('resolve_symlink( struct strbuf * path)', 48, 70), ('lock_file( struct lock_file * lk , const char * path , int flags)', 73, 85), ('lock_file_timeout( struct lock_file * lk , const char * path , int flags , long timeout_ms)', 101, 146), ('unable_to_lock_message( const char * path , int err , struct strbuf * buf)', 148, 161), ('unable_to_lock_die( const char * path , int err)', 163, 169), ('hold_lock_file_for_update_timeout( struct lock_file * lk , const char * path , int flags , long timeout_ms)', 172, 187), ('get_locked_file_path( struct lock_file * lk)', 189, 200), ('commit_lock_file( struct lock_file * lk)', 202, 214)], '/home/kevin/thesis/git/lockfile.h': [('hold_lock_file_for_update( struct lock_file * lk , const char * path , int flags)', 171, 176), ('is_lock_file_locked( struct lock_file * lk)', 181, 184), ('fdopen_lock_file( struct lock_file * lk , const char * mode)', 209, 212), ('get_lock_file_path( struct lock_file * lk)', 218, 221), ('get_lock_file_fd( struct lock_file * lk)', 223, 226), ('get_lock_file_fp( struct lock_file * lk)', 228, 231), ('close_lock_file_gently( struct lock_file * lk)', 247, 250), ('reopen_lock_file( struct lock_file * lk)', 271, 274), ('commit_lock_file_to( struct lock_file * lk , const char * path)', 291, 294), ('rollback_lock_file( struct lock_file * lk)', 302, 305)], '/home/kevin/thesis/git/log-tree.c': [('decorate_get_color( int decorate_use_color , enum decoration_type ix)', 30, 35), ('parse_decorate_color_slot( const char * slot)', 37, 60), ('parse_decorate_color_config( const char * var , const char * slot_name , const char * value)', 62, 70), ('add_name_decoration( enum decoration_type type , const char * name , struct object * obj)', 79, 85), ('get_name_decoration( const struct object * obj)', 87, 90), ('add_ref_decoration( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 92, 144), ('add_graft_decoration( const struct commit_graft * graft , void * cb_data)', 146, 153), ('load_ref_decorations( struct decoration_filter * filter , int flags)', 155, 173), ('show_parents( struct commit * commit , int abbrev , FILE * file)', 175, 182), ('show_children( struct rev_info * opt , struct commit * commit , int abbrev)', 184, 190), ('current_pointed_by_HEAD( const struct name_decoration * decoration)', 196, 227), ('show_name( struct strbuf * sb , const struct name_decoration * decoration)', 229, 235), ('format_decorations_extended( struct strbuf * sb , const struct commit * commit , int use_color , const char * prefix , const char * separator , const char * suffix)', 241, 292), ('show_decorations( struct rev_info * opt , struct commit * commit)', 294, 305), ('digits_in_number( unsigned int number)', 307, 315), ('fmt_output_subject( struct strbuf * filename , const char * subject , struct rev_info * info)', 317, 333), ('fmt_output_commit( struct strbuf * filename , struct commit * commit , struct rev_info * info)', 335, 345), ('fmt_output_email_subject( struct strbuf * sb , struct rev_info * opt)', 347, 361), ('log_write_email_headers( struct rev_info * opt , struct commit * commit , const char ** extra_headers_p , int * need_8bit_cte_p , int maybe_multipart)', 363, 434), ('show_sig_lines( struct rev_info * opt , int status , const char * bol)', 436, 450), ('show_signature( struct rev_info * opt , struct commit * commit)', 452, 474), ('which_parent( const struct object_id * oid , const struct commit * commit)', 476, 487), ('is_common_merge( const struct commit * commit)', 489, 494), ('show_one_mergetag( struct commit * commit , struct commit_extra_header * extra , void * data)', 496, 545), ('show_mergetag( struct rev_info * opt , struct commit * commit)', 547, 550), ('show_log( struct rev_info * opt)', 552, 739), ('log_tree_diff_flush( struct rev_info * opt)', 741, 792), ('do_diff_combined( struct rev_info * opt , struct commit * commit)', 794, 798), ('log_tree_diff( struct rev_info * opt , struct commit * commit , struct log_info * log)', 805, 869), ('log_tree_commit( struct rev_info * opt , struct commit * commit)', 871, 899)], '/home/kevin/thesis/git/log-tree.h': [], '/home/kevin/thesis/git/ls-refs.c': [('ref_match( const struct argv_array * prefixes , const char * refname)', 13, 28), ('send_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 36, 70), ('ls_refs( struct repository * r , struct argv_array * keys , struct packet_reader * request)', 72, 96)], '/home/kevin/thesis/git/ls-refs.h': [], '/home/kevin/thesis/git/mailinfo.c': [('cleanup_space( struct strbuf * sb)', 7, 17), ('get_sane_name( struct strbuf * out , struct strbuf * name , struct strbuf * email)', 19, 29), ('parse_bogus_from( struct mailinfo * mi , const struct strbuf * line)', 31, 56), ('unquote_comment( struct strbuf * outbuf , const char * in)', 58, 86), ('unquote_quoted_string( struct strbuf * outbuf , const char * in)', 88, 110), ('unquote_quoted_pair( struct strbuf * line)', 112, 136), ('handle_from( struct mailinfo * mi , const struct strbuf * from)', 138, 201), ('handle_header( struct strbuf ** out , const struct strbuf * line)', 203, 212), ('slurp_attr( const char * line , const char * name , struct strbuf * attr)', 220, 238), ('handle_content_type( struct mailinfo * mi , struct strbuf * line)', 240, 262), ('handle_content_transfer_encoding( struct mailinfo * mi , const struct strbuf * line)', 264, 273), ('is_multipart_boundary( struct mailinfo * mi , const struct strbuf * line)', 275, 281), ('cleanup_subject( struct mailinfo * mi , struct strbuf * subject)', 283, 331), ('cmp_header( const struct strbuf * line , const char * hdr)', 338, 343), ('is_format_patch_separator( const char * line , int len)', 345, 359), ('decode_q_segment( const struct strbuf * q_seg , int rfc2047)', 361, 386), ('decode_b_segment( const struct strbuf * b_seg)', 388, 428), ('convert_to_utf8( struct mailinfo * mi , struct strbuf * line , const char * charset)', 430, 448), ('decode_header( struct mailinfo * mi , struct strbuf * it)', 450, 533), ('check_header( struct mailinfo * mi , const struct strbuf * line , struct strbuf * hdr_data [ ] , int overwrite)', 535, 588), ('is_inbody_header( const struct mailinfo * mi , const struct strbuf * line)', 595, 603), ('decode_transfer_encoding( struct mailinfo * mi , struct strbuf * line)', 605, 624), ('patchbreak( const struct strbuf * line)', 626, 660), ('is_scissors_line( const char * line)', 662, 712), ('flush_inbody_header_accum( struct mailinfo * mi)', 714, 721), ('check_inbody_header( struct mailinfo * mi , const struct strbuf * line)', 723, 758), ('handle_commit_msg( struct mailinfo * mi , struct strbuf * line)', 760, 815), ('handle_patch( struct mailinfo * mi , const struct strbuf * line)', 817, 821), ('handle_filter( struct mailinfo * mi , struct strbuf * line)', 823, 835), ('is_rfc2822_header( const struct strbuf * line)', 837, 863), ('read_one_header_line( struct strbuf * line , FILE * in)', 865, 906), ('find_boundary( struct mailinfo * mi , struct strbuf * line)', 908, 915), ('handle_boundary( struct mailinfo * mi , struct strbuf * line)', 917, 965), ('handle_body( struct mailinfo * mi , struct strbuf * line)', 967, 1036), ('output_header_lines( FILE * fout , const char * hdr , const struct strbuf * data)', 1038, 1053), ('handle_info( struct mailinfo * mi)', 1055, 1086), ('mailinfo( struct mailinfo * mi , const char * msg , const char * patch)', 1088, 1130), ('git_mailinfo_config( const char * var , const char * value , void * mi_)', 1132, 1144), ('setup_mailinfo( struct mailinfo * mi)', 1146, 1158), ('clear_mailinfo( struct mailinfo * mi)', 1160, 1185)], '/home/kevin/thesis/git/mailinfo.h': [], '/home/kevin/thesis/git/mailmap.c': [('debug_mm( const char * format , ...)', 10, 10), ('debug_str( const char * s)', 11, 11), ('free_mailmap_info( void * p , const char * s)', 31, 38), ('free_mailmap_entry( void * p , const char * s)', 40, 53), ('namemap_cmp( const char * a , const char * b)', 64, 67), ('add_mapping( struct string_list * map , char * new_name , char * new_email , char * old_name , char * old_email)', 69, 114), ('parse_name_and_email( char * buffer , char ** name , char ** email , int allow_empty_email)', 116, 143), ('read_mailmap_line( struct string_list * map , char * buffer , char ** repo_abbrev)', 145, 175), ('read_mailmap_file( struct string_list * map , const char * filename , char ** repo_abbrev)', 177, 197), ('read_mailmap_string( struct string_list * map , char * buf , char ** repo_abbrev)', 199, 211), ('read_mailmap_blob( struct string_list * map , const char * name , char ** repo_abbrev)', 213, 237), ('read_mailmap( struct string_list * map , char ** repo_abbrev)', 239, 254), ('clear_mailmap( struct string_list * map)', 256, 262), ('lookup_prefix( struct string_list * map , const char * string , size_t len)', 268, 313), ('map_user( struct string_list * map , const char ** email , size_t * emaillen , const char ** name , size_t * namelen)', 315, 362)], '/home/kevin/thesis/git/mailmap.h': [], '/home/kevin/thesis/git/match-trees.c': [('score_missing( unsigned mode , const char * path)', 5, 16), ('score_differs( unsigned mode1 , unsigned mode2 , const char * path)', 18, 29), ('score_matches( unsigned mode1 , unsigned mode2 , const char * path)', 31, 48), ('fill_tree_desc_strict( struct tree_desc * desc , const struct object_id * hash)', 50, 64), ('base_name_entries_compare( const struct name_entry * a , const struct name_entry * b)', 66, 71), ('score_trees( const struct object_id * hash1 , const struct object_id * hash2)', 76, 117), ('match_trees( const struct object_id * hash1 , const struct object_id * hash2 , int * best_score , char ** best_match , const char * base , int recurse_limit)', 122, 158), ('splice_tree( const struct object_id * oid1 , const char * prefix , const struct object_id * oid2 , struct object_id * result)', 164, 220), ('shift_tree( const struct object_id * hash1 , const struct object_id * hash2 , struct object_id * shifted , int depth_limit)', 230, 282), ('shift_tree_by( const struct object_id * hash1 , const struct object_id * hash2 , struct object_id * shifted , const char * shift_prefix)', 289, 342)], '/home/kevin/thesis/git/mem-pool.c': [('mem_pool_alloc_block( struct mem_pool * mem_pool , size_t block_alloc)', 8, 20), ('mem_pool_alloc( struct mem_pool * mem_pool , size_t len)', 22, 47), ('mem_pool_calloc( struct mem_pool * mem_pool , size_t count , size_t size)', 49, 55)], '/home/kevin/thesis/git/mem-pool.h': [], '/home/kevin/thesis/git/merge-blobs.c': [('fill_mmfile_blob( mmfile_t * f , struct blob * obj)', 8, 24), ('free_mmfile( mmfile_t * f)', 26, 29), ('three_way_filemerge( const char * path , mmfile_t * base , mmfile_t * our , mmfile_t * their , unsigned long * size)', 31, 49), ('merge_blobs( const char * path , struct blob * base , struct blob * our , struct blob * their , unsigned long * size)', 51, 92)], '/home/kevin/thesis/git/merge-blobs.h': [], '/home/kevin/thesis/git/merge-recursive.c': [('path_hashmap_cmp( const void * cmp_data , const void * entry , const void * entry_or_key , const void * keydata)', 33, 46), ('path_hash( const char * path)', 48, 51), ('dir_rename_find_entry( struct hashmap * hashmap , char * dir)', 53, 63), ('dir_rename_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 65, 74), ('dir_rename_init( struct hashmap * map)', 76, 79), ('dir_rename_entry_init( struct dir_rename_entry * entry , char * directory)', 81, 89), ('collision_find_entry( struct hashmap * hashmap , char * target_file)', 91, 99), ('collision_cmp( void * unused_cmp_data , const struct collision_entry * e1 , const struct collision_entry * e2 , const void * unused_keydata)', 101, 107), ('collision_init( struct hashmap * map)', 109, 112), ('flush_output( struct merge_options * o)', 114, 120), ('err( struct merge_options * o , const char * err , ...)', 122, 143), ('shift_tree_object( struct tree * one , struct tree * two , const char * subtree_shift)', 145, 159), ('make_virtual_commit( struct tree * tree , const char * comment)', 161, 169), ('oid_eq( const struct object_id * a , const struct object_id * b)', 175, 180), ('setup_rename_conflict_info( enum rename_type rename_type , struct diff_filepair * pair1 , struct diff_filepair * pair2 , const char * branch1 , const char * branch2 , struct stage_data * dst_entry1 , struct stage_data * dst_entry2 , struct merge_options * o , struct stage_data * src_entry1 , struct stage_data * src_entry2)', 216, 261), ('show( struct merge_options * o , int v)', 263, 266), ('output( struct merge_options * o , int v , const char * fmt , ...)', 269, 285), ('output_commit_title( struct merge_options * o , struct commit * commit)', 287, 309), ('add_cacheinfo( struct merge_options * o , unsigned int mode , const struct object_id * oid , const char * path , int stage , int refresh , int options)', 311, 333), ('init_tree_desc_from_tree( struct tree_desc * desc , struct tree * tree)', 335, 339), ('unpack_trees_start( struct merge_options * o , struct tree * common , struct tree * head , struct tree * merge)', 341, 381), ('unpack_trees_finish( struct merge_options * o)', 383, 387), ('write_tree_from_memory( struct merge_options * o)', 389, 417), ('save_files_dirs( const struct object_id * oid , struct strbuf * base , const char * path , unsigned int mode , int stage , void * context)', 419, 435), ('get_files_dirs( struct merge_options * o , struct tree * tree)', 437, 442), ('get_tree_entry_if_blob( const struct object_id * tree , const char * path , struct object_id * hashy , unsigned int * mode_o)', 444, 457), ('insert_stage_data( const char * path , struct tree * o , struct tree * a , struct tree * b , struct string_list * entries)', 463, 478), ('get_unmerged( void)', 484, 509), ('string_list_df_name_compare( const char * one , const char * two)', 511, 536), ('record_df_conflict_files( struct merge_options * o , struct string_list * entries)', 538, 608), ('update_stages( struct merge_options * opt , const char * path , const struct diff_filespec * o , const struct diff_filespec * a , const struct diff_filespec * b)', 637, 666), ('update_stages_for_stage_data( struct merge_options * opt , const char * path , const struct stage_data * stage_data)', 668, 687), ('update_entry( struct stage_data * entry , struct diff_filespec * o , struct diff_filespec * a , struct diff_filespec * b)', 689, 701), ('remove_file( struct merge_options * o , int clean , const char * path , int no_wd)', 703, 724), ('add_flattened_path( struct strbuf * out , const char * s)', 727, 734), ('unique_path( struct merge_options * o , const char * path , const char * branch)', 736, 758), ('dir_in_way( const char * path , int check_working_copy , int empty_ok)', 766, 788), ('was_tracked_and_matches( struct merge_options * o , const char * path , const struct object_id * oid , unsigned mode)', 794, 807), ('was_tracked( struct merge_options * o , const char * path)', 812, 821), ('would_lose_untracked( const char * path)', 823, 862), ('was_dirty( struct merge_options * o , const char * path)', 864, 876), ('make_room_for_path( struct merge_options * o , const char * path)', 878, 926), ('update_file_flags( struct merge_options * o , const struct object_id * oid , unsigned mode , const char * path , int update_cache , int update_wd)', 928, 1010), ('update_file( struct merge_options * o , int clean , const struct object_id * oid , unsigned mode , const char * path)', 1012, 1019), ('merge_3way( struct merge_options * o , mmbuffer_t * result_buf , const struct diff_filespec * one , const struct diff_filespec * a , const struct diff_filespec * b , const char * branch1 , const char * branch2)', 1030, 1090), ('find_first_merges( struct object_array * result , const char * path , struct commit * a , struct commit * b)', 1092, 1150), ('print_commit( struct commit * commit)', 1152, 1160), ('merge_submodule( struct merge_options * o , struct object_id * result , const char * path , const struct object_id * base , const struct object_id * a , const struct object_id * b)', 1162, 1269), ('merge_file_1( struct merge_options * o , const struct diff_filespec * one , const struct diff_filespec * a , const struct diff_filespec * b , const char * filename , const char * branch1 , const char * branch2 , struct merge_file_info * result)', 1271, 1361), ('merge_file_special_markers( struct merge_options * o , const struct diff_filespec * one , const struct diff_filespec * a , const struct diff_filespec * b , const char * target_filename , const char * branch1 , const char * filename1 , const char * branch2 , const char * filename2 , struct merge_file_info * mfi)', 1363, 1390), ('merge_file_one( struct merge_options * o , const char * path , const struct object_id * o_oid , int o_mode , const struct object_id * a_oid , int a_mode , const struct object_id * b_oid , int b_mode , const char * branch1 , const char * branch2 , struct merge_file_info * mfi)', 1392, 1411), ('conflict_rename_dir( struct merge_options * o , struct diff_filepair * pair , const char * rename_branch , const char * other_branch)', 1413, 1443), ('handle_change_delete( struct merge_options * o , const char * path , const char * old_path , const struct object_id * o_oid , int o_mode , const struct object_id * changed_oid , int changed_mode , const char * change_branch , const char * delete_branch , const char * change , const char * change_past)', 1445, 1510), ('conflict_rename_delete( struct merge_options * o , struct diff_filepair * pair , const char * rename_branch , const char * delete_branch)', 1512, 1535), ('filespec_from_entry( struct diff_filespec * target , struct stage_data * entry , int stage)', 1537, 1548), ('handle_file( struct merge_options * o , struct diff_filespec * rename , int stage , struct rename_conflict_info * ci)', 1550, 1615), ('conflict_rename_rename_1to2( struct merge_options * o , struct rename_conflict_info * ci)', 1617, 1677), ('conflict_rename_rename_2to1( struct merge_options * o , struct rename_conflict_info * ci)', 1679, 1777), ('get_diffpairs( struct merge_options * o , struct tree * o_tree , struct tree * tree)', 1782, 1821), ('tree_has_path( struct tree * tree , const char * path)', 1823, 1830), ('apply_dir_rename( struct dir_rename_entry * entry , const char * old_path)', 1839, 1855), ('get_renamed_dir_portion( const char * old_path , const char * new_path , char ** old_dir , char ** new_dir)', 1857, 1910), ('remove_hashmap_entries( struct hashmap * dir_renames , struct string_list * items_to_remove)', 1912, 1923), ('handle_path_level_conflicts( struct merge_options * o , const char * path , struct dir_rename_entry * entry , struct hashmap * collisions , struct tree * tree)', 1930, 2008), ('handle_directory_level_conflicts( struct merge_options * o , struct hashmap * dir_re_head , struct tree * head , struct hashmap * dir_re_merge , struct tree * merge)', 2030, 2101), ('get_directory_renames( struct diff_queue_struct * pairs , struct tree * tree)', 2103, 2209), ('check_dir_renamed( const char * path , struct hashmap * dir_renames)', 2211, 2226), ('compute_collisions( struct hashmap * collisions , struct hashmap * dir_renames , struct diff_queue_struct * pairs)', 2228, 2287), ('check_for_directory_rename( struct merge_options * o , const char * path , struct tree * tree , struct hashmap * dir_renames , struct hashmap * dir_rename_exclusions , struct hashmap * collisions , int * clean_merge)', 2289, 2340), ('apply_directory_rename_modifications( struct merge_options * o , struct diff_filepair * pair , char * new_path , struct rename * re , struct tree * tree , struct tree * o_tree , struct tree * a_tree , struct tree * b_tree , struct string_list * entries , int * clean)', 2342, 2450), ('get_renames( struct merge_options * o , struct diff_queue_struct * pairs , struct hashmap * dir_renames , struct hashmap * dir_rename_exclusions , struct tree * tree , struct tree * o_tree , struct tree * a_tree , struct tree * b_tree , struct string_list * entries , int * clean_merge)', 2459, 2533), ('process_renames( struct merge_options * o , struct string_list * a_renames , struct string_list * b_renames)', 2535, 2800), ('initial_cleanup_rename( struct diff_queue_struct * pairs , struct hashmap * dir_renames)', 2807, 2824), ('handle_renames( struct merge_options * o , struct tree * common , struct tree * head , struct tree * merge , struct string_list * entries , struct rename_info * ri)', 2826, 2877), ('final_cleanup_rename( struct string_list * rename)', 2879, 2893), ('final_cleanup_renames( struct rename_info * re_info)', 2895, 2899), ('stage_oid( const struct object_id * oid , unsigned mode)', 2901, 2904), ('read_oid_strbuf( struct merge_options * o , const struct object_id * oid , struct strbuf * dst)', 2906, 2921), ('blob_unchanged( struct merge_options * opt , const struct object_id * o_oid , unsigned o_mode , const struct object_id * a_oid , unsigned a_mode , int renormalize , const char * path)', 2923, 2957), ('handle_modify_delete( struct merge_options * o , const char * path , struct object_id * o_oid , int o_mode , struct object_id * a_oid , int a_mode , struct object_id * b_oid , int b_mode)', 2959, 2987), ('merge_content( struct merge_options * o , const char * path , int is_dirty , struct object_id * o_oid , int o_mode , struct object_id * a_oid , int a_mode , struct object_id * b_oid , int b_mode , struct rename_conflict_info * rename_conflict_info)', 2989, 3099), ('conflict_rename_normal( struct merge_options * o , const char * path , struct object_id * o_oid , unsigned int o_mode , struct object_id * a_oid , unsigned int a_mode , struct object_id * b_oid , unsigned int b_mode , struct rename_conflict_info * ci)', 3101, 3112), ('process_entry( struct merge_options * o , const char * path , struct stage_data * entry)', 3115, 3248), ('merge_trees( struct merge_options * o , struct tree * head , struct tree * merge , struct tree * common , struct tree ** result)', 3250, 3350), ('reverse_commit_list( struct commit_list * list)', 3352, 3361), ('merge_recursive( struct merge_options * o , struct commit * h1 , struct commit * h2 , struct commit_list * ca , struct commit ** result)', 3367, 3459), ('get_ref( const struct object_id * oid , const char * name)', 3461, 3475), ('merge_recursive_generic( struct merge_options * o , const struct object_id * head , const struct object_id * merge , int num_base_list , const struct object_id ** base_list , struct commit ** result)', 3477, 3514), ('merge_recursive_config( struct merge_options * o)', 3516, 3531), ('init_merge_options( struct merge_options * o)', 3533, 3552), ('parse_merge_opt( struct merge_options * o , const char * s)', 3554, 3608)], '/home/kevin/thesis/git/merge-recursive.h': [('merge_detect_rename( struct merge_options * o)', 61, 65)], '/home/kevin/thesis/git/merge.c': [('merge_argument( struct commit * commit)', 12, 15), ('index_has_changes( struct strbuf * sb)', 17, 46), ('try_merge_command( const char * strategy , size_t xopts_nr , const char ** xopts , struct commit_list * common , const char * head_arg , struct commit_list * remotes)', 48, 75), ('checkout_fast_forward( const struct object_id * head , const struct object_id * remote , int overwrite_ignore)', 77, 138)], '/home/kevin/thesis/git/mergesort.c': [('get_nth_next( void * list , unsigned long n , void *(*get_next_fn)(constvoid*))', 9, 15), ('pop_item( struct mergesort_sublist * l , void *(*get_next_fn)(constvoid*))', 17, 24), ('llist_mergesort( void * list , void *(*get_next_fn)(constvoid*) , void(*set_next_fn)(void*,void*) , int(*compare_fn)(constvoid*,constvoid*))', 26, 73)], '/home/kevin/thesis/git/mergesort.h': [], '/home/kevin/thesis/git/name-hash.c': [('dir_entry_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * keydata)', 19, 30), ('find_dir_entry__hash( struct index_state * istate , const char * name , unsigned int namelen , unsigned int hash)', 32, 39), ('find_dir_entry( struct index_state * istate , const char * name , unsigned int namelen)', 41, 45), ('hash_dir_entry( struct index_state * istate , struct cache_entry * ce , int namelen)', 47, 79), ('add_dir_entry( struct index_state * istate , struct cache_entry * ce)', 81, 87), ('remove_dir_entry( struct index_state * istate , struct cache_entry * ce)', 89, 102), ('hash_index_entry( struct index_state * istate , struct cache_entry * ce)', 104, 114), ('cache_entry_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * remove)', 116, 129), ('lookup_lazy_params( struct index_state * istate)', 136, 139), ('threaded_lazy_init_name_hash( struct index_state * istate)', 141, 144), ('lookup_lazy_params( struct index_state * istate)', 192, 220), ('init_dir_mutex( void)', 234, 242), ('cleanup_dir_mutex( void)', 244, 252), ('lock_dir_mutex( int j)', 254, 257), ('unlock_dir_mutex( int j)', 259, 262), ('compute_dir_lock_nr( const struct hashmap * map , unsigned int hash)', 264, 269), ('hash_dir_entry_with_parent_and_prefix( struct index_state * istate , struct dir_entry * parent , struct strbuf * prefix)', 271, 317), ('handle_range_dir( struct index_state * istate , int k_start , int k_end , struct dir_entry * parent , struct strbuf * prefix , struct lazy_entry * lazy_entries , struct dir_entry ** dir_new_out)', 334, 386), ('handle_range_1( struct index_state * istate , int k_start , int k_end , struct dir_entry * parent , struct strbuf * prefix , struct lazy_entry * lazy_entries)', 388, 457), ('lazy_dir_thread_proc( void * _data)', 467, 474), ('lazy_name_thread_proc( void * _data)', 482, 495), ('lazy_update_dir_ref_counts( struct index_state * istate , struct lazy_entry * lazy_entries)', 497, 507), ('threaded_lazy_init_name_hash( struct index_state * istate)', 509, 575), ('lazy_init_name_hash( struct index_state * istate)', 579, 606), ('test_lazy_init_name_hash( struct index_state * istate , int try_threaded)', 617, 625), ('add_name_hash( struct index_state * istate , struct cache_entry * ce)', 627, 631), ('remove_name_hash( struct index_state * istate , struct cache_entry * ce)', 633, 642), ('slow_same_name( const char * name1 , int len1 , const char * name2 , int len2)', 644, 661), ('same_name( const struct cache_entry * ce , const char * name , int namelen , int icase)', 663, 678), ('index_dir_exists( struct index_state * istate , const char * name , int namelen)', 680, 687), ('adjust_dirname_case( struct index_state * istate , char * name)', 689, 710), ('index_file_exists( struct index_state * istate , const char * name , int namelen , int icase)', 712, 726), ('free_name_hash( struct index_state * istate)', 728, 736)], '/home/kevin/thesis/git/notes-cache.c': [('notes_cache_match_validity( const char * ref , const char * validity)', 6, 29), ('notes_cache_init( struct notes_cache * c , const char * name , const char * validity)', 31, 45), ('notes_cache_write( struct notes_cache * c)', 47, 67), ('notes_cache_get( struct notes_cache * c , struct object_id * key_oid , size_t * outsize)', 69, 84), ('notes_cache_put( struct notes_cache * c , struct object_id * key_oid , const char * data , size_t size)', 86, 94)], '/home/kevin/thesis/git/notes-cache.h': [], '/home/kevin/thesis/git/notes-merge.c': [('init_notes_merge_options( struct notes_merge_options * o)', 18, 23), ('path_to_oid( const char * path , struct object_id * oid)', 25, 37), ('verify_notes_filepair( struct diff_filepair * p , struct object_id * oid)', 39, 58), ('find_notes_merge_pair_pos( struct notes_merge_pair * list , int len , struct object_id * obj , int insert_new , int * occupied)', 60, 108), ('diff_tree_remote( struct notes_merge_options * o , const struct object_id * base , const struct object_id * remote , int * num_changes)', 115, 177), ('diff_tree_local( struct notes_merge_options * o , struct notes_merge_pair * changes , int len , const struct object_id * base , const struct object_id * local)', 179, 260), ('check_notes_merge_worktree( struct notes_merge_options * o)', 262, 292), ('write_buf_to_worktree( const struct object_id * obj , const char * buf , unsigned long size)', 294, 318), ('write_note_to_worktree( const struct object_id * obj , const struct object_id * note)', 320, 335), ('ll_merge_in_worktree( struct notes_merge_options * o , struct notes_merge_pair * p)', 337, 362), ('merge_one_change_manual( struct notes_merge_options * o , struct notes_merge_pair * p , struct notes_tree * t)', 364, 421), ('merge_one_change( struct notes_merge_options * o , struct notes_merge_pair * p , struct notes_tree * t)', 423, 465), ('merge_changes( struct notes_merge_options * o , struct notes_merge_pair * changes , int * num_changes , struct notes_tree * t)', 467, 502), ('merge_from_diffs( struct notes_merge_options * o , const struct object_id * base , const struct object_id * local , const struct object_id * remote , struct notes_tree * t)', 504, 530), ('notes_merge( struct notes_merge_options * o , struct notes_tree * local_tree , struct object_id * result_oid)', 532, 656), ('notes_merge_commit( struct notes_merge_options * o , struct notes_tree * partial_tree , struct commit * partial_commit , struct object_id * result_oid)', 658, 730), ('notes_merge_abort( struct notes_merge_options * o)', 732, 748)], '/home/kevin/thesis/git/notes-merge.h': [], '/home/kevin/thesis/git/notes-utils.c': [('create_notes_commit( struct notes_tree * t , struct commit_list * parents , const char * msg , size_t msg_len , struct object_id * result_oid)', 7, 33), ('commit_notes( struct notes_tree * t , const char * msg)', 35, 57), ('parse_notes_merge_strategy( const char * v , enum notes_merge_strategy * s)', 59, 75), ('parse_combine_notes_fn( const char * v)', 77, 89), ('notes_rewrite_config( const char * k , const char * v , void * cb)', 91, 118), ('init_copy_notes_for_rewrite( const char * cmd)', 121, 160), ('copy_note_for_rewrite( struct notes_rewrite_cfg * c , const struct object_id * from_obj , const struct object_id * to_obj)', 162, 170), ('finish_copy_notes_for_rewrite( struct notes_rewrite_cfg * c , const char * msg)', 172, 181)], '/home/kevin/thesis/git/notes-utils.h': [], '/home/kevin/thesis/git/notes.c': [('note_tree_search( struct notes_tree * t , struct int_node ** tree , unsigned char * n , const unsigned char * key_sha1)', 97, 135), ('note_tree_find( struct notes_tree * t , struct int_node * tree , unsigned char n , const unsigned char * key_sha1)', 142, 153), ('note_tree_consolidate( struct int_node * tree , struct int_node * parent , unsigned char index)', 162, 185), ('note_tree_remove( struct notes_tree * t , struct int_node * tree , unsigned char n , struct leaf_node * entry)', 195, 231), ('note_tree_insert( struct notes_tree * t , struct int_node * tree , unsigned char n , struct leaf_node * entry , unsigned char type , combine_notes_fn combine_notes)', 246, 318), ('note_tree_free( struct int_node * tree)', 321, 335), ('non_note_cmp( const struct non_note * a , const struct non_note * b)', 337, 340), ('add_non_note( struct notes_tree * t , char * path , unsigned int mode , const unsigned char * sha1)', 343, 386), ('load_subtree( struct notes_tree * t , struct leaf_node * subtree , struct int_node * node , unsigned int n)', 388, 487), ('determine_fanout( struct int_node * tree , unsigned char n , unsigned char fanout)', 503, 527), ('construct_path_with_fanout( const unsigned char * sha1 , unsigned char fanout , char * path)', 532, 545), ('for_each_note_helper( struct notes_tree * t , struct int_node * tree , unsigned char n , unsigned char fanout , int flags , each_note_fn fn , void * cb_data)', 547, 621), ('matches_tree_write_stack( struct tree_write_stack * tws , const char * full_path)', 629, 635), ('write_tree_entry( struct strbuf * buf , unsigned int mode , const char * path , unsigned int path_len , const unsigned char * sha1)', 637, 643), ('tree_write_stack_init_subtree( struct tree_write_stack * tws , const char * path)', 645, 659), ('tree_write_stack_finish_subtree( struct tree_write_stack * tws)', 661, 680), ('write_each_note_helper( struct tree_write_stack * tws , const char * path , unsigned int mode , const struct object_id * oid)', 682, 717), ('write_each_non_note_until( const char * note_path , struct write_each_note_data * d)', 724, 742), ('write_each_note( const struct object_id * object_oid , const struct object_id * note_oid , char * note_path , void * cb_data)', 744, 764), ('prune_notes_helper( const struct object_id * object_oid , const struct object_id * note_oid , char * note_path , void * cb_data)', 771, 787), ('combine_notes_concatenate( struct object_id * cur_oid , const struct object_id * new_oid)', 789, 831), ('combine_notes_overwrite( struct object_id * cur_oid , const struct object_id * new_oid)', 833, 838), ('combine_notes_ignore( struct object_id * cur_oid , const struct object_id * new_oid)', 840, 844), ('string_list_add_note_lines( struct string_list * list , const struct object_id * oid)', 850, 876), ('string_list_join_lines_helper( struct string_list_item * item , void * cb_data)', 878, 885), ('combine_notes_cat_sort_uniq( struct object_id * cur_oid , const struct object_id * new_oid)', 887, 914), ('string_list_add_one_ref( const char * refname , const struct object_id * oid , int flag , void * cb)', 916, 923), ('string_list_add_refs_by_glob( struct string_list * list , const char * glob)', 928, 940), ('string_list_add_refs_from_colon_sep( struct string_list * list , const char * globs)', 942, 957), ('notes_display_config( const char * k , const char * v , void * cb)', 959, 970), ('default_notes_ref( void)', 972, 982), ('init_notes( struct notes_tree * t , const char * notes_ref , combine_notes_fn combine_notes , int flags)', 984, 1022), ('load_notes_trees( struct string_list * refs , int flags)', 1024, 1037), ('init_display_notes( struct display_notes_opt * opt)', 1039, 1070), ('add_note( struct notes_tree * t , const struct object_id * object_oid , const struct object_id * note_oid , combine_notes_fn combine_notes)', 1072, 1087), ('remove_note( struct notes_tree * t , const unsigned char * object_sha1)', 1089, 1103), ('get_note( struct notes_tree * t , const struct object_id * oid)', 1105, 1115), ('for_each_note( struct notes_tree * t , int flags , each_note_fn fn , void * cb_data)', 1117, 1124), ('write_notes_tree( struct notes_tree * t , struct object_id * result)', 1126, 1153), ('prune_notes( struct notes_tree * t , int flags)', 1155, 1172), ('free_notes( struct notes_tree * t)', 1174, 1189), ('format_note( struct notes_tree * t , const struct object_id * object_oid , struct strbuf * sb , const char * output_encoding , int raw)', 1202, 1262), ('format_display_notes( const struct object_id * object_oid , struct strbuf * sb , const char * output_encoding , int raw)', 1264, 1272), ('copy_note( struct notes_tree * t , const struct object_id * from_obj , const struct object_id * to_obj , int force , combine_notes_fn combine_notes)', 1274, 1290), ('expand_notes_ref( struct strbuf * sb)', 1292, 1300), ('expand_loose_notes_ref( struct strbuf * sb)', 1302, 1310)], '/home/kevin/thesis/git/notes.h': [], '/home/kevin/thesis/git/object-store.h': [], '/home/kevin/thesis/git/object.c': [('get_max_object_index( void)', 14, 17), ('get_indexed_object( unsigned int idx)', 19, 22), ('type_name( unsigned int type)', 32, 37), ('type_from_string_gently( const char * str , ssize_t len , int gentle)', 39, 55), ('hash_obj( const unsigned char * sha1 , unsigned int n)', 62, 65), ('insert_obj_hash( struct object * obj , struct object ** hash , unsigned int size)', 72, 82), ('lookup_object( const unsigned char * sha1)', 88, 113), ('grow_object_hash( void)', 120, 140), ('create_object( const unsigned char * sha1 , void * o)', 142, 156), ('object_as_type( struct object * obj , enum object_type type , int quiet)', 158, 175), ('lookup_unknown_object( const unsigned char * sha1)', 177, 183), ('parse_object_buffer( const struct object_id * oid , enum object_type type , unsigned long size , void * buffer , int * eaten_p)', 185, 233), ('parse_object_or_die( const struct object_id * oid , const char * name)', 235, 243), ('parse_object( const struct object_id * oid)', 245, 283), ('object_list_insert( struct object * item , struct object_list ** list_p)', 285, 293), ('object_list_contains( struct object_list * list , struct object * obj)', 295, 303), ('add_object_array_with_path( struct object * obj , const char * name , struct object_array * array , unsigned mode , const char * path)', 311, 341), ('add_object_array( struct object * obj , const char * name , struct object_array * array)', 343, 346), ('object_array_release_entry( struct object_array_entry * ent)', 352, 357), ('object_array_pop( struct object_array * array)', 359, 370), ('object_array_filter( struct object_array * array , object_array_each_func_t want , void * cb_data)', 372, 388), ('object_array_clear( struct object_array * array)', 390, 397), ('contains_name( struct object_array * array , const char * name)', 402, 411), ('object_array_remove_duplicates( struct object_array * array)', 413, 428), ('clear_object_flags( unsigned flags)', 430, 439), ('clear_commit_marks_all( unsigned int flags)', 441, 450), ('raw_object_store_new( void)', 452, 459), ('free_alt_odb( struct alternate_object_database * alt)', 461, 466), ('free_alt_odbs( struct raw_object_store * o)', 468, 477), ('raw_object_store_clear( struct raw_object_store * o)', 479, 493)], '/home/kevin/thesis/git/object.h': [], '/home/kevin/thesis/git/oidmap.c': [('cmpfn( const void * hashmap_cmp_fn_data , const void * entry , const void * entry_or_key , const void * keydata)', 4, 13), ('hash( const struct object_id * oid)', 15, 20), ('oidmap_init( struct oidmap * map , size_t initial_size)', 22, 25), ('oidmap_free( struct oidmap * map , int free_entries)', 27, 32), ('oidmap_get( const struct oidmap * map , const struct object_id * key)', 34, 40), ('oidmap_remove( struct oidmap * map , const struct object_id * key)', 42, 51), ('oidmap_put( struct oidmap * map , void * entry)', 53, 62)], '/home/kevin/thesis/git/oidmap.h': [('oidmap_iter_init( struct oidmap * map , struct oidmap_iter * iter)', 73, 76), ('oidmap_iter_next( struct oidmap_iter * iter)', 78, 81), ('oidmap_iter_first( struct oidmap * map , struct oidmap_iter * iter)', 83, 88)], '/home/kevin/thesis/git/oidset.c': [('oidset_contains( const struct oidset * set , const struct object_id * oid)', 4, 9), ('oidset_insert( struct oidset * set , const struct object_id * oid)', 11, 25), ('oidset_remove( struct oidset * set , const struct object_id * oid)', 27, 35), ('oidset_clear( struct oidset * set)', 37, 40)], '/home/kevin/thesis/git/oidset.h': [('oidset_init( struct oidset * set , size_t initial_size)', 28, 31), ('oidset_iter_init( struct oidset * set , struct oidset_iter * iter)', 64, 68), ('oidset_iter_next( struct oidset_iter * iter)', 70, 74), ('oidset_iter_first( struct oidset * set , struct oidset_iter * iter)', 76, 81)], '/home/kevin/thesis/git/pack-bitmap-write.c': [('bitmap_writer_show_progress( int show)', 43, 46), ('bitmap_writer_build_type_index( struct packing_data * to_pack , struct pack_idx_entry ** index , uint32_t index_nr)', 51, 106), ('push_bitmapped_commit( struct commit * commit , struct ewah_bitmap * reused)', 114, 126), ('mark_as_seen( struct object * object)', 128, 132), ('reset_all_seen( void)', 134, 141), ('find_object_pos( const unsigned char * sha1)', 143, 153), ('show_object( struct object * object , const char * name , void * data)', 155, 160), ('show_commit( struct commit * commit , void * data)', 162, 165), ('add_to_include_set( struct bitmap * base , struct commit * commit)', 168, 185), ('should_include( struct commit * commit , void * _data)', 188, 207), ('compute_xor_offsets( void)', 209, 247), ('bitmap_writer_build( struct packing_data * to_pack)', 249, 325), ('next_commit_index( unsigned int idx)', 330, 352), ('date_compare( const void * _a , const void * _b)', 354, 359), ('bitmap_writer_reuse_bitmaps( struct packing_data * to_pack)', 361, 368), ('find_reused_bitmap( const unsigned char * sha1)', 370, 382), ('bitmap_writer_select_commits( struct commit ** indexed_commits , unsigned int indexed_commits_nr , int max_bitmaps)', 384, 442), ('hashwrite_ewah_helper( void * f , const void * buf , size_t len)', 445, 450), ('dump_bitmap( struct hashfile * f , struct ewah_bitmap * bitmap)', 455, 459), ('sha1_access( size_t pos , void * table)', 461, 465), ('write_selected_commits_v1( struct hashfile * f , struct pack_idx_entry ** index , uint32_t index_nr)', 467, 488), ('write_hash_cache( struct hashfile * f , struct pack_idx_entry ** index , uint32_t index_nr)', 490, 501), ('bitmap_writer_set_checksum( unsigned char * sha1)', 503, 506), ('bitmap_writer_finish( struct pack_idx_entry ** index , uint32_t index_nr , const char * filename , uint16_t options)', 508, 549)], '/home/kevin/thesis/git/pack-bitmap.c': [('lookup_stored_bitmap( struct stored_bitmap * st)', 96, 113), ('read_bitmap_1( struct bitmap_index * index)', 119, 135), ('load_bitmap_header( struct bitmap_index * index)', 137, 168), ('store_bitmap( struct bitmap_index * index , struct ewah_bitmap * root , const unsigned char * sha1 , struct stored_bitmap * xor_with , int flags)', 170, 198), ('read_be32( const unsigned char * buffer , size_t * pos)', 200, 205), ('read_u8( const unsigned char * buffer , size_t * pos)', 207, 210), ('load_bitmap_entries_v1( struct bitmap_index * index)', 214, 251), ('pack_bitmap_filename( struct packed_git * p)', 253, 260), ('open_pack_bitmap_1( struct packed_git * packfile)', 262, 303), ('load_pack_bitmap( void)', 305, 330), ('open_pack_bitmap( void)', 332, 345), ('prepare_bitmap_git( void)', 347, 356), ('bitmap_position_extended( const unsigned char * sha1)', 363, 374), ('bitmap_position_packfile( const unsigned char * sha1)', 376, 383), ('bitmap_position( const unsigned char * sha1)', 385, 389), ('ext_index_add_object( struct object * object , const char * name)', 391, 417), ('show_object( struct object * object , const char * name , void * data)', 419, 430), ('show_commit( struct commit * commit , void * data)', 432, 434), ('add_to_include_set( struct include_data * data , const unsigned char * sha1 , int bitmap_pos)', 436, 457), ('should_include( struct commit * commit , void * _data)', 459, 480), ('find_objects( struct rev_info * revs , struct object_list * roots , struct bitmap * seen)', 482, 576), ('show_extended_objects( struct bitmap * objects , show_reachable_fn show_reach)', 578, 593), ('show_objects_for_type( struct bitmap * objects , struct ewah_bitmap * type_filter , enum object_type object_type , show_reachable_fn show_reach)', 595, 640), ('in_bitmapped_pack( struct object_list * roots)', 642, 653), ('prepare_bitmap_walk( struct rev_info * revs)', 655, 741), ('reuse_partial_packfile_from_bitmap( struct packed_git ** packfile , uint32_t * entries , off_t * up_to)', 743, 802), ('traverse_bitmap_commit_list( show_reachable_fn show_reachable)', 804, 821), ('count_object_type( struct bitmap * objects , enum object_type type)', 823, 865), ('count_bitmap_commit_list( uint32_t * commits , uint32_t * trees , uint32_t * blobs , uint32_t * tags)', 867, 883), ('test_show_object( struct object * object , const char * name , void * data)', 891, 903), ('test_show_commit( struct commit * commit , void * data)', 905, 916), ('test_bitmap_walk( struct rev_info * revs)', 918, 974), ('rebuild_bitmap( uint32_t * reposition , struct ewah_bitmap * source , struct bitmap * dest)', 976, 1005), ('rebuild_existing_bitmaps( struct packing_data * mapping , khash_sha1 * reused_bitmaps , int show_progress)', 1007, 1066)], '/home/kevin/thesis/git/pack-bitmap.h': [], '/home/kevin/thesis/git/pack-check.c': [('compare_entries( const void * e1 , const void * e2)', 18, 27), ('check_pack_crc( struct packed_git * p , struct pack_window ** w_curs , off_t offset , off_t len , unsigned int nr)', 29, 49), ('verify_packfile( struct packed_git * p , struct pack_window ** w_curs , verify_fn fn , struct progress * progress , uint32_t base_count)', 51, 164), ('verify_pack_index( struct packed_git * p)', 166, 187), ('verify_pack( struct packed_git * p , verify_fn fn , struct progress * progress , uint32_t base_count)', 189, 203)], '/home/kevin/thesis/git/pack-objects.c': [('locate_object_entry_hash( struct packing_data * pdata , const unsigned char * sha1 , int * found)', 8, 29), ('closest_pow2( uint32_t v)', 31, 40), ('rehash_objects( struct packing_data * pdata)', 42, 68), ('packlist_find( struct packing_data * pdata , const unsigned char * sha1 , uint32_t * index_pos)', 70, 89), ('prepare_in_pack_by_idx( struct packing_data * pdata)', 91, 111), ('oe_map_new_pack( struct packing_data * pack , struct packed_git * p)', 122, 133), ('prepare_packing_data( struct packing_data * pdata)', 136, 149), ('packlist_alloc( struct packing_data * pdata , const unsigned char * sha1 , uint32_t index_pos)', 151, 179)], '/home/kevin/thesis/git/pack-objects.h': [('pack_name_hash( const char * name)', 155, 173), ('oe_type( const struct object_entry * e)', 175, 178), ('oe_set_type( struct object_entry * e , enum object_type type)', 180, 188), ('oe_in_pack_pos( const struct packing_data * pack , const struct object_entry * e)', 190, 194), ('oe_set_in_pack_pos( const struct packing_data * pack , const struct object_entry * e , unsigned int pos)', 196, 201), ('oe_in_pack( const struct packing_data * pack , const struct object_entry * e)', 203, 210), ('oe_set_in_pack( struct packing_data * pack , struct object_entry * e , struct packed_git * p)', 214, 224), ('oe_delta( const struct packing_data * pack , const struct object_entry * e)', 226, 233), ('oe_set_delta( struct packing_data * pack , struct object_entry * e , struct object_entry * delta)', 235, 243), ('oe_delta_child( const struct packing_data * pack , const struct object_entry * e)', 245, 252), ('oe_set_delta_child( struct packing_data * pack , struct object_entry * e , struct object_entry * delta)', 254, 262), ('oe_delta_sibling( const struct packing_data * pack , const struct object_entry * e)', 264, 271), ('oe_set_delta_sibling( struct packing_data * pack , struct object_entry * e , struct object_entry * delta)', 273, 281), ('oe_size( struct packing_data * pack , const struct object_entry * e)', 285, 292), ('oe_size_less_than( struct packing_data * pack , const struct object_entry * lhs , unsigned long rhs)', 294, 303), ('oe_size_greater_than( struct packing_data * pack , const struct object_entry * lhs , unsigned long rhs)', 305, 314), ('oe_set_size( struct packing_data * pack , struct object_entry * e , unsigned long size)', 316, 328), ('oe_delta_size( struct packing_data * pack , const struct object_entry * e)', 330, 336), ('oe_set_delta_size( struct packing_data * pack , struct object_entry * e , unsigned long size)', 338, 347)], '/home/kevin/thesis/git/pack-revindex.c': [('sort_revindex( struct revindex_entry * entries , unsigned n , off_t max)', 26, 115), ('create_pack_revindex( struct packed_git * p)', 120, 157), ('load_pack_revindex( struct packed_git * p)', 159, 163), ('find_revindex_position( struct packed_git * p , off_t ofs)', 165, 183), ('find_pack_revindex( struct packed_git * p , off_t ofs)', 185, 196)], '/home/kevin/thesis/git/pack-revindex.h': [], '/home/kevin/thesis/git/pack-write.c': [('reset_pack_idx_option( struct pack_idx_option * opts)', 5, 10), ('sha1_compare( const void * _a , const void * _b)', 12, 17), ('cmp_uint32( const void * a_ , const void * b_)', 19, 25), ('need_large_offset( off_t offset , const struct pack_idx_option * opts)', 27, 38), ('write_idx_file( const char * index_name , struct pack_idx_entry ** objects , int nr_objects , const struct pack_idx_option * opts , const unsigned char * sha1)', 45, 177), ('write_pack_header( struct hashfile * f , uint32_t nr_entries)', 179, 188), ('fixup_pack_header_footer( int pack_fd , unsigned char * new_pack_hash , const char * pack_name , uint32_t object_count , unsigned char * partial_pack_hash , off_t partial_pack_offset)', 206, 283), ('index_pack_lockfile( int ip_out)', 285, 305), ('encode_in_pack_object_header( unsigned char * hdr , int hdr_len , enum object_type type , uintmax_t size)', 314, 335), ('create_tmp_packfile( char ** pack_tmp_name)', 337, 345), ('finish_tmp_packfile( struct strbuf * name_buffer , const char * pack_tmp_name , struct pack_idx_entry ** written_list , uint32_t nr_written , struct pack_idx_option * pack_idx_opts , unsigned char sha1 [ ])', 347, 379)], '/home/kevin/thesis/git/pack.h': [], '/home/kevin/thesis/git/packfile.c': [('odb_pack_name( struct strbuf * buf , const unsigned char * sha1 , const char * ext)', 19, 27), ('sha1_pack_name( const unsigned char * sha1)', 29, 33), ('sha1_pack_index_name( const unsigned char * sha1)', 35, 39), ('sz_fmt( size_t s)', 51, 51), ('pack_report( void)', 53, 72), ('check_packed_git_idx( const char * path , struct packed_git * p)', 79, 180), ('open_pack_index( struct packed_git * p)', 182, 197), ('alloc_packed_git( int extra)', 199, 205), ('parse_pack_index( unsigned char * sha1 , const char * idx_path)', 207, 221), ('scan_windows( struct packed_git * p , struct packed_git ** lru_p , struct pack_window ** lru_w , struct pack_window ** lru_l)', 223, 240), ('unuse_one_window( struct packed_git * current)', 242, 263), ('release_pack_memory( size_t need)', 265, 270), ('close_pack_windows( struct packed_git * p)', 272, 286), ('close_pack_fd( struct packed_git * p)', 288, 298), ('close_pack_index( struct packed_git * p)', 300, 306), ('close_pack( struct packed_git * p)', 308, 313), ('close_all_packs( struct raw_object_store * o)', 315, 324), ('find_lru_pack( struct packed_git * p , struct packed_git ** lru_p , struct pack_window ** mru_w , int * accept_windows_inuse)', 330, 379), ('close_one_pack( void)', 381, 397), ('get_max_fd_limit( void)', 399, 438), ('open_packed_git_1( struct packed_git * p)', 444, 523), ('open_packed_git( struct packed_git * p)', 525, 531), ('in_window( struct pack_window * win , off_t offset)', 533, 544), ('use_pack( struct packed_git * p , struct pack_window ** w_cursor , off_t offset , unsigned long * left)', 546, 617), ('unuse_pack( struct pack_window ** w_cursor)', 619, 626), ('try_to_free_pack_memory( size_t size)', 628, 631), ('add_packed_git( const char * path , size_t path_len , int local)', 633, 684), ('install_packed_git( struct repository * r , struct packed_git * pack)', 686, 693), ('report_helper( const struct string_list * list , int seen_bits , int first , int last)', 697, 705), ('report_pack_garbage( struct string_list * list)', 707, 739), ('prepare_packed_git_one( struct repository * r , char * objdir , int local)', 741, 807), ('approximate_object_count( void)', 817, 833), ('get_next_packed_git( const void * p)', 835, 838), ('set_next_packed_git( void * p , void * next)', 840, 843), ('sort_pack( const void * a_ , const void * b_)', 845, 871), ('rearrange_packed_git( struct repository * r)', 873, 878), ('prepare_packed_git_mru( struct repository * r)', 880, 888), ('prepare_packed_git( struct repository * r)', 890, 903), ('reprepare_packed_git( struct repository * r)', 905, 910), ('get_packed_git( struct repository * r)', 912, 916), ('get_packed_git_mru( struct repository * r)', 918, 922), ('unpack_object_header_buffer( const unsigned char * buf , unsigned long len , enum object_type * type , unsigned long * sizep)', 924, 947), ('get_size_from_delta( struct packed_git * p , struct pack_window ** w_curs , off_t curpos)', 949, 986), ('unpack_object_header( struct packed_git * p , struct pack_window ** w_curs , off_t * curpos , unsigned long * sizep)', 988, 1012), ('mark_bad_packed_object( struct packed_git * p , const unsigned char * sha1)', 1014, 1025), ('has_packed_and_bad( const unsigned char * sha1)', 1027, 1038), ('get_delta_base( struct packed_git * p , struct pack_window ** w_curs , off_t * curpos , enum object_type type , off_t delta_obj_offset)', 1040, 1077), ('get_delta_base_sha1( struct packed_git * p , struct pack_window ** w_curs , off_t curpos , enum object_type type , off_t delta_obj_offset)', 1085, 1109), ('retry_bad_packed_offset( struct repository * r , struct packed_git * p , off_t obj_offset)', 1111, 1127), ('packed_to_object_type( struct repository * r , struct packed_git * p , off_t obj_offset , enum object_type type , struct pack_window ** w_curs , off_t curpos)', 1131, 1197), ('pack_entry_hash( struct packed_git * p , off_t base_offset)', 1218, 1225), ('get_delta_base_cache_entry( struct packed_git * p , off_t base_offset)', 1228, 1240), ('delta_base_cache_key_eq( const struct delta_base_cache_key * a , const struct delta_base_cache_key * b)', 1242, 1246), ('delta_base_cache_hash_cmp( const void * unused_cmp_data , const void * va , const void * vb , const void * vkey)', 1248, 1258), ('in_delta_base_cache( struct packed_git * p , off_t base_offset)', 1260, 1263), ('detach_delta_base_cache_entry( struct delta_base_cache_entry * ent)', 1270, 1276), ('cache_or_unpack_entry( struct repository * r , struct packed_git * p , off_t base_offset , unsigned long * base_size , enum object_type * type)', 1278, 1293), ('release_delta_base_cache( struct delta_base_cache_entry * ent)', 1295, 1299), ('clear_delta_base_cache( void)', 1301, 1309), ('add_delta_base_cache( struct packed_git * p , off_t base_offset , void * base , unsigned long base_size , enum object_type type)', 1311, 1338), ('packed_object_info( struct repository * r , struct packed_git * p , off_t obj_offset , struct object_info * oi)', 1340, 1424), ('unpack_compressed_entry( struct packed_git * p , struct pack_window ** w_curs , off_t curpos , unsigned long size)', 1426, 1461), ('write_pack_access_log( struct packed_git * p , off_t obj_offset)', 1463, 1468), ('read_object( struct repository * r , const struct object_id * oid , enum object_type * type , unsigned long * size)', 1479, 1493), ('unpack_entry( struct repository * r , struct packed_git * p , off_t obj_offset , enum object_type * final_type , unsigned long * final_size)', 1495, 1681), ('bsearch_pack( const struct object_id * oid , const struct packed_git * p , uint32_t * result)', 1683, 1705), ('nth_packed_object_sha1( struct packed_git * p , uint32_t n)', 1707, 1726), ('nth_packed_object_oid( struct object_id * oid , struct packed_git * p , uint32_t n)', 1728, 1737), ('check_pack_index_ptr( const struct packed_git * p , const void * vptr)', 1739, 1751), ('nth_packed_object_offset( const struct packed_git * p , uint32_t n)', 1753, 1770), ('find_pack_entry_one( const unsigned char * sha1 , struct packed_git * p)', 1772, 1788), ('is_pack_valid( struct packed_git * p)', 1790, 1809), ('find_sha1_pack( const unsigned char * sha1 , struct packed_git * packs)', 1811, 1822), ('fill_pack_entry( const struct object_id * oid , struct pack_entry * e , struct packed_git * p)', 1824, 1854), ('find_pack_entry( struct repository * r , const struct object_id * oid , struct pack_entry * e)', 1856, 1872), ('has_object_pack( const struct object_id * oid)', 1874, 1878), ('has_pack_index( const unsigned char * sha1)', 1880, 1886), ('for_each_object_in_pack( struct packed_git * p , each_packed_object_fn cb , void * data)', 1888, 1905), ('for_each_packed_object( each_packed_object_fn cb , void * data , unsigned flags)', 1907, 1929), ('add_promisor_object( const struct object_id * oid , struct packed_git * pack , uint32_t pos , void * set_)', 1931, 1971), ('is_promisor_object( const struct object_id * oid)', 1973, 1987)], '/home/kevin/thesis/git/packfile.h': [], '/home/kevin/thesis/git/pager.c': [('wait_for_pager( int in_signal)', 14, 27), ('wait_for_pager_atexit( void)', 29, 32), ('wait_for_pager_signal( int signo)', 34, 39), ('core_pager_config( const char * var , const char * value , void * data)', 41, 46), ('git_pager( int stdout_is_tty)', 48, 69), ('setup_pager_env( struct argv_array * env)', 71, 96), ('prepare_pager_args( struct child_process * pager_process , const char * pager)', 98, 103), ('setup_pager( void)', 105, 141), ('pager_in_use( void)', 143, 146), ('term_columns( void)', 153, 177), ('decimal_width( uintmax_t number)', 182, 189), ('pager_command_config( const char * var , const char * value , void * vdata)', 197, 213), ('check_pager_config( const char * cmd)', 216, 229)], '/home/kevin/thesis/git/parse-options-cb.c': [('parse_opt_abbrev_cb( const struct option * opt , const char * arg , int unset)', 12, 29), ('parse_opt_approxidate_cb( const struct option * opt , const char * arg , int unset)', 31, 36), ('parse_opt_expiry_date_cb( const struct option * opt , const char * arg , int unset)', 38, 46), ('parse_opt_color_flag_cb( const struct option * opt , const char * arg , int unset)', 48, 61), ('parse_opt_verbosity_cb( const struct option * opt , const char * arg , int unset)', 63, 83), ('parse_opt_commits( const struct option * opt , const char * arg , int unset)', 85, 99), ('parse_opt_object_name( const struct option * opt , const char * arg , int unset)', 101, 115), ('parse_opt_tertiary( const struct option * opt , const char * arg , int unset)', 117, 122), ('parse_options_concat( struct option * a , struct option * b)', 124, 142), ('parse_opt_string_list( const struct option * opt , const char * arg , int unset)', 144, 158), ('parse_opt_noop_cb( const struct option * opt , const char * arg , int unset)', 160, 163), ('parse_opt_unknown_cb( const struct option * opt , const char * arg , int unset)', 172, 175), ('recreate_opt( struct strbuf * sb , const struct option * opt , const char * arg , int unset)', 180, 201), ('parse_opt_passthru( const struct option * opt , const char * arg , int unset)', 210, 223), ('parse_opt_passthru_argv( const struct option * opt , const char * arg , int unset)', 231, 242)], '/home/kevin/thesis/git/parse-options.c': [('optbug( const struct option * opt , const char * reason)', 12, 21), ('get_arg( struct parse_opt_ctx_t * p , const struct option * opt , int flags , const char ** arg)', 23, 37), ('fix_filename( const char * prefix , const char ** file)', 39, 45), ('opt_command_mode_error( const struct option * opt , const struct option * all_opts , int flags)', 47, 77), ('get_value( struct parse_opt_ctx_t * p , const struct option * opt , const struct option * all_opts , int flags)', 79, 202), ('parse_short_opt( struct parse_opt_ctx_t * p , const struct option * options)', 204, 236), ('parse_long_opt( struct parse_opt_ctx_t * p , const char * arg , const struct option * options)', 238, 333), ('parse_nodash_opt( struct parse_opt_ctx_t * p , const char * arg , const struct option * options)', 335, 347), ('check_typos( const char * arg , const struct option * options)', 349, 367), ('parse_options_check( const struct option * opts)', 369, 411), ('parse_options_start( struct parse_opt_ctx_t * ctx , int argc , const char ** argv , const char * prefix , const struct option * options , int flags)', 413, 428), ('show_gitcomp( struct parse_opt_ctx_t * ctx , const struct option * opts)', 434, 470), ('parse_options_step( struct parse_opt_ctx_t * ctx , const struct option * options , const char * const usagestr [ ])', 476, 571), ('parse_options_end( struct parse_opt_ctx_t * ctx)', 573, 578), ('parse_options( int argc , const char ** argv , const char * prefix , const struct option * options , const char * const usagestr [ ] , int flags)', 580, 608), ('usage_argh( const struct option * opts , FILE * outfile)', 610, 622), ('usage_with_options_internal( struct parse_opt_ctx_t * ctx , const char * const * usagestr , const struct option * opts , int full , int err)', 627, 708), ('usage_with_options( const char * const * usagestr , const struct option * opts)', 710, 715), ('usage_msg_opt( const char * msg , const char * const * usagestr , const struct option * options)', 717, 723), ('opterror( const struct option * opt , const char * reason , int flags)', 726, 733)], '/home/kevin/thesis/git/parse-options.h': [], '/home/kevin/thesis/git/patch-delta.c': [('patch_delta( const void * src_buf , unsigned long src_size , const void * delta_buf , unsigned long delta_size , unsigned long * dst_size)', 15, 86)], '/home/kevin/thesis/git/patch-ids.c': [('patch_id_defined( struct commit * commit)', 7, 11), ('commit_patch_id( struct commit * commit , struct diff_options * options , struct object_id * oid , int diff_header_only)', 13, 26), ('patch_id_cmp( const void * cmpfn_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 38, 57), ('init_patch_ids( struct patch_ids * ids)', 59, 68), ('free_patch_ids( struct patch_ids * ids)', 70, 74), ('init_patch_id_entry( struct patch_id * patch , struct commit * commit , struct patch_ids * ids)', 76, 88), ('has_commit_patch_id( struct commit * commit , struct patch_ids * ids)', 90, 103), ('add_commit_patch_id( struct commit * commit , struct patch_ids * ids)', 105, 121)], '/home/kevin/thesis/git/patch-ids.h': [], '/home/kevin/thesis/git/path.c': [('get_st_mode_bits( const char * path , int * mode)', 15, 22), ('get_pathname( void)', 26, 36), ('cleanup_path( const char * path)', 38, 46), ('strbuf_cleanup_path( struct strbuf * sb)', 48, 53), ('mksnpath( char * buf , size_t n , const char * fmt , ...)', 55, 68), ('dir_prefix( const char * buf , const char * dir)', 70, 75), ('is_dir_file( const char * buf , const char * dir , const char * file)', 78, 86), ('replace_dir( struct strbuf * buf , int len , const char * newdir)', 88, 98), ('make_trie_node( const char * key , void * value)', 159, 169), ('add_to_trie( struct trie * root , const char * key , void * value)', 175, 232), ('trie_find( struct trie * root , const char * key , match_fn fn , void * baton)', 259, 306), ('init_common_trie( void)', 311, 322), ('check_common( const char * unmatched , void * value , void * baton)', 328, 342), ('update_common_dir( struct strbuf * buf , int git_dir_len , const char * common_dir)', 344, 351), ('report_linked_checkout_garbage( void)', 353, 373), ('adjust_git_path( const struct repository * repo , struct strbuf * buf , int git_dir_len)', 375, 391), ('strbuf_worktree_gitdir( struct strbuf * buf , const struct repository * repo , const struct worktree * wt)', 393, 403), ('do_git_path( const struct repository * repo , const struct worktree * wt , struct strbuf * buf , const char * fmt , va_list args)', 405, 418), ('repo_git_path( const struct repository * repo , const char * fmt , ...)', 420, 429), ('strbuf_repo_git_path( struct strbuf * sb , const struct repository * repo , const char * fmt , ...)', 431, 439), ('git_path_buf( struct strbuf * buf , const char * fmt , ...)', 441, 449), ('strbuf_git_path( struct strbuf * sb , const char * fmt , ...)', 451, 457), ('git_path( const char * fmt , ...)', 459, 467), ('git_pathdup( const char * fmt , ...)', 469, 477), ('mkpathdup( const char * fmt , ...)', 479, 488), ('mkpath( const char * fmt , ...)', 490, 498), ('worktree_git_path( const struct worktree * wt , const char * fmt , ...)', 500, 508), ('do_worktree_path( const struct repository * repo , struct strbuf * buf , const char * fmt , va_list args)', 510, 520), ('repo_worktree_path( const struct repository * repo , const char * fmt , ...)', 522, 535), ('strbuf_repo_worktree_path( struct strbuf * sb , const struct repository * repo , const char * fmt , ...)', 537, 549), ('do_submodule_path( struct strbuf * buf , const char * path , const char * fmt , va_list args)', 552, 576), ('git_pathdup_submodule( const char * path , const char * fmt , ...)', 578, 591), ('strbuf_git_path_submodule( struct strbuf * buf , const char * path , const char * fmt , ...)', 593, 603), ('do_git_common_path( const struct repository * repo , struct strbuf * buf , const char * fmt , va_list args)', 605, 615), ('git_common_path( const char * fmt , ...)', 617, 625), ('strbuf_git_common_path( struct strbuf * sb , const struct repository * repo , const char * fmt , ...)', 627, 635), ('validate_headref( const char * path)', 637, 687), ('getpw_str( const char * username , size_t len)', 689, 696), ('expand_user_path( const char * path , int real_home)', 705, 740), ('enter_repo( const char * path , int strict)', 761, 836), ('calc_shared_perm( int mode)', 838, 858), ('adjust_shared_perm( const char * path)', 861, 881), ('safe_create_dir( const char * dir , int share)', 883, 893), ('have_same_root( const char * path1 , const char * path2)', 895, 903), ('relative_path( const char * in , const char * prefix , struct strbuf * sb)', 911, 1006), ('remove_leading_path( const char * in , const char * prefix)', 1015, 1053), ('normalize_path_copy_len( char * dst , const char * src , int * prefix_len)', 1080, 1164), ('normalize_path_copy( char * dst , const char * src)', 1166, 1169), ('longest_ancestor_length( const char * path , struct string_list * prefixes)', 1185, 1208), ('chomp_trailing_dir_sep( const char * path , int len)', 1211, 1216), ('strip_path_suffix( const char * path , const char * suffix)', 1223, 1244), ('daemon_avoid_alias( const char * p)', 1246, 1291), ('only_spaces_and_periods( const char * path , size_t len , size_t skip)', 1293, 1305), ('is_ntfs_dotgit( const char * name)', 1307, 1324), ('is_ntfs_dot_generic( const char * name , const char * dotgit_name , size_t len , const char * dotgit_ntfs_shortname_prefix)', 1326, 1382), ('is_ntfs_dot_str( const char * name , const char * dotgit_name , const char * dotgit_ntfs_shortname_prefix)', 1388, 1393), ('is_ntfs_dotgitmodules( const char * name)', 1395, 1398), ('is_ntfs_dotgitignore( const char * name)', 1400, 1403), ('is_ntfs_dotgitattributes( const char * name)', 1405, 1408), ('looks_like_command_line_option( const char * str)', 1410, 1413), ('xdg_config_home( const char * filename)', 1415, 1428), ('xdg_cache_home( const char * filename)', 1430, 1443)], '/home/kevin/thesis/git/path.h': [], '/home/kevin/thesis/git/pathspec.c': [('add_pathspec_matches_against_index( const struct pathspec * pathspec , const struct index_state * istate , char * seen)', 21, 42), ('find_pathspecs_matching_against_index( const struct pathspec * pathspec , const struct index_state * istate)', 52, 58), ('prefix_magic( struct strbuf * sb , int prefixlen , unsigned magic)', 83, 94), ('strcspn_escaped( const char * s , const char * stop)', 96, 111), ('invalid_value_char( const char ch)', 113, 118), ('attr_value_unescape( const char * value)', 120, 139), ('parse_pathspec_attr_match( struct pathspec_item * item , const char * value)', 141, 204), ('get_literal_global( void)', 206, 214), ('get_glob_global( void)', 216, 224), ('get_noglob_global( void)', 226, 234), ('get_icase_global( void)', 236, 244), ('get_global_magic( int element_magic)', 246, 273), ('parse_long_magic( unsigned * magic , int * prefix_len , struct pathspec_item * item , const char * elem)', 282, 336), ('parse_short_magic( unsigned * magic , const char * elem)', 344, 377), ('parse_element_magic( unsigned * magic , int * prefix_len , struct pathspec_item * item , const char * elem)', 379, 391), ('init_pathspec_item( struct pathspec_item * item , unsigned flags , const char * prefix , int prefixlen , const char * elt)', 396, 491), ('pathspec_item_cmp( const void * a_ , const void * b_)', 493, 500), ('unsupported_magic( const char * pattern , unsigned magic)', 502, 527), ('parse_pathspec( struct pathspec * pathspec , unsigned magic_mask , unsigned flags , const char * prefix , const char ** argv)', 529, 615), ('copy_pathspec( struct pathspec * dst , const struct pathspec * src)', 617, 641), ('clear_pathspec( struct pathspec * pathspec)', 643, 661)], '/home/kevin/thesis/git/pathspec.h': [('ps_strncmp( const struct pathspec_item * item , const char * s1 , const char * s2 , size_t n)', 89, 96), ('ps_strcmp( const struct pathspec_item * item , const char * s1 , const char * s2)', 98, 105)], '/home/kevin/thesis/git/pkt-line.c': [('packet_trace_identity( const char * prog)', 10, 13), ('get_trace_prefix( void)', 15, 18), ('packet_trace_pack( const char * buf , unsigned int len , int sideband)', 20, 32), ('packet_trace( const char * buf , unsigned int len , int write)', 34, 82), ('packet_flush( int fd)', 88, 92), ('packet_delim( int fd)', 94, 98), ('packet_flush_gently( int fd)', 100, 106), ('packet_buf_flush( struct strbuf * buf)', 108, 112), ('packet_buf_delim( struct strbuf * buf)', 114, 118), ('set_packet_header( char * buf , const int size)', 120, 130), ('format_packet( struct strbuf * out , const char * fmt , va_list args)', 132, 146), ('packet_write_fmt_1( int fd , int gently , const char * fmt , va_list args)', 148, 164), ('packet_write_fmt( int fd , const char * fmt , ...)', 166, 173), ('packet_write_fmt_gently( int fd , const char * fmt , ...)', 175, 184), ('packet_write_gently( const int fd_out , const char * buf , size_t size)', 186, 201), ('packet_write( int fd_out , const char * buf , size_t size)', 203, 207), ('packet_buf_write( struct strbuf * buf , const char * fmt , ...)', 209, 216), ('packet_buf_write_len( struct strbuf * buf , const char * data , size_t len)', 218, 232), ('write_packetized_from_fd( int fd_in , int fd_out)', 234, 251), ('write_packetized_from_buf( const char * src_in , size_t len , int fd_out)', 253, 272), ('get_packet_data( int fd , char ** src_buf , size_t * src_size , void * dst , unsigned size , int options)', 274, 303), ('packet_length( const char * linelen)', 305, 309), ('packet_read_with_status( int fd , char ** src_buffer , size_t * src_len , char * buffer , unsigned size , int * pktlen , int options)', 311, 357), ('packet_read( int fd , char ** src_buffer , size_t * src_len , char * buffer , unsigned size , int options)', 359, 368), ('packet_read_line_generic( int fd , char ** src , size_t * src_len , int * dst_len)', 370, 380), ('packet_read_line( int fd , int * len_p)', 382, 385), ('packet_read_line_gently( int fd , int * dst_len , char ** dst_line)', 387, 397), ('packet_read_line_buf( char ** src , size_t * src_len , int * dst_len)', 399, 402), ('read_packetized_to_strbuf( int fd_in , struct strbuf * sb_out)', 404, 434), ('packet_reader_init( struct packet_reader * reader , int fd , char * src_buffer , size_t src_len , int options)', 437, 449), ('packet_reader_read( struct packet_reader * reader)', 451, 472), ('packet_reader_peek( struct packet_reader * reader)', 474, 484)], '/home/kevin/thesis/git/pkt-line.h': [], '/home/kevin/thesis/git/preload-index.c': [('preload_index( struct index_state * index , const struct pathspec * pathspec)', 10, 14), ('preload_thread( void * _data)', 35, 74), ('preload_index( struct index_state * index , const struct pathspec * pathspec)', 76, 113), ('read_index_preload( struct index_state * index , const struct pathspec * pathspec)', 116, 123)], '/home/kevin/thesis/git/pretty.c': [('commit_format_is_empty( enum cmit_fmt fmt)', 30, 33), ('save_user_format( struct rev_info * rev , const char * cp , int is_tformat)', 35, 42), ('git_pretty_formats_config( const char * var , const char * value , void * cb)', 44, 88), ('setup_commit_formats( void)', 90, 109), ('find_commit_format_recursive( const char * sought , const char * original , int num_redirections)', 111, 144), ('find_commit_format( const char * sought)', 146, 152), ('get_commit_format( const char * arg , struct rev_info * rev)', 154, 184), ('get_one_line( const char * msg)', 189, 202), ('non_ascii( int ch)', 205, 208), ('has_non_ascii( const char * s)', 210, 220), ('is_rfc822_special( char ch)', 222, 242), ('needs_rfc822_quoting( const char * s , int len)', 244, 251), ('last_line_length( struct strbuf * sb)', 253, 262), ('add_rfc822_quoted( struct strbuf * out , const char * s , int len)', 264, 283), ('is_rfc2047_special( char ch , enum rfc2047_type type)', 290, 340), ('needs_rfc2047_encoding( const char * line , int len , enum rfc2047_type type)', 342, 356), ('add_rfc2047( struct strbuf * sb , const char * line , size_t len , const char * encoding , enum rfc2047_type type)', 358, 404), ('show_ident_date( const struct ident_split * ident , const struct date_mode * mode)', 406, 423), ('pp_user_info( struct pretty_print_context * pp , const char * what , struct strbuf * sb , const char * line , const char * encoding)', 425, 512), ('is_blank_line( const char * line , int * len_p)', 514, 521), ('skip_blank_lines( const char * msg)', 523, 535), ('add_merge_info( const struct pretty_print_context * pp , struct strbuf * sb , const struct commit * commit)', 537, 558), ('get_header( const char * msg , const char * key)', 560, 565), ('replace_encoding_header( char * buf , const char * encoding)', 567, 596), ('logmsg_reencode( const struct commit * commit , char ** commit_encoding , const char * output_encoding)', 598, 664), ('mailmap_name( const char ** email , size_t * email_len , const char ** name , size_t * name_len)', 666, 675), ('format_person_part( struct strbuf * sb , char part , const char * msg , int len , const struct date_mode * dmode)', 677, 743), ('parse_commit_header( struct format_commit_context * context)', 790, 814), ('istitlechar( char c)', 816, 820), ('format_sanitized_subject( struct strbuf * sb , const char * msg)', 822, 848), ('format_subject( struct strbuf * sb , const char * msg , const char * line_separator)', 850, 872), ('parse_commit_message( struct format_commit_context * c)', 874, 887), ('strbuf_wrap( struct strbuf * sb , size_t pos , size_t width , size_t indent1 , size_t indent2)', 889, 900), ('rewrap_message_tail( struct strbuf * sb , struct format_commit_context * c , size_t new_width , size_t new_indent1 , size_t new_indent2)', 902, 916), ('format_reflog_person( struct strbuf * sb , char part , struct reflog_walk_info * log , const struct date_mode * dmode)', 918, 933), ('parse_color( struct strbuf * sb , const char * placeholder , struct format_commit_context * c)', 935, 985), ('parse_padding_placeholder( struct strbuf * sb , const char * placeholder , struct format_commit_context * c)', 987, 1057), ('match_placeholder_arg( const char * to_parse , const char * candidate , const char ** end)', 1059, 1075), ('format_commit_one( struct strbuf * sb , const char * placeholder , void * context)', 1077, 1325), ('format_and_pad_commit( struct strbuf * sb , const char * placeholder , struct format_commit_context * c)', 1327, 1427), ('format_commit_item( struct strbuf * sb , const char * placeholder , void * context)', 1429, 1476), ('userformat_want_item( struct strbuf * sb , const char * placeholder , void * context)', 1478, 1492), ('userformat_find_requirements( const char * fmt , struct userformat_want * w)', 1494, 1505), ('format_commit_message( const struct commit * commit , const char * format , struct strbuf * sb , const struct pretty_print_context * pretty_ctx)', 1507, 1550), ('pp_header( struct pretty_print_context * pp , const char * encoding , const struct commit * commit , const char ** msg_p , struct strbuf * sb)', 1552, 1606), ('pp_title_line( struct pretty_print_context * pp , const char ** msg_p , struct strbuf * sb , const char * encoding , int need_8bit_cte)', 1608, 1671), ('pp_utf8_width( const char * start , const char * end)', 1673, 1685), ('strbuf_add_tabexpand( struct strbuf * sb , int tabwidth , const char * line , int linelen)', 1687, 1721), ('pp_handle_indent( struct pretty_print_context * pp , struct strbuf * sb , int indent , const char * line , int linelen)', 1728, 1737), ('is_mboxrd_from( const char * line , int len)', 1739, 1747), ('pp_remainder( struct pretty_print_context * pp , const char ** msg_p , struct strbuf * sb , int indent)', 1749, 1786), ('pretty_print_commit( struct pretty_print_context * pp , const struct commit * commit , struct strbuf * sb)', 1788, 1863), ('pp_commit_easy( enum cmit_fmt fmt , const struct commit * commit , struct strbuf * sb)', 1865, 1871)], '/home/kevin/thesis/git/pretty.h': [('cmit_fmt_is_mail( enum cmit_fmt fmt)', 52, 55)], '/home/kevin/thesis/git/prio-queue.c': [('compare( struct prio_queue * queue , int i , int j)', 4, 11), ('swap( struct prio_queue * queue , int i , int j)', 13, 16), ('prio_queue_reverse( struct prio_queue * queue)', 18, 26), ('clear_prio_queue( struct prio_queue * queue)', 28, 34), ('prio_queue_put( struct prio_queue * queue , void * thing)', 36, 56), ('prio_queue_get( struct prio_queue * queue)', 58, 87)], '/home/kevin/thesis/git/prio-queue.h': [], '/home/kevin/thesis/git/progress.c': [('progress_interval( int signum)', 43, 46), ('set_progress_signal( void)', 48, 65), ('clear_progress_signal( void)', 67, 73), ('is_foreground_fd( int fd)', 75, 79), ('display( struct progress * progress , uint64_t n , const char * done)', 81, 116), ('throughput_string( struct strbuf * buf , uint64_t total , unsigned int rate)', 118, 127), ('display_throughput( struct progress * progress , uint64_t total)', 129, 189), ('display_progress( struct progress * progress , uint64_t n)', 191, 194), ('start_progress_delay( const char * title , uint64_t total , unsigned delay)', 196, 215), ('start_delayed_progress( const char * title , uint64_t total)', 217, 220), ('start_progress( const char * title , uint64_t total)', 222, 225), ('stop_progress( struct progress ** p_progress)', 227, 230), ('stop_progress_msg( struct progress ** p_progress , const char * msg)', 232, 260)], '/home/kevin/thesis/git/progress.h': [], '/home/kevin/thesis/git/prompt.c': [('do_askpass( const char * cmd , const char * prompt)', 8, 43), ('git_prompt( const char * prompt , int flags)', 45, 76)], '/home/kevin/thesis/git/prompt.h': [], '/home/kevin/thesis/git/protocol.c': [('parse_protocol_version( const char * value)', 5, 15), ('get_protocol_version_config( void)', 17, 31), ('determine_protocol_version_server( void)', 33, 65), ('determine_protocol_version_client( const char * server_response)', 67, 81)], '/home/kevin/thesis/git/protocol.h': [], '/home/kevin/thesis/git/quote.c': [('need_bs_quote( char c)', 7, 10), ('sq_quote_buf( struct strbuf * dst , const char * src)', 24, 44), ('sq_quote_buf_pretty( struct strbuf * dst , const char * src)', 46, 60), ('sq_quotef( struct strbuf * dst , const char * fmt , ...)', 62, 73), ('sq_quote_argv( struct strbuf * dst , const char ** argv)', 75, 85), ('sq_quote_argv_pretty( struct strbuf * dst , const char ** argv)', 87, 95), ('sq_dequote_step( char * arg , char ** next)', 97, 144), ('sq_dequote( char * arg)', 146, 149), ('sq_dequote_to_argv_internal( char * arg , const char ** * argv , int * nr , int * alloc , struct argv_array * array)', 151, 172), ('sq_dequote_to_argv( char * arg , const char ** * argv , int * nr , int * alloc)', 174, 177), ('sq_dequote_to_argv_array( char * arg , struct argv_array * array)', 179, 182), ('sq_must_quote( char c)', 204, 207), ('next_quote_pos( const char * s , ssize_t maxlen)', 212, 221), ('quote_c_style_counted( const char * name , ssize_t maxlen , struct strbuf * sb , FILE * fp , int no_dq)', 236, 288), ('quote_c_style( const char * name , struct strbuf * sb , FILE * fp , int nodq)', 290, 293), ('quote_two_c_style( struct strbuf * sb , const char * prefix , const char * path , int nodq)', 295, 309), ('write_name_quoted( const char * name , FILE * fp , int terminator)', 311, 319), ('write_name_quoted_relative( const char * name , const char * prefix , FILE * fp , int terminator)', 321, 330), ('quote_path_relative( const char * in , const char * prefix , struct strbuf * out)', 333, 343), ('unquote_c_style( struct strbuf * sb , const char * quoted , const char ** endp)', 357, 413), ('perl_quote_buf( struct strbuf * sb , const char * src)', 417, 430), ('python_quote_buf( struct strbuf * sb , const char * src)', 432, 451), ('tcl_quote_buf( struct strbuf * sb , const char * src)', 453, 486), ('basic_regex_quote_buf( struct strbuf * sb , const char * src)', 488, 523)], '/home/kevin/thesis/git/quote.h': [], '/home/kevin/thesis/git/reachable.c': [('update_progress( struct connectivity_progress * cp)', 21, 26), ('add_one_ref( const char * path , const struct object_id * oid , int flag , void * cb_data)', 28, 43), ('mark_object( struct object * obj , const char * name , void * data)', 49, 52), ('mark_commit( struct commit * c , void * data)', 54, 57), ('add_recent_object( const struct object_id * oid , timestamp_t mtime , struct recent_data * data)', 64, 105), ('add_recent_loose( const struct object_id * oid , const char * path , void * data)', 107, 130), ('add_recent_packed( const struct object_id * oid , struct packed_git * p , uint32_t pos , void * data)', 132, 142), ('add_unseen_recent_objects_to_traversal( struct rev_info * revs , timestamp_t timestamp)', 144, 159), ('mark_reachable_objects( struct rev_info * revs , int mark_reflog , timestamp_t mark_recent , struct progress * progress)', 161, 209)], '/home/kevin/thesis/git/reachable.h': [], '/home/kevin/thesis/git/read-cache.c': [('set_index_entry( struct index_state * istate , int nr , struct cache_entry * ce)', 52, 56), ('replace_index_entry( struct index_state * istate , int nr , struct cache_entry * ce)', 58, 70), ('rename_index_entry_at( struct index_state * istate , int nr , const char * new_name)', 72, 88), ('fill_stat_data( struct stat_data * sd , struct stat * st)', 90, 101), ('match_stat_data( const struct stat_data * sd , struct stat * st)', 103, 143), ('fill_stat_cache_info( struct cache_entry * ce , struct stat * st)', 150, 161), ('ce_compare_data( const struct cache_entry * ce , struct stat * st)', 163, 175), ('ce_compare_link( const struct cache_entry * ce , size_t expected_size)', 177, 196), ('ce_compare_gitlink( const struct cache_entry * ce)', 198, 213), ('ce_modified_check_fs( const struct cache_entry * ce , struct stat * st)', 215, 234), ('ce_match_stat_basic( const struct cache_entry * ce , struct stat * st)', 236, 278), ('is_racy_stat( const struct index_state * istate , const struct stat_data * sd)', 280, 293), ('is_racy_timestamp( const struct index_state * istate , const struct cache_entry * ce)', 295, 300), ('match_stat_data_racy( const struct index_state * istate , const struct stat_data * sd , struct stat * st)', 302, 308), ('ie_match_stat( struct index_state * istate , const struct cache_entry * ce , struct stat * st , unsigned int options)', 310, 369), ('ie_modified( struct index_state * istate , const struct cache_entry * ce , struct stat * st , unsigned int options)', 371, 409), ('base_name_compare( const char * name1 , int len1 , int mode1 , const char * name2 , int len2 , int mode2)', 411, 428), ('df_name_compare( const char * name1 , int len1 , int mode1 , const char * name2 , int len2 , int mode2)', 440, 463), ('name_compare( const char * name1 , size_t len1 , const char * name2 , size_t len2)', 465, 476), ('cache_name_stage_compare( const char * name1 , int len1 , int stage1 , const char * name2 , int len2 , int stage2)', 478, 491), ('index_name_stage_pos( const struct index_state * istate , const char * name , int namelen , int stage)', 493, 512), ('index_name_pos( const struct index_state * istate , const char * name , int namelen)', 514, 517), ('remove_index_entry_at( struct index_state * istate , int pos)', 519, 533), ('remove_marked_cache_entries( struct index_state * istate)', 540, 557), ('remove_file_from_index( struct index_state * istate , const char * path)', 559, 569), ('compare_name( struct cache_entry * ce , const char * path , int namelen)', 571, 574), ('index_name_pos_also_unmerged( struct index_state * istate , const char * path , int namelen)', 576, 597), ('different_name( struct cache_entry * ce , struct cache_entry * alias)', 599, 603), ('create_alias_ce( struct index_state * istate , struct cache_entry * ce , struct cache_entry * alias)', 614, 631), ('set_object_name_for_intent_to_add_entry( struct cache_entry * ce)', 633, 639), ('add_to_index( struct index_state * istate , const char * path , struct stat * st , int flags)', 641, 738), ('add_file_to_index( struct index_state * istate , const char * path , int flags)', 740, 746), ('make_cache_entry( unsigned int mode , const unsigned char * sha1 , const char * path , int stage , unsigned int refresh_options)', 748, 774), ('chmod_index_entry( struct index_state * istate , struct cache_entry * ce , char flip)', 783, 804), ('ce_same_name( const struct cache_entry * a , const struct cache_entry * b)', 806, 810), ('verify_dotfile( const char * rest , unsigned mode)', 820, 862), ('verify_path( const char * path , unsigned mode)', 864, 901), ('has_file_name( struct index_state * istate , const struct cache_entry * ce , int pos , int ok_to_replace)', 907, 934), ('strcmp_offset( const char * s1 , const char * s2 , size_t * first_change)', 941, 954), ('has_dir_name( struct index_state * istate , const struct cache_entry * ce , int pos , int ok_to_replace)', 963, 1129), ('check_file_directory_conflict( struct index_state * istate , const struct cache_entry * ce , int pos , int ok_to_replace)', 1140, 1164), ('add_index_entry_with_check( struct index_state * istate , struct cache_entry * ce , int option)', 1166, 1224), ('add_index_entry( struct index_state * istate , struct cache_entry * ce , int option)', 1226, 1251), ('refresh_cache_ent( struct index_state * istate , struct cache_entry * ce , unsigned int options , int * err , int * changed_ret)', 1264, 1368), ('show_file( const char * fmt , const char * name , int in_porcelain , int * first , const char * header_msg)', 1370, 1378), ('refresh_index( struct index_state * istate , unsigned int flags , const struct pathspec * pathspec , char * seen , const char * header_msg)', 1380, 1474), ('refresh_cache_entry( struct cache_entry * ce , unsigned int options)', 1476, 1480), ('get_index_format_default( void)', 1489, 1515), ('verify_hdr( struct cache_header * hdr , unsigned long size)', 1574, 1595), ('read_index_extension( struct index_state * istate , const char * ext , void * data , unsigned long sz)', 1597, 1625), ('hold_locked_index( struct lock_file * lk , int lock_flags)', 1627, 1630), ('read_index( struct index_state * istate)', 1632, 1635), ('cache_entry_from_ondisk( struct ondisk_cache_entry * ondisk , unsigned int flags , const char * name , size_t len)', 1637, 1661), ('expand_name_field( struct strbuf * name , const char * cp_)', 1670, 1682), ('create_from_disk( struct ondisk_cache_entry * ondisk , unsigned long * ent_size , struct strbuf * previous_name)', 1684, 1728), ('check_ce_order( struct index_state * istate)', 1730, 1753), ('tweak_untracked_cache( struct index_state * istate)', 1755, 1769), ('tweak_split_index( struct index_state * istate)', 1771, 1785), ('post_read_index_from( struct index_state * istate)', 1787, 1793), ('do_read_index( struct index_state * istate , const char * path , int must_exist)', 1796, 1886), ('freshen_shared_index( const char * shared_index , int warn)', 1894, 1898), ('read_index_from( struct index_state * istate , const char * path , const char * gitdir)', 1900, 1941), ('is_index_unborn( struct index_state * istate)', 1943, 1946), ('discard_index( struct index_state * istate)', 1948, 1975), ('unmerged_index( const struct index_state * istate)', 1977, 1985), ('ce_write_flush( git_hash_ctx * context , int fd)', 1991, 2001), ('ce_write( git_hash_ctx * context , int fd , void * data , unsigned int len)', 2003, 2023), ('write_index_ext_header( git_hash_ctx * context , int fd , unsigned int ext , unsigned int sz)', 2025, 2032), ('ce_flush( git_hash_ctx * context , int fd , unsigned char * hash)', 2034, 2055), ('ce_smudge_racily_clean_entry( struct cache_entry * ce)', 2057, 2104), ('copy_cache_entry_to_ondisk( struct ondisk_cache_entry * ondisk , struct cache_entry * ce)', 2107, 2132), ('ce_write_entry( git_hash_ctx * c , int fd , struct cache_entry * ce , struct strbuf * previous_name , struct ondisk_cache_entry * ondisk)', 2134, 2192), ('verify_index_from( const struct index_state * istate , const char * path)', 2198, 2231), ('verify_index( const struct index_state * istate)', 2233, 2236), ('has_racy_timestamp( struct index_state * istate)', 2238, 2249), ('update_index_if_able( struct index_state * istate , struct lock_file * lockfile)', 2251, 2258), ('do_write_index( struct index_state * istate , struct tempfile * tempfile , int strip_extensions)', 2267, 2413), ('set_alternate_index_output( const char * name)', 2415, 2418), ('commit_locked_index( struct lock_file * lk)', 2420, 2426), ('do_write_locked_index( struct index_state * istate , struct lock_file * lock , unsigned flags)', 2428, 2437), ('write_split_index( struct index_state * istate , struct lock_file * lock , unsigned flags)', 2439, 2448), ('get_shared_index_expire_date( void)', 2452, 2465), ('should_delete_shared_index( const char * shared_index_path)', 2467, 2482), ('clean_shared_index_files( const char * current_hex)', 2484, 2507), ('write_shared_index( struct index_state * istate , struct tempfile ** temp)', 2509, 2532), ('too_many_not_shared_entries( struct index_state * istate)', 2536, 2562), ('write_locked_index( struct index_state * istate , struct lock_file * lock , unsigned flags)', 2564, 2631), ('read_index_unmerged( struct index_state * istate)', 2640, 2666), ('index_name_is_other( const struct index_state * istate , const char * name , int namelen)', 2677, 2694), ('read_blob_data_from_index( const struct index_state * istate , const char * path , unsigned long * size)', 2696, 2729), ('stat_validity_clear( struct stat_validity * sv)', 2731, 2734), ('stat_validity_check( struct stat_validity * sv , const char * path)', 2736, 2745), ('stat_validity_update( struct stat_validity * sv , int fd)', 2747, 2758), ('move_index_extensions( struct index_state * dst , struct index_state * src)', 2760, 2764)], '/home/kevin/thesis/git/ref-filter.c': [('setup_ref_filter_porcelain_msg( void)', 33, 39), ('strbuf_addf_ret( struct strbuf * sb , int ret , const char * fmt , ...)', 108, 115), ('color_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * color_value , struct strbuf * err)', 117, 132), ('refname_atom_parser_internal( struct refname_atom * atom , const char * arg , const char * name , struct strbuf * err)', 134, 153), ('remote_ref_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 155, 200), ('body_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 202, 209), ('subject_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 211, 218), ('trailers_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 220, 244), ('contents_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 246, 268), ('objectname_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 270, 287), ('refname_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 289, 293), ('parse_align_position( const char * s)', 295, 304), ('align_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 306, 356), ('if_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * err)', 358, 371), ('head_atom_parser( const struct ref_format * format , struct used_atom * atom , const char * arg , struct strbuf * unused_err)', 373, 378), ('parse_ref_filter_atom( const struct ref_format * format , const char * atom , const char * ep , struct strbuf * err)', 452, 518), ('quote_formatting( struct strbuf * s , const char * str , int quote_style)', 520, 539), ('append_atom( struct atom_value * v , struct ref_formatting_state * state , struct strbuf * unused_err)', 541, 555), ('push_stack_element( struct ref_formatting_stack ** stack)', 557, 564), ('pop_stack_element( struct ref_formatting_stack ** stack)', 566, 576), ('end_align_handler( struct ref_formatting_stack ** stack)', 578, 587), ('align_atom_handler( struct atom_value * atomv , struct ref_formatting_state * state , struct strbuf * unused_err)', 589, 599), ('if_then_else_handler( struct ref_formatting_stack ** stack)', 601, 634), ('if_atom_handler( struct atom_value * atomv , struct ref_formatting_state * state , struct strbuf * unused_err)', 636, 650), ('is_empty( const char * s)', 652, 660), ('then_atom_handler( struct atom_value * atomv , struct ref_formatting_state * state , struct strbuf * err)', 662, 692), ('else_atom_handler( struct atom_value * atomv , struct ref_formatting_state * state , struct strbuf * err)', 694, 713), ('end_atom_handler( struct atom_value * atomv , struct ref_formatting_state * state , struct strbuf * err)', 715, 740), ('find_next( const char * cp)', 745, 762), ('verify_ref_format( struct ref_format * format)', 768, 793), ('get_obj( const struct object_id * oid , struct object ** obj , unsigned long * sz , int * eaten)', 801, 811), ('grab_objectname( const char * name , const struct object_id * oid , struct atom_value * v , struct used_atom * atom)', 813, 830), ('grab_common_values( struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 833, 853), ('grab_tag_values( struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 856, 875), ('grab_commit_values( struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 878, 909), ('find_wholine( const char * who , int wholen , const char * buf , unsigned long sz)', 911, 927), ('copy_line( const char * buf)', 929, 933), ('copy_name( const char * buf)', 935, 943), ('copy_email( const char * buf)', 945, 955), ('copy_subject( const char * buf , unsigned long len)', 957, 967), ('grab_date( const char * buf , struct atom_value * v , const char * atomname)', 969, 1004), ('grab_person( const char * who , struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 1007, 1064), ('find_subpos( const char * buf , unsigned long sz , const char ** sub , unsigned long * sublen , const char ** body , unsigned long * bodylen , unsigned long * nonsiglen , const char ** sig , unsigned long * siglen)', 1066, 1108), ('append_lines( struct strbuf * out , const char * buf , unsigned long size , int lines)', 1114, 1132), ('grab_sub_body_contents( struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 1135, 1185), ('fill_missing_values( struct atom_value * val)', 1191, 1199), ('grab_values( struct atom_value * val , int deref , struct object * obj , void * buf , unsigned long sz)', 1208, 1232), ('copy_advance( char * dst , const char * src)', 1234, 1239), ('lstrip_ref_components( const char * refname , int len)', 1241, 1273), ('rstrip_ref_components( const char * refname , int len)', 1275, 1304), ('show_ref( struct refname_atom * atom , const char * refname)', 1306, 1316), ('fill_remote_ref_details( struct used_atom * atom , const char * refname , struct branch * branch , const char ** s)', 1318, 1376), ('get_head_description( void)', 1378, 1417), ('get_symref( struct used_atom * atom , struct ref_array_item * ref)', 1419, 1425), ('get_refname( struct used_atom * atom , struct ref_array_item * ref)', 1427, 1432), ('get_object( struct ref_array_item * ref , const struct object_id * oid , int deref , struct object ** obj , struct strbuf * err)', 1434, 1452), ('populate_value( struct ref_array_item * ref , struct strbuf * err)', 1457, 1604), ('get_ref_atom_value( struct ref_array_item * ref , int atom , struct atom_value ** v , struct strbuf * err)', 1610, 1620), ('in_commit_list( const struct commit_list * want , struct commit * c)', 1656, 1662), ('contains_test( struct commit * candidate , const struct commit_list * want , struct contains_cache * cache)', 1668, 1687), ('push_to_contains_stack( struct commit * candidate , struct contains_stack * contains_stack)', 1689, 1694), ('contains_tag_algo( struct commit * candidate , const struct commit_list * want , struct contains_cache * cache)', 1696, 1735), ('commit_contains( struct ref_filter * filter , struct commit * commit , struct commit_list * list , struct contains_cache * cache)', 1737, 1743), ('match_pattern( const struct ref_filter * filter , const char * refname)', 1751, 1773), ('match_name_as_path( const struct ref_filter * filter , const char * refname)', 1781, 1804), ('filter_pattern_match( struct ref_filter * filter , const char * refname)', 1807, 1814), ('find_longest_prefix( struct strbuf * out , const char * pattern)', 1823, 1831), ('for_each_fullref_in_pattern( struct ref_filter * filter , each_ref_fn cb , void * cb_data , int broken)', 1838, 1876), ('match_points_at( struct oid_array * points_at , const struct object_id * oid , const char * refname)', 1891, 1908), ('new_ref_array_item( const char * refname , const struct object_id * oid)', 1915, 1924), ('ref_array_push( struct ref_array * array , const char * refname , const struct object_id * oid)', 1926, 1936), ('ref_kind_from_refname( const char * refname)', 1938, 1960), ('filter_ref_kind( struct ref_filter * filter , const char * refname)', 1962, 1969), ('ref_filter_handler( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 1975, 2034), ('free_array_item( struct ref_array_item * item)', 2037, 2041), ('ref_array_clear( struct ref_array * array)', 2044, 2052), ('do_merge_filter( struct ref_filter_cbdata * ref_cbdata)', 2054, 2095), ('filter_refs( struct ref_array * array , struct ref_filter * filter , unsigned int type)', 2103, 2149), ('cmp_ref_sorting( struct ref_sorting * s , struct ref_array_item * a , struct ref_array_item * b)', 2151, 2179), ('compare_refs( const void * a_ , const void * b_ , void * ref_sorting)', 2181, 2193), ('ref_array_sort( struct ref_sorting * sorting , struct ref_array * array)', 2195, 2198), ('append_literal( const char * cp , const char * ep , struct ref_formatting_state * state)', 2200, 2220), ('format_ref_array_item( struct ref_array_item * info , const struct ref_format * format , struct strbuf * final_buf , struct strbuf * error_buf)', 2222, 2266), ('show_ref_array_item( struct ref_array_item * info , const struct ref_format * format)', 2268, 2280), ('pretty_print_ref( const char * name , const struct object_id * oid , const struct ref_format * format)', 2282, 2290), ('parse_sorting_atom( const char * atom)', 2292, 2306), ('ref_default_sorting( void)', 2309, 2318), ('parse_ref_sorting( struct ref_sorting ** sorting_tail , const char * arg)', 2320, 2336), ('parse_opt_ref_sorting( const struct option * opt , const char * arg , int unset)', 2338, 2344), ('parse_opt_merge_filter( const struct option * opt , const char * arg , int unset)', 2346, 2372)], '/home/kevin/thesis/git/ref-filter.h': [], '/home/kevin/thesis/git/reflog-walk.c': [('read_one_reflog( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 22, 39), ('free_complete_reflog( struct complete_reflogs * array)', 41, 55), ('read_complete_reflog( const char * ref)', 57, 84), ('get_reflog_recno_by_time( struct complete_reflogs * array , timestamp_t timestamp)', 86, 94), ('init_reflog_walk( struct reflog_walk_info ** info)', 113, 117), ('add_reflog_for_walk( struct reflog_walk_info * info , struct commit * commit , const char * name)', 119, 200), ('get_reflog_selector( struct strbuf * sb , struct reflog_walk_info * reflog_info , const struct date_mode * dmode , int force_date , int shorten)', 202, 234), ('get_reflog_message( struct strbuf * sb , struct reflog_walk_info * reflog_info)', 236, 251), ('get_reflog_ident( struct reflog_walk_info * reflog_info)', 253, 263), ('get_reflog_timestamp( struct reflog_walk_info * reflog_info)', 265, 275), ('show_reflog_message( struct reflog_walk_info * reflog_info , int oneline , const struct date_mode * dmode , int force_date)', 277, 297), ('reflog_walk_empty( struct reflog_walk_info * info)', 299, 302), ('next_reflog_commit( struct commit_reflog * log)', 304, 314), ('log_timestamp( struct commit_reflog * log)', 316, 319), ('next_reflog_entry( struct reflog_walk_info * walk)', 321, 347)], '/home/kevin/thesis/git/reflog-walk.h': [], '/home/kevin/thesis/git/refs.c': [('find_ref_storage_backend( const char * name)', 24, 31), ('ref_storage_backend_exists( const char * name)', 33, 36), ('check_refname_component( const char * refname , int * flags)', 74, 117), ('check_refname_format( const char * refname , int flags)', 119, 145), ('refname_is_safe( const char * refname)', 147, 177), ('ref_resolves_to_object( const char * refname , const struct object_id * oid , unsigned int flags)', 184, 195), ('refs_resolve_refdup( struct ref_store * refs , const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 197, 206), ('resolve_refdup( const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 208, 214), ('refs_read_ref_full( struct ref_store * refs , const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 223, 229), ('read_ref_full( const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 231, 235), ('read_ref( const char * refname , struct object_id * oid)', 237, 240), ('ref_exists( const char * refname)', 242, 245), ('match_ref_pattern( const char * refname , const struct string_list_item * item)', 247, 261), ('ref_filter_match( const char * refname , const struct string_list * include_patterns , const struct string_list * exclude_patterns)', 263, 289), ('filter_refs( const char * refname , const struct object_id * oid , int flags , void * data)', 291, 299), ('peel_object( const struct object_id * name , struct object_id * oid)', 301, 320), ('warn_if_dangling_symref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 329, 349), ('warn_dangling_symref( FILE * fp , const char * msg_fmt , const char * refname)', 351, 360), ('warn_dangling_symrefs( FILE * fp , const char * msg_fmt , const struct string_list * refnames)', 362, 371), ('refs_for_each_tag_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 373, 376), ('for_each_tag_ref( each_ref_fn fn , void * cb_data)', 378, 381), ('refs_for_each_branch_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 383, 386), ('for_each_branch_ref( each_ref_fn fn , void * cb_data)', 388, 391), ('refs_for_each_remote_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 393, 396), ('for_each_remote_ref( each_ref_fn fn , void * cb_data)', 398, 401), ('head_ref_namespaced( each_ref_fn fn , void * cb_data)', 403, 416), ('normalize_glob_ref( struct string_list_item * item , const char * prefix , const char * pattern)', 418, 437), ('for_each_glob_ref_in( each_ref_fn fn , const char * pattern , const char * prefix , void * cb_data)', 439, 466), ('for_each_glob_ref( each_ref_fn fn , const char * pattern , void * cb_data)', 468, 471), ('prettify_refname( const char * name)', 473, 480), ('refname_match( const char * abbrev_name , const char * full_name)', 492, 504), ('expand_ref_prefix( struct argv_array * prefixes , const char * prefix)', 510, 517), ('substitute_branch_name( const char ** string , int * len)', 524, 537), ('dwim_ref( const char * str , int len , struct object_id * oid , char ** ref)', 539, 545), ('expand_ref( const char * str , int len , struct object_id * oid , char ** ref)', 547, 577), ('dwim_log( const char * str , int len , struct object_id * oid , char ** log)', 579, 613), ('is_per_worktree_ref( const char * refname)', 615, 620), ('is_pseudoref_syntax( const char * refname)', 622, 632), ('ref_type( const char * refname)', 634, 641), ('get_files_ref_lock_timeout_ms( void)', 643, 656), ('write_pseudoref( const char * pseudoref , const struct object_id * oid , const struct object_id * old_oid , struct strbuf * err)', 658, 715), ('delete_pseudoref( const char * pseudoref , const struct object_id * old_oid)', 717, 752), ('refs_delete_ref( struct ref_store * refs , const char * msg , const char * refname , const struct object_id * old_oid , unsigned int flags)', 754, 780), ('delete_ref( const char * msg , const char * refname , const struct object_id * old_oid , unsigned int flags)', 782, 787), ('copy_reflog_msg( char * buf , const char * msg)', 789, 808), ('should_autocreate_reflog( const char * refname)', 810, 823), ('is_branch( const char * refname)', 825, 828), ('read_ref_at_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 848, 893), ('read_ref_at_ent_oldest( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 895, 914), ('read_ref_at( const char * refname , unsigned int flags , timestamp_t at_time , int cnt , struct object_id * oid , char ** msg , timestamp_t * cutoff_time , int * cutoff_tz , int * cutoff_cnt)', 916, 946), ('ref_store_transaction_begin( struct ref_store * refs , struct strbuf * err)', 948, 957), ('ref_transaction_begin( struct strbuf * err)', 959, 962), ('ref_transaction_free( struct ref_transaction * transaction)', 964, 990), ('ref_transaction_add_update( struct ref_transaction * transaction , const char * refname , unsigned int flags , const struct object_id * new_oid , const struct object_id * old_oid , const char * msg)', 992, 1016), ('ref_transaction_update( struct ref_transaction * transaction , const char * refname , const struct object_id * new_oid , const struct object_id * old_oid , unsigned int flags , const char * msg , struct strbuf * err)', 1018, 1043), ('ref_transaction_create( struct ref_transaction * transaction , const char * refname , const struct object_id * new_oid , unsigned int flags , const char * msg , struct strbuf * err)', 1045, 1055), ('ref_transaction_delete( struct ref_transaction * transaction , const char * refname , const struct object_id * old_oid , unsigned int flags , const char * msg , struct strbuf * err)', 1057, 1068), ('ref_transaction_verify( struct ref_transaction * transaction , const char * refname , const struct object_id * old_oid , unsigned int flags , struct strbuf * err)', 1070, 1081), ('refs_update_ref( struct ref_store * refs , const char * msg , const char * refname , const struct object_id * new_oid , const struct object_id * old_oid , unsigned int flags , enum action_on_err onerr)', 1083, 1125), ('update_ref( const char * msg , const char * refname , const struct object_id * new_oid , const struct object_id * old_oid , unsigned int flags , enum action_on_err onerr)', 1127, 1134), ('shorten_unambiguous_ref( const char * refname , int strict)', 1136, 1231), ('parse_hide_refs_config( const char * var , const char * value , const char * section)', 1235, 1257), ('ref_is_hidden( const char * refname , const char * refname_full)', 1259, 1290), ('find_descendant_ref( const char * dirname , const struct string_list * extras , const struct string_list * skip)', 1292, 1318), ('refs_rename_ref_available( struct ref_store * refs , const char * old_refname , const char * new_refname)', 1320, 1337), ('refs_head_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 1339, 1349), ('head_ref( each_ref_fn fn , void * cb_data)', 1351, 1354), ('refs_ref_iterator_begin( struct ref_store * refs , const char * prefix , int trim , int flags)', 1356, 1381), ('do_for_each_ref( struct ref_store * refs , const char * prefix , each_ref_fn fn , int trim , int flags , void * cb_data)', 1392, 1403), ('refs_for_each_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 1405, 1408), ('for_each_ref( each_ref_fn fn , void * cb_data)', 1410, 1413), ('refs_for_each_ref_in( struct ref_store * refs , const char * prefix , each_ref_fn fn , void * cb_data)', 1415, 1419), ('for_each_ref_in( const char * prefix , each_ref_fn fn , void * cb_data)', 1421, 1424), ('for_each_fullref_in( const char * prefix , each_ref_fn fn , void * cb_data , unsigned int broken)', 1426, 1434), ('refs_for_each_fullref_in( struct ref_store * refs , const char * prefix , each_ref_fn fn , void * cb_data , unsigned int broken)', 1436, 1445), ('for_each_replace_ref( struct repository * r , each_ref_fn fn , void * cb_data)', 1447, 1453), ('for_each_namespaced_ref( each_ref_fn fn , void * cb_data)', 1455, 1464), ('refs_for_each_rawref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 1466, 1470), ('for_each_rawref( each_ref_fn fn , void * cb_data)', 1472, 1475), ('refs_read_raw_ref( struct ref_store * ref_store , const char * refname , struct object_id * oid , struct strbuf * referent , unsigned int * type)', 1477, 1482), ('refs_resolve_ref_unsafe( struct ref_store * refs , const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 1485, 1575), ('refs_init_db( struct strbuf * err)', 1578, 1583), ('resolve_ref_unsafe( const char * refname , int resolve_flags , struct object_id * oid , int * flags)', 1585, 1590), ('resolve_gitlink_ref( const char * submodule , const char * refname , struct object_id * oid)', 1592, 1607), ('ref_store_hash_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * keydata)', 1619, 1627), ('alloc_ref_store_hash_entry( const char * name , struct ref_store * refs)', 1629, 1638), ('lookup_ref_store_map( struct hashmap * map , const char * name)', 1650, 1661), ('ref_store_init( const char * gitdir , unsigned int flags)', 1667, 1679), ('get_main_ref_store( struct repository * r)', 1681, 1691), ('register_ref_store_map( struct hashmap * map , const char * type , struct ref_store * refs , const char * name)', 1697, 1707), ('get_submodule_ref_store( const char * submodule)', 1709, 1751), ('get_worktree_ref_store( const struct worktree * wt)', 1753, 1777), ('base_ref_store_init( struct ref_store * refs , const struct ref_storage_be * be)', 1779, 1783), ('refs_pack_refs( struct ref_store * refs , unsigned int flags)', 1786, 1789), ('refs_peel_ref( struct ref_store * refs , const char * refname , struct object_id * oid)', 1791, 1811), ('peel_ref( const char * refname , struct object_id * oid)', 1813, 1816), ('refs_create_symref( struct ref_store * refs , const char * ref_target , const char * refs_heads_master , const char * logmsg)', 1818, 1826), ('create_symref( const char * ref_target , const char * refs_heads_master , const char * logmsg)', 1828, 1833), ('ref_update_reject_duplicates( struct string_list * refnames , struct strbuf * err)', 1835, 1856), ('ref_transaction_prepare( struct ref_transaction * transaction , struct strbuf * err)', 1858, 1885), ('ref_transaction_abort( struct ref_transaction * transaction , struct strbuf * err)', 1887, 1910), ('ref_transaction_commit( struct ref_transaction * transaction , struct strbuf * err)', 1912, 1937), ('refs_verify_refname_available( struct ref_store * refs , const char * refname , const struct string_list * extras , const struct string_list * skip , struct strbuf * err)', 1939, 2026), ('refs_for_each_reflog( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 2028, 2035), ('for_each_reflog( each_ref_fn fn , void * cb_data)', 2037, 2040), ('refs_for_each_reflog_ent_reverse( struct ref_store * refs , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 2042, 2049), ('for_each_reflog_ent_reverse( const char * refname , each_reflog_ent_fn fn , void * cb_data)', 2051, 2056), ('refs_for_each_reflog_ent( struct ref_store * refs , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 2058, 2062), ('for_each_reflog_ent( const char * refname , each_reflog_ent_fn fn , void * cb_data)', 2064, 2069), ('refs_reflog_exists( struct ref_store * refs , const char * refname)', 2071, 2074), ('reflog_exists( const char * refname)', 2076, 2079), ('refs_create_reflog( struct ref_store * refs , const char * refname , int force_create , struct strbuf * err)', 2081, 2085), ('safe_create_reflog( const char * refname , int force_create , struct strbuf * err)', 2087, 2092), ('refs_delete_reflog( struct ref_store * refs , const char * refname)', 2094, 2097), ('delete_reflog( const char * refname)', 2099, 2102), ('refs_reflog_expire( struct ref_store * refs , const char * refname , const struct object_id * oid , unsigned int flags , reflog_expiry_prepare_fn prepare_fn , reflog_expiry_should_prune_fn should_prune_fn , reflog_expiry_cleanup_fn cleanup_fn , void * policy_cb_data)', 2104, 2115), ('reflog_expire( const char * refname , const struct object_id * oid , unsigned int flags , reflog_expiry_prepare_fn prepare_fn , reflog_expiry_should_prune_fn should_prune_fn , reflog_expiry_cleanup_fn cleanup_fn , void * policy_cb_data)', 2117, 2128), ('initial_ref_transaction_commit( struct ref_transaction * transaction , struct strbuf * err)', 2130, 2136), ('refs_delete_refs( struct ref_store * refs , const char * msg , struct string_list * refnames , unsigned int flags)', 2138, 2142), ('delete_refs( const char * msg , struct string_list * refnames , unsigned int flags)', 2144, 2148), ('refs_rename_ref( struct ref_store * refs , const char * oldref , const char * newref , const char * logmsg)', 2150, 2154), ('rename_ref( const char * oldref , const char * newref , const char * logmsg)', 2156, 2159), ('refs_copy_existing_ref( struct ref_store * refs , const char * oldref , const char * newref , const char * logmsg)', 2161, 2165), ('copy_existing_ref( const char * oldref , const char * newref , const char * logmsg)', 2167, 2170)], '/home/kevin/thesis/git/refs.h': [('has_glob_specials( const char * pattern)', 346, 349)], '/home/kevin/thesis/git/refspec.c': [('parse_refspec( struct refspec_item * item , const char * refspec , int fetch)', 22, 125), ('refspec_item_init( struct refspec_item * item , const char * refspec , int fetch)', 127, 133), ('refspec_item_clear( struct refspec_item * item)', 135, 143), ('refspec_init( struct refspec * rs , int fetch)', 145, 149), ('refspec_append( struct refspec * rs , const char * refspec)', 151, 162), ('refspec_appendn( struct refspec * rs , const char ** refspecs , int nr)', 164, 169), ('refspec_clear( struct refspec * rs)', 171, 189), ('valid_fetch_refspec( const char * fetch_refspec_str)', 191, 197), ('refspec_ref_prefixes( const struct refspec * rs , struct argv_array * ref_prefixes)', 199, 227)], '/home/kevin/thesis/git/refspec.h': [], '/home/kevin/thesis/git/remote-curl.c': [('set_option( const char * name , const char * value)', 47, 186), ('parse_git_refs( struct discovery * heads , int for_push)', 200, 229), ('parse_info_refs( struct discovery * heads)', 231, 278), ('free_discovery( struct discovery * d)', 280, 291), ('show_http_message( struct strbuf * type , struct strbuf * charset , struct strbuf * msg)', 293, 318), ('get_protocol_http_header( enum protocol_version version , struct strbuf * header)', 320, 331), ('discover_refs( const char * service , int for_push)', 333, 456), ('get_refs( int for_push)', 458, 468), ('output_refs( struct ref * refs)', 470, 481), ('rpc_out( void * ptr , size_t eltsize , size_t nmemb , void * buffer_)', 503, 524), ('rpc_ioctl( CURL * handle , int cmd , void * clientp)', 527, 546), ('rpc_in( char * ptr , size_t eltsize , size_t nmemb , void * buffer_)', 549, 558), ('run_slot( struct active_request_slot * slot , struct slot_results * results)', 560, 589), ('probe_rpc( struct rpc_state * rpc , struct slot_results * results)', 591, 618), ('xcurl_off_t( ssize_t len)', 620, 624), ('post_rpc( struct rpc_state * rpc)', 626, 785), ('rpc_service( struct rpc_state * rpc , struct discovery * heads)', 787, 857), ('fetch_dumb( int nr_heads , struct ref ** to_fetch)', 859, 882), ('fetch_git( struct discovery * heads , int nr_heads , struct ref ** to_fetch)', 884, 947), ('fetch( int nr_heads , struct ref ** to_fetch)', 949, 956), ('parse_fetch( struct strbuf * buf)', 958, 1008), ('push_dav( int nr_spec , char ** specs)', 1010, 1029), ('push_git( struct discovery * heads , int nr_spec , char ** specs)', 1031, 1080), ('push( int nr_spec , char ** specs)', 1082, 1093), ('parse_push( struct strbuf * buf)', 1095, 1126), ('proxy_state_init( struct proxy_state * p , const char * service_name , enum protocol_version version)', 1144, 1179), ('proxy_state_clear( struct proxy_state * p)', 1181, 1187), ('proxy_in( char * buffer , size_t eltsize , size_t nmemb , void * userdata)', 1194, 1238), ('proxy_out( char * buffer , size_t eltsize , size_t nmemb , void * userdata)', 1240, 1253), ('proxy_request( struct proxy_state * p)', 1256, 1280), ('stateless_connect( const char * service_name)', 1282, 1323), ('cmd_main( int argc , const char ** argv)', 1325, 1413)], '/home/kevin/thesis/git/remote-testsvn.c': [('cmd_capabilities( const char * line)', 37, 44), ('terminate_batch( void)', 46, 51), ('read_ref_note( const struct object_id * oid)', 54, 73), ('parse_rev_note( const char * msg , struct rev_note * res)', 75, 99), ('note2mark_cb( const struct object_id * object_oid , const struct object_id * note_oid , char * note_path , void * cb_data)', 101, 121), ('regenerate_marks( void)', 123, 132), ('check_or_regenerate_marks( int latestrev)', 134, 165), ('cmd_import( const char * line)', 167, 227), ('cmd_list( const char * line)', 229, 234), ('do_command( struct strbuf * line)', 236, 280), ('cmd_main( int argc , const char ** argv)', 282, 336)], '/home/kevin/thesis/git/remote.c': [('valid_remote( const struct remote * remote)', 49, 52), ('alias_url( const char * url , struct rewrites * r)', 54, 78), ('add_url( struct remote * remote , const char * url)', 80, 84), ('add_pushurl( struct remote * remote , const char * pushurl)', 86, 90), ('add_pushurl_alias( struct remote * remote , const char * url)', 92, 97), ('add_url_alias( struct remote * remote , const char * url)', 99, 103), ('remotes_hash_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * keydata)', 110, 123), ('init_remotes_hash( void)', 125, 129), ('make_remote( const char * name , int len)', 131, 162), ('add_merge( struct branch * branch , const char * name)', 164, 169), ('make_branch( const char * name , int len)', 171, 193), ('make_rewrite( struct rewrites * r , const char * base , int len)', 195, 220), ('add_instead_of( struct rewrite * rewrite , const char * instead_of)', 222, 228), ('skip_spaces( const char * s)', 230, 235), ('read_remotes_file( struct remote * remote)', 237, 260), ('read_branches_file( struct remote * remote)', 262, 308), ('handle_config( const char * key , const char * value , void * cb)', 310, 431), ('alias_all_urls( void)', 433, 450), ('read_config( void)', 452, 471), ('valid_remote_nick( const char * name)', 473, 483), ('remote_for_branch( struct branch * branch , int * explicit)', 485, 495), ('pushremote_for_branch( struct branch * branch , int * explicit)', 497, 510), ('remote_ref_for_branch( struct branch * branch , int for_push , int * explicit)', 512, 539), ('remote_get_1( const char * name , const char *(*get_default)(structbranch*,int*))', 541, 566), ('remote_get( const char * name)', 568, 571), ('pushremote_get( const char * name)', 573, 576), ('remote_is_configured( struct remote * remote , int in_repo)', 578, 585), ('for_each_remote( each_remote_fn fn , void * priv)', 587, 598), ('handle_duplicate( struct ref * ref1 , struct ref * ref2)', 600, 626), ('ref_remove_duplicates( struct ref * ref_map)', 628, 660), ('remote_has_url( struct remote * remote , const char * url)', 662, 670), ('match_name_with_pattern( const char * key , const char * name , const char * value , char ** result)', 672, 698), ('query_refspecs_multiple( struct refspec * rs , struct refspec_item * query , struct string_list * results)', 700, 726), ('query_refspecs( struct refspec * rs , struct refspec_item * query)', 728, 757), ('apply_refspecs( struct refspec * rs , const char * name)', 759, 770), ('remote_find_tracking( struct remote * remote , struct refspec_item * refspec)', 772, 775), ('alloc_ref_with_prefix( const char * prefix , size_t prefixlen , const char * name)', 777, 785), ('alloc_ref( const char * name)', 787, 790), ('copy_ref( const struct ref * ref)', 792, 806), ('copy_ref_list( const struct ref * ref)', 808, 818), ('free_ref( struct ref * ref)', 820, 828), ('free_refs( struct ref * ref)', 830, 838), ('ref_compare_name( const void * va , const void * vb)', 840, 844), ('ref_list_get_next( const void * a)', 846, 849), ('ref_list_set_next( void * a , void * next)', 851, 854), ('sort_ref_list( struct ref ** l , int(*cmp)(constvoid*,constvoid*))', 856, 859), ('count_refspec_match( const char * pattern , struct ref * refs , struct ref ** matched_ref)', 861, 915), ('tail_link_ref( struct ref * ref , struct ref ** * tail)', 917, 923), ('alloc_delete_ref( void)', 925, 930), ('try_explicit_object_name( const char * name , struct ref ** match)', 932, 951), ('make_linked_ref( const char * name , struct ref ** * tail)', 953, 958), ('guess_ref( const char * name , struct ref * peer)', 960, 978), ('match_explicit_lhs( struct ref * src , struct refspec_item * rs , struct ref ** match , int * allocated_match)', 980, 1003), ('match_explicit( struct ref * src , struct ref * dst , struct ref ** * dst_tail , struct refspec_item * rs)', 1005, 1073), ('match_explicit_refs( struct ref * src , struct ref * dst , struct ref ** * dst_tail , struct refspec * rs)', 1075, 1082), ('get_ref_match( const struct refspec * rs , const struct ref * ref , int send_mirror , int direction , const struct refspec_item ** ret_pat)', 1084, 1130), ('tail_ref( struct ref ** head)', 1132, 1138), ('add_to_tips( struct tips * tips , const struct object_id * oid)', 1145, 1157), ('add_missing_tags( struct ref * src , struct ref ** dst , struct ref ** * dst_tail)', 1159, 1234), ('find_ref_by_name( const struct ref * list , const char * name)', 1236, 1242), ('prepare_ref_index( struct string_list * ref_index , struct ref * ref)', 1244, 1250), ('check_push_refs( struct ref * src , struct refspec * rs)', 1258, 1273), ('match_push_refs( struct ref * src , struct ref ** dst , struct refspec * rs , int flags)', 1283, 1371), ('set_ref_status_for_push( struct ref * remote_refs , int send_mirror , int force_update)', 1373, 1453), ('set_merge( struct branch * ret)', 1455, 1490), ('branch_get( const char * name)', 1492, 1503), ('branch_has_merge_config( struct branch * branch)', 1505, 1508), ('branch_merge_matches( struct branch * branch , int i , const char * refname)', 1510, 1517), ('error_buf( struct strbuf * err , const char * fmt , ...)', 1520, 1529), ('branch_get_upstream( struct branch * branch , struct strbuf * err)', 1531, 1556), ('tracking_for_push_dest( struct remote * remote , const char * refname , struct strbuf * err)', 1558, 1570), ('branch_get_push_1( struct branch * branch , struct strbuf * err)', 1572, 1630), ('branch_get_push( struct branch * branch , struct strbuf * err)', 1632, 1640), ('ignore_symref_update( const char * refname)', 1642, 1649), ('get_expanded_map( const struct ref * remote_refs , const struct refspec_item * refspec)', 1658, 1685), ('find_ref_by_name_abbrev( const struct ref * refs , const char * name)', 1687, 1695), ('get_remote_ref( const struct ref * remote_refs , const char * name)', 1697, 1705), ('get_local_ref( const char * name)', 1707, 1721), ('get_fetch_map( const struct ref * remote_refs , const struct refspec_item * refspec , struct ref ** * tail , int missing_ok)', 1723, 1770), ('resolve_remote_symref( struct ref * ref , struct ref * list)', 1772, 1782), ('unmark_and_free( struct commit_list * list , unsigned int mark)', 1784, 1790), ('ref_newer( const struct object_id * new_oid , const struct object_id * old_oid)', 1792, 1829), ('stat_tracking_info( struct branch * branch , int * num_ours , int * num_theirs , const char ** upstream_name , enum ahead_behind_flags abf)', 1847, 1916), ('format_tracking_info( struct branch * branch , struct strbuf * sb , enum ahead_behind_flags abf)', 1921, 1991), ('one_local_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 1993, 2008), ('get_local_heads( void)', 2010, 2016), ('guess_remote_head( const struct ref * head , const struct ref * refs , int all)', 2018, 2057), ('get_stale_heads_cb( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 2065, 2101), ('get_stale_heads( struct refspec * rs , struct ref * fetch_map)', 2103, 2118), ('clear_cas_option( struct push_cas_option * cas)', 2123, 2131), ('add_cas_entry( struct push_cas_option * cas , const char * refname , size_t refnamelen)', 2133, 2143), ('parse_push_cas_option( struct push_cas_option * cas , const char * arg , int unset)', 2145, 2172), ('parseopt_push_cas_option( const struct option * opt , const char * arg , int unset)', 2174, 2177), ('is_empty_cas( const struct push_cas_option * cas)', 2179, 2182), ('remote_tracking( struct remote * remote , const char * refname , struct object_id * oid)', 2190, 2201), ('apply_cas( struct push_cas_option * cas , struct remote * remote , struct ref * ref)', 2203, 2229), ('apply_push_cas( struct push_cas_option * cas , struct remote * remote , struct ref * remote_refs)', 2231, 2238)], '/home/kevin/thesis/git/remote.h': [], '/home/kevin/thesis/git/replace-object.c': [('register_replace_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 9, 32), ('prepare_replace_object( struct repository * r)', 34, 44), ('do_lookup_replace_object( struct repository * r , const struct object_id * oid)', 56, 73)], '/home/kevin/thesis/git/replace-object.h': [('lookup_replace_object( struct repository * r , const struct object_id * oid)', 26, 34)], '/home/kevin/thesis/git/repository.c': [('initialize_the_repository( void)', 11, 18), ('expand_base_dir( char ** out , const char * in , const char * base_dir , const char * def_in)', 20, 28), ('repo_set_commondir( struct repository * repo , const char * commondir)', 30, 45), ('repo_set_gitdir( struct repository * repo , const char * root , const struct set_gitdir_args * o)', 47, 71), ('repo_set_hash_algo( struct repository * repo , int hash_algo)', 73, 76), ('repo_init_gitdir( struct repository * repo , const char * gitdir)', 82, 108), ('repo_set_worktree( struct repository * repo , const char * path)', 110, 113), ('read_and_verify_repository_format( struct repository_format * format , const char * commondir)', 115, 132), ('repo_init( struct repository * repo , const char * gitdir , const char * worktree)', 138, 163), ('repo_submodule_init( struct repository * submodule , struct repository * superproject , const char * path)', 170, 215), ('repo_clear( struct repository * repo)', 217, 244), ('repo_read_index( struct repository * repo)', 246, 252)], '/home/kevin/thesis/git/repository.h': [], '/home/kevin/thesis/git/rerere.c': [('free_rerere_dirs( void)', 36, 45), ('free_rerere_id( struct string_list_item * item)', 47, 50), ('rerere_id_hex( const struct rerere_id * id)', 52, 55), ('fit_variant( struct rerere_dir * rr_dir , int variant)', 57, 66), ('assign_variant( struct rerere_id * id)', 68, 81), ('rerere_path( const struct rerere_id * id , const char * file)', 83, 93), ('is_rr_file( const char * name , const char * filename , int * variant)', 95, 112), ('scan_rerere_dir( struct rerere_dir * rr_dir)', 114, 133), ('rerere_dir_sha1( size_t i , void * table)', 135, 139), ('find_rerere_dir( const char * hex)', 141, 168), ('has_rerere_resolution( const struct rerere_id * id)', 170, 178), ('new_rerere_id_hex( char * hex)', 180, 186), ('new_rerere_id( unsigned char * sha1)', 188, 191), ('read_rr( struct string_list * rr)', 200, 235), ('write_rr( struct string_list * rr , int out_fd)', 239, 269), ('ferr_write( const void * p , size_t count , FILE * fp , int * err)', 286, 292), ('ferr_puts( const char * s , FILE * fp , int * err)', 294, 297), ('rerere_io_putstr( const char * str , struct rerere_io * io)', 299, 303), ('rerere_io_putconflict( int ch , int size , struct rerere_io * io)', 308, 335), ('rerere_io_putmem( const char * mem , size_t sz , struct rerere_io * io)', 337, 341), ('rerere_file_getline( struct strbuf * sb , struct rerere_io * io_)', 354, 358), ('is_cmarker( char * buf , int marker_char , int marker_size)', 365, 385), ('handle_path( unsigned char * sha1 , struct rerere_io * io , int marker_size)', 402, 470), ('handle_file( const char * path , unsigned char * sha1 , const char * output)', 476, 515), ('check_one_conflict( int i , int * type)', 525, 554), ('find_conflict( struct string_list * conflict)', 567, 581), ('rerere_remaining( struct string_list * merge_rr)', 598, 622), ('try_merge( const struct rerere_id * id , const char * path , mmfile_t * cur , mmbuffer_t * result)', 629, 649), ('merge( const struct rerere_id * id , const char * path)', 661, 704), ('update_paths( struct string_list * update)', 706, 724), ('remove_variant( struct rerere_id * id)', 726, 731), ('do_rerere_one_path( struct string_list_item * rr_item , struct string_list * update)', 740, 810), ('do_plain_rerere( struct string_list * rr , int fd)', 812, 858), ('git_rerere_config( void)', 860, 865), ('is_rerere_enabled( void)', 869, 883), ('setup_rerere( struct string_list * merge_rr , int flags)', 885, 902), ('rerere( int flags)', 909, 920), ('rerere_mem_getline( struct strbuf * sb , struct rerere_io * io_)', 934, 952), ('handle_cache( const char * path , unsigned char * sha1 , const char * output)', 954, 1018), ('rerere_forget_one_path( const char * path , struct string_list * rr)', 1020, 1097), ('rerere_forget( struct pathspec * pathspec)', 1099, 1127), ('rerere_created_at( struct rerere_id * id)', 1133, 1138), ('rerere_last_used_at( struct rerere_id * id)', 1140, 1145), ('unlink_rr_item( struct rerere_id * id)', 1150, 1155), ('prune_one( struct rerere_id * id , timestamp_t cutoff_resolve , timestamp_t cutoff_noresolve)', 1157, 1174), ('rerere_gc( struct string_list * rr)', 1176, 1225), ('rerere_clear( struct string_list * merge_rr)', 1234, 1250)], '/home/kevin/thesis/git/rerere.h': [], '/home/kevin/thesis/git/resolve-undo.c': [('record_resolve_undo( struct index_state * istate , struct cache_entry * ce)', 7, 29), ('resolve_undo_write( struct strbuf * sb , struct string_list * resolve_undo)', 31, 50), ('resolve_undo_read( const char * data , unsigned long size)', 52, 104), ('resolve_undo_clear_index( struct index_state * istate)', 106, 115), ('unmerge_index_entry_at( struct index_state * istate , int pos)', 117, 164), ('unmerge_marked_index( struct index_state * istate)', 166, 178), ('unmerge_index( struct index_state * istate , const struct pathspec * pathspec)', 180, 193)], '/home/kevin/thesis/git/resolve-undo.h': [], '/home/kevin/thesis/git/revision.c': [('show_object_with_name( FILE * out , struct object * obj , const char * name)', 32, 40), ('mark_blob_uninteresting( struct blob * blob)', 42, 49), ('mark_tree_contents_uninteresting( struct tree * tree)', 51, 79), ('mark_tree_uninteresting( struct tree * tree)', 81, 93), ('commit_stack_push( struct commit_stack * stack , struct commit * commit)', 101, 105), ('commit_stack_pop( struct commit_stack * stack)', 107, 110), ('commit_stack_clear( struct commit_stack * stack)', 112, 116), ('mark_one_parent_uninteresting( struct commit * commit , struct commit_stack * pending)', 118, 137), ('mark_parents_uninteresting( struct commit * commit)', 139, 152), ('add_pending_object_with_path( struct rev_info * revs , struct object * obj , const char * name , unsigned mode , const char * path)', 154, 176), ('add_pending_object_with_mode( struct rev_info * revs , struct object * obj , const char * name , unsigned mode)', 178, 183), ('add_pending_object( struct rev_info * revs , struct object * obj , const char * name)', 185, 189), ('add_head_to_pending( struct rev_info * revs)', 191, 201), ('get_reference( struct rev_info * revs , const char * name , const struct object_id * oid , unsigned int flags)', 203, 219), ('add_pending_oid( struct rev_info * revs , const char * name , const struct object_id * oid , unsigned int flags)', 221, 226), ('handle_commit( struct rev_info * revs , struct object_array_entry * entry)', 228, 307), ('everybody_uninteresting( struct commit_list * orig , struct commit ** interesting_cache)', 309, 330), ('relevant_commit( struct commit * commit)', 358, 361), ('one_relevant_parent( const struct rev_info * revs , struct commit_list * orig)', 368, 404), ('file_add_remove( struct diff_options * options , int addremove , unsigned mode , const struct object_id * oid , int oid_valid , const char * fullpath , unsigned dirty_submodule)', 425, 437), ('file_change( struct diff_options * options , unsigned old_mode , unsigned new_mode , const struct object_id * old_oid , const struct object_id * new_oid , int old_oid_valid , int new_oid_valid , const char * fullpath , unsigned old_dirty_submodule , unsigned new_dirty_submodule)', 439, 449), ('rev_compare_tree( struct rev_info * revs , struct commit * parent , struct commit * commit)', 451, 486), ('rev_same_tree_as_empty( struct rev_info * revs , struct commit * commit)', 488, 501), ('initialise_treesame( struct rev_info * revs , struct commit * commit)', 508, 515), ('compact_treesame( struct rev_info * revs , struct commit * commit , unsigned nth_parent)', 524, 569), ('update_treesame( struct rev_info * revs , struct commit * commit)', 571, 599), ('limiting_can_increase_treesame( const struct rev_info * revs)', 601, 614), ('try_to_simplify_commit( struct rev_info * revs , struct commit * commit)', 616, 741), ('commit_list_insert_by_date_cached( struct commit * p , struct commit_list ** head , struct commit_list * cached_base , struct commit_list ** cache)', 743, 755), ('add_parents_to_list( struct rev_info * revs , struct commit * commit , struct commit_list ** list , struct commit_list ** cache_ptr)', 757, 838), ('cherry_pick_list( struct commit_list * list , struct rev_info * revs)', 840, 914), ('still_interesting( struct commit_list * src , timestamp_t date , int slop , struct commit ** interesting_cache)', 919, 944), ('limit_to_ancestry( struct commit_list * bottom , struct commit_list * list)', 953, 1014), ('collect_bottom_commits( struct commit_list * list)', 1024, 1031), ('limit_left_right( struct commit_list * list , struct rev_info * revs)', 1034, 1048), ('limit_list( struct rev_info * revs)', 1050, 1122), ('add_rev_cmdline( struct rev_info * revs , struct object * item , const char * name , int whence , unsigned flags)', 1128, 1143), ('add_rev_cmdline_list( struct rev_info * revs , struct commit_list * commit_list , int whence , unsigned flags)', 1145, 1156), ('ref_excluded( struct string_list * ref_excludes , const char * path)', 1166, 1177), ('handle_one_ref( const char * path , const struct object_id * oid , int flag , void * cb_data)', 1179, 1192), ('init_all_refs_cb( struct all_refs_cb * cb , struct rev_info * revs , unsigned flags)', 1194, 1201), ('clear_ref_exclusion( struct string_list ** ref_excludes_p)', 1203, 1210), ('add_ref_exclusion( struct string_list ** ref_excludes_p , const char * exclude)', 1212, 1219), ('handle_refs( struct ref_store * refs , struct rev_info * revs , unsigned flags , int(*for_each)(structref_store*,each_ref_fn,void*))', 1221, 1234), ('handle_one_reflog_commit( struct object_id * oid , void * cb_data)', 1236, 1252), ('handle_one_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 1254, 1261), ('handle_one_reflog( const char * path , const struct object_id * oid , int flag , void * cb_data)', 1263, 1272), ('add_other_reflogs_to_pending( struct all_refs_cb * cb)', 1274, 1291), ('add_reflogs_to_pending( struct rev_info * revs , unsigned flags)', 1293, 1304), ('add_cache_tree( struct cache_tree * it , struct rev_info * revs , struct strbuf * path)', 1306, 1325), ('do_add_index_objects_to_pending( struct rev_info * revs , struct index_state * istate)', 1327, 1351), ('add_index_objects_to_pending( struct rev_info * revs , unsigned int flags)', 1353, 1378), ('add_parents_only( struct rev_info * revs , const char * arg_ , int flags , int exclude_parent)', 1380, 1424), ('init_revisions( struct rev_info * revs , const char * prefix)', 1426, 1462), ('add_pending_commit_list( struct rev_info * revs , struct commit_list * commit_list , unsigned int flags)', 1464, 1474), ('prepare_show_merge( struct rev_info * revs)', 1476, 1518), ('dotdot_missing( const char * arg , char * dotdot , struct rev_info * revs , int symmetric)', 1520, 1530), ('handle_dotdot_1( const char * arg , char * dotdot , struct rev_info * revs , int flags , int cant_be_filename , struct object_context * a_oc , struct object_context * b_oc)', 1532, 1604), ('handle_dotdot( const char * arg , struct rev_info * revs , int flags , int cant_be_filename)', 1606, 1629), ('handle_revision_arg( const char * arg_ , struct rev_info * revs , int flags , unsigned revarg_opt)', 1631, 1702), ('read_pathspec_from_stdin( struct rev_info * revs , struct strbuf * sb , struct argv_array * prune)', 1704, 1709), ('read_revisions_from_stdin( struct rev_info * revs , struct argv_array * prune)', 1711, 1742), ('add_grep( struct rev_info * revs , const char * ptn , enum grep_pat_token what)', 1744, 1747), ('add_header_grep( struct rev_info * revs , enum grep_header_field field , const char * pattern)', 1749, 1752), ('add_message_grep( struct rev_info * revs , const char * pattern)', 1754, 1757), ('handle_revision_opt( struct rev_info * revs , int argc , const char ** argv , int * unkc , const char ** unkv)', 1759, 2134), ('parse_revision_opt( struct rev_info * revs , struct parse_opt_ctx_t * ctx , const struct option * options , const char * const usagestr [ ])', 2136, 2148), ('for_each_bisect_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data , const char * term)', 2150, 2159), ('for_each_bad_bisect_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 2161, 2164), ('for_each_good_bisect_ref( struct ref_store * refs , each_ref_fn fn , void * cb_data)', 2166, 2169), ('handle_revision_pseudo_opt( const char * submodule , struct rev_info * revs , int argc , const char ** argv , int * flags)', 2171, 2280), ('diagnose_missing_default( const char * def)', 2282, 2294), ('setup_revisions( int argc , const char ** argv , struct rev_info * revs , struct setup_revision_opt * opt)', 2303, 2495), ('add_child( struct rev_info * revs , struct commit * parent , struct commit * child)', 2497, 2503), ('remove_duplicate_parents( struct rev_info * revs , struct commit * commit)', 2505, 2532), ('locate_simplify_state( struct rev_info * revs , struct commit * commit)', 2538, 2548), ('mark_redundant_parents( struct rev_info * revs , struct commit * commit)', 2550, 2584), ('mark_treesame_root_parents( struct rev_info * revs , struct commit * commit)', 2586, 2600), ('leave_one_treesame_to_parent( struct rev_info * revs , struct commit * commit)', 2607, 2667), ('remove_marked_parents( struct rev_info * revs , struct commit * commit)', 2669, 2695), ('simplify_one( struct rev_info * revs , struct commit * commit , struct commit_list ** tail)', 2697, 2806), ('simplify_merges( struct rev_info * revs)', 2808, 2850), ('set_children( struct rev_info * revs)', 2852, 2862), ('reset_revision_walk( void)', 2864, 2867), ('mark_uninteresting( const struct object_id * oid , struct packed_git * pack , uint32_t pos , void * unused)', 2869, 2877), ('prepare_revision_walk( struct rev_info * revs)', 2879, 2927), ('rewrite_one( struct rev_info * revs , struct commit ** pp)', 2929, 2948), ('rewrite_parents( struct rev_info * revs , struct commit * commit , rewrite_parent_fn_t rewrite_parent)', 2950, 2969), ('commit_rewrite_person( struct strbuf * buf , const char * what , struct string_list * mailmap)', 2971, 3014), ('commit_match( struct commit * commit , struct rev_info * opt)', 3016, 3078), ('want_ancestry( const struct rev_info * revs)', 3080, 3083), ('comparison_date( const struct rev_info * revs , struct commit * commit)', 3089, 3095), ('get_commit_action( struct rev_info * revs , struct commit * commit)', 3097, 3139), ('save_parents( struct rev_info * revs , struct commit * commit)', 3149, 3175), ('free_saved_parents( struct rev_info * revs)', 3177, 3181), ('get_saved_parents( struct rev_info * revs , const struct commit * commit)', 3183, 3194), ('simplify_commit( struct rev_info * revs , struct commit * commit)', 3196, 3214), ('track_linear( struct rev_info * revs , struct commit * commit)', 3216, 3235), ('get_revision_1( struct rev_info * revs)', 3237, 3284), ('entry_unshown( struct object_array_entry * entry , void * cb_data_unused)', 3290, 3293), ('gc_boundary( struct object_array * array)', 3299, 3303), ('create_boundary_commit_list( struct rev_info * revs)', 3305, 3344), ('get_revision_internal( struct rev_info * revs)', 3346, 3430), ('get_revision( struct rev_info * revs)', 3432, 3464), ('get_revision_mark( const struct rev_info * revs , const struct commit * commit)', 3466, 3484), ('put_revision_mark( const struct rev_info * revs , const struct commit * commit)', 3486, 3493)], '/home/kevin/thesis/git/revision.h': [], '/home/kevin/thesis/git/run-command.c': [('child_process_init( struct child_process * child)', 11, 16), ('child_process_clear( struct child_process * child)', 18, 22), ('cleanup_children( int sig , int in_signal)', 32, 72), ('cleanup_children_on_signal( int sig)', 74, 79), ('cleanup_children_on_exit( void)', 81, 84), ('mark_child_for_cleanup( pid_t pid , struct child_process * process)', 86, 99), ('clear_child_for_cleanup( pid_t pid)', 101, 114), ('close_pair( int fd [ 2 ])', 116, 120), ('is_executable( const char * name)', 122, 162), ('locate_in_PATH( const char * file)', 181, 211), ('exists_in_PATH( const char * file)', 213, 218), ('sane_execvp( const char * file , char * const argv [ ])', 220, 243), ('prepare_shell_cmd( struct argv_array * out , const char ** argv)', 245, 270), ('child_die( enum child_errcode err)', 290, 300), ('child_dup2( int fd , int to)', 302, 306), ('child_close( int fd)', 308, 312), ('child_close_pair( int fd [ 2 ])', 314, 318), ('fake_fatal( const char * err , va_list params)', 324, 327), ('child_error_fn( const char * err , va_list params)', 329, 333), ('child_warn_fn( const char * err , va_list params)', 335, 339), ('child_die_fn( const char * err , va_list params)', 341, 346), ('child_err_spew( struct child_process * cmd , struct child_err * cerr)', 349, 381), ('prepare_cmd( struct argv_array * out , const struct child_process * cmd)', 383, 416), ('prep_childenv( const char * const * deltaenv)', 418, 465), ('atfork_prepare( struct atfork_state * as)', 481, 496), ('atfork_parent( struct atfork_state * as)', 498, 509), ('set_cloexec( int fd)', 512, 517), ('wait_or_whine( pid_t pid , const char * argv0 , int in_signal)', 519, 555), ('trace_add_env( struct strbuf * dst , const char * const * deltaenv)', 557, 612), ('trace_run_command( const struct child_process * cp)', 614, 639), ('start_command( struct child_process * cmd)', 641, 947), ('finish_command( struct child_process * cmd)', 949, 954), ('finish_command_in_signal( struct child_process * cmd)', 956, 959), ('run_command( struct child_process * cmd)', 962, 973), ('run_command_v_opt( const char ** argv , int opt)', 975, 978), ('run_command_v_opt_cd_env( const char ** argv , int opt , const char * dir , const char * const * env)', 980, 993), ('run_thread( void * data)', 1001, 1019), ('die_async( const char * err , va_list params)', 1021, 1035), ('async_die_is_recursing( void)', 1037, 1042), ('in_async( void)', 1044, 1049), ('async_exit( int code)', 1051, 1054), ('git_atexit_dispatch( void)', 1066, 1072), ('git_atexit_clear( void)', 1074, 1079), ('git_atexit( void(*handler)(void))', 1082, 1092), ('in_async( void)', 1096, 1099), ('async_exit( int code)', 1101, 1104), ('check_pipe( int err)', 1108, 1119), ('start_async( struct async * async)', 1121, 1234), ('finish_async( struct async * async)', 1236, 1247), ('find_hook( const char * name)', 1249, 1281), ('run_hook_ve( const char * const * env , const char * name , va_list args)', 1283, 1300), ('run_hook_le( const char * const * env , const char * name , ...)', 1302, 1312), ('pump_io_round( struct io_pump * slots , int nr , struct pollfd * pfd)', 1336, 1398), ('pump_io( struct io_pump * slots , int nr)', 1400, 1421), ('pipe_command( struct child_process * cmd , const char * in , size_t in_len , struct strbuf * out , size_t out_hint , struct strbuf * err , size_t err_hint)', 1424, 1470), ('default_start_failure( struct strbuf * out , void * pp_cb , void * pp_task_cb)', 1506, 1511), ('default_task_finished( int result , struct strbuf * out , void * pp_cb , void * pp_task_cb)', 1513, 1519), ('kill_children( struct parallel_processes * pp , int signo)', 1521, 1528), ('handle_children_on_signal( int signo)', 1532, 1537), ('pp_init( struct parallel_processes * pp , int n , get_next_task_fn get_next_task , start_failure_fn start_failure , task_finished_fn task_finished , void * data)', 1539, 1579), ('pp_cleanup( struct parallel_processes * pp)', 1581, 1602), ('pp_start_one( struct parallel_processes * pp)', 1611, 1649), ('pp_buffer_stderr( struct parallel_processes * pp , int output_timeout)', 1651, 1676), ('pp_output( struct parallel_processes * pp)', 1678, 1686), ('pp_collect_finished( struct parallel_processes * pp)', 1688, 1743), ('run_processes_parallel( int n , get_next_task_fn get_next_task , start_failure_fn start_failure , task_finished_fn task_finished , void * pp_cb)', 1745, 1785)], '/home/kevin/thesis/git/run-command.h': [('capture_command( struct child_process * cmd , struct strbuf * out , size_t hint)', 108, 113)], '/home/kevin/thesis/git/send-pack.c': [('option_parse_push_signed( const struct option * opt , const char * arg , int unset)', 18, 38), ('feed_object( const struct object_id * oid , FILE * fh , int negative)', 40, 49), ('pack_objects( int fd , struct ref * refs , struct oid_array * extra , struct send_pack_args * args)', 54, 135), ('receive_unpack_status( int in)', 137, 147), ('receive_status( int in , struct ref * refs)', 149, 200), ('sideband_demux( int in , int out , void * data)', 202, 211), ('advertise_shallow_grafts_cb( const struct commit_graft * graft , void * cb)', 213, 219), ('advertise_shallow_grafts_buf( struct strbuf * sb)', 221, 226), ('check_to_send_update( const struct ref * ref , const struct send_pack_args * args)', 231, 250), ('next_line( const char * line , size_t len)', 258, 264), ('generate_push_cert( struct strbuf * req_buf , const struct ref * remote_refs , struct send_pack_args * args , const char * cap_string , const char * push_cert_nonce)', 266, 322), ('atomic_push_failure( struct send_pack_args * args , struct ref * remote_refs , struct ref * failing_ref)', 325, 345), ('reject_invalid_nonce( const char * nonce , int len)', 349, 367), ('send_pack( struct send_pack_args * args , int fd [ ] , struct child_process * conn , struct ref * remote_refs , struct oid_array * extra_have)', 369, 624)], '/home/kevin/thesis/git/send-pack.h': [], '/home/kevin/thesis/git/sequencer.c': [('git_sequencer_config( const char * k , const char * v , void * cb)', 154, 191), ('sequencer_init_config( struct replay_opts * opts)', 193, 197), ('is_rebase_i( const struct replay_opts * opts)', 199, 202), ('get_dir( const struct replay_opts * opts)', 204, 209), ('get_todo_path( const struct replay_opts * opts)', 211, 216), ('has_conforming_footer( struct strbuf * sb , struct strbuf * sob , int ignore_footer)', 224, 250), ('gpg_sign_opt_quoted( struct replay_opts * opts)', 252, 260), ('sequencer_remove_state( struct replay_opts * opts)', 262, 295), ('action_name( const struct replay_opts * opts)', 297, 308), ('short_commit_name( struct commit * commit)', 317, 320), ('get_message( struct commit * commit , struct commit_message * out)', 322, 337), ('free_message( struct commit * commit , struct commit_message * msg)', 339, 345), ('print_advice( int show_hint , struct replay_opts * opts)', 347, 371), ('write_message( const void * buf , size_t len , const char * filename , int append_eol)', 373, 395), ('read_oneliner( struct strbuf * buf , const char * path , int skip_if_empty)', 406, 429), ('empty_tree( void)', 431, 434), ('error_dirty_index( struct replay_opts * opts)', 436, 447), ('update_abort_safety_file( void)', 449, 461), ('fast_forward_to( const struct object_id * to , const struct object_id * from , int unborn , struct replay_opts * opts)', 463, 495), ('append_conflicts_hint( struct strbuf * msgbuf)', 497, 512), ('do_recursive_merge( struct commit * base , struct commit * next , const char * base_label , const char * next_label , struct object_id * head , struct strbuf * msgbuf , struct replay_opts * opts)', 514, 570), ('get_cache_tree_oid( void)', 572, 584), ('is_index_unchanged( void)', 586, 611), ('write_author_script( const char * message)', 613, 657), ('read_env_script( struct argv_array * env)', 663, 688), ('get_author( const char * message)', 690, 700), ('read_author_ident( struct strbuf * buf)', 703, 746), ('run_git_commit( const char * defmsg , struct replay_opts * opts , unsigned int flags)', 781, 879), ('rest_is_empty( const struct strbuf * sb , int start)', 881, 905), ('message_is_empty( const struct strbuf * sb , enum commit_msg_cleanup_mode cleanup_mode)', 911, 917), ('template_untouched( const struct strbuf * sb , const char * template_file , enum commit_msg_cleanup_mode cleanup_mode)', 923, 940), ('update_head_with_reflog( const struct commit * old_head , const struct object_id * new_head , const char * action , const struct strbuf * msg , struct strbuf * err)', 942, 977), ('run_rewrite_hook( const struct object_id * oldoid , const struct object_id * newoid)', 979, 1008), ('commit_post_rewrite( const struct commit * old_head , const struct object_id * new_head)', 1010, 1022), ('run_prepare_commit_msg_hook( struct strbuf * msg , const char * commit)', 1024, 1047), ('implicit_ident_advice( void)', 1074, 1088), ('print_commit_summary( const char * prefix , const struct object_id * oid , unsigned int flags)', 1090, 1166), ('parse_head( struct commit ** head)', 1168, 1189), ('try_to_commit( struct strbuf * msg , const char * author , struct replay_opts * opts , unsigned int flags , struct object_id * oid)', 1200, 1304), ('do_commit( const char * msg_file , const char * author , struct replay_opts * opts , unsigned int flags)', 1306, 1337), ('is_original_commit_empty( struct commit * commit)', 1339, 1357), ('allow_empty( struct replay_opts * opts , struct commit * commit)', 1362, 1395), ('command_to_string( const enum todo_command command)', 1441, 1446), ('command_to_char( const enum todo_command command)', 1448, 1453), ('is_noop( const enum todo_command command)', 1455, 1458), ('is_fixup( enum todo_command command)', 1460, 1463), ('is_pick_or_similar( enum todo_command command)', 1466, 1479), ('update_squash_messages( enum todo_command command , struct commit * commit , struct replay_opts * opts)', 1481, 1570), ('flush_rewritten_pending( void)', 1572, 1594), ('record_in_rewritten( struct object_id * oid , enum todo_command next_command)', 1596, 1608), ('do_pick_commit( enum todo_command command , struct commit * commit , struct replay_opts * opts , int final_fixup)', 1610, 1849), ('prepare_revs( struct replay_opts * opts)', 1851, 1866), ('read_and_refresh_cache( struct replay_opts * opts)', 1868, 1886), ('todo_list_release( struct todo_list * todo_list)', 1911, 1916), ('append_new_todo( struct todo_list * todo_list)', 1918, 1922), ('parse_insn_line( struct todo_item * item , const char * bol , char * eol)', 1924, 2010), ('parse_insn_buffer( char * buf , struct todo_list * todo_list)', 2012, 2044), ('count_commands( struct todo_list * todo_list)', 2046, 2055), ('get_item_line_offset( struct todo_list * todo_list , int index)', 2057, 2061), ('get_item_line( struct todo_list * todo_list , int index)', 2063, 2066), ('get_item_line_length( struct todo_list * todo_list , int index)', 2068, 2072), ('strbuf_read_file_or_whine( struct strbuf * sb , const char * path)', 2074, 2087), ('read_populate_todo( struct todo_list * todo_list , struct replay_opts * opts)', 2089, 2152), ('git_config_string_dup( char ** dest , const char * var , const char * value)', 2154, 2162), ('populate_opts_cb( const char * key , const char * value , void * data)', 2164, 2201), ('read_strategy_opts( struct replay_opts * opts , struct strbuf * buf)', 2203, 2221), ('read_populate_opts( struct replay_opts * opts)', 2223, 2288), ('walk_revs_populate_todo( struct todo_list * todo_list , struct replay_opts * opts)', 2290, 2318), ('create_seq_dir( void)', 2320, 2330), ('save_head( const char * head)', 2332, 2353), ('rollback_is_safe( void)', 2355, 2377), ('reset_for_rollback( const struct object_id * oid)', 2379, 2388), ('rollback_single_pick( void)', 2390, 2402), ('sequencer_rollback( struct replay_opts * opts)', 2404, 2451), ('save_todo( struct todo_list * todo_list , struct replay_opts * opts)', 2453, 2492), ('save_opts( struct replay_opts * opts)', 2494, 2531), ('make_patch( struct commit * commit , struct replay_opts * opts)', 2533, 2575), ('intend_to_amend( void)', 2577, 2587), ('error_with_patch( struct commit * commit , const char * subject , int subject_len , struct replay_opts * opts , int exit_code , int to_amend)', 2589, 2612), ('error_failed_squash( struct commit * commit , struct replay_opts * opts , int subject_len , const char * subject)', 2614, 2625), ('do_exec( const char * command_line)', 2627, 2670), ('safe_append( const char * filename , const char * fmt , ...)', 2672, 2707), ('do_label( const char * name , int len)', 2709, 2747), ('do_reset( const char * name , int len , struct replay_opts * opts)', 2752, 2839), ('do_merge( struct commit * commit , const char * arg , int arg_len , int flags , struct replay_opts * opts)', 2841, 3041), ('is_final_fixup( struct todo_list * todo_list)', 3043, 3056), ('peek_command( struct todo_list * todo_list , int offset)', 3058, 3067), ('apply_autostash( struct replay_opts * opts)', 3069, 3111), ('reflog_message( struct replay_opts * opts , const char * sub_action , const char * fmt , ...)', 3113, 3131), ('pick_commits( struct todo_list * todo_list , struct replay_opts * opts)', 3144, 3395), ('continue_single_pick( void)', 3397, 3405), ('commit_staged_changes( struct replay_opts * opts , struct todo_list * todo_list)', 3407, 3531), ('sequencer_continue( struct replay_opts * opts)', 3533, 3580), ('single_pick( struct commit * cmit , struct replay_opts * opts)', 3582, 3587), ('sequencer_pick_revisions( struct replay_opts * opts)', 3589, 3658), ('append_signoff( struct strbuf * msgbuf , int ignore_footer , unsigned flag)', 3660, 3719), ('labels_cmp( const void * fndata , const struct labels_entry * a , const struct labels_entry * b , const void * key)', 3726, 3730), ('label_oid( struct object_id * oid , const char * label , struct label_state * state)', 3743, 3832), ('make_script_with_merges( struct pretty_print_context * pp , struct rev_info * revs , FILE * out , unsigned flags)', 3834, 4061), ('sequencer_make_script( FILE * out , int argc , const char ** argv , unsigned flags)', 4063, 4122), ('sequencer_add_exec_commands( const char * commands)', 4128, 4162), ('transform_todos( unsigned flags)', 4164, 4219), ('get_missing_commit_check_level( void)', 4225, 4239), ('check_todo_list( void)', 4247, 4327), ('rewrite_file( const char * path , const char * buf , size_t len)', 4329, 4340), ('skip_unnecessary_picks( void)', 4343, 4421), ('subject2item_cmp( const void * fndata , const struct subject2item_entry * a , const struct subject2item_entry * b , const void * key)', 4429, 4434), ('rearrange_squash( void)', 4445, 4600)], '/home/kevin/thesis/git/sequencer.h': [], '/home/kevin/thesis/git/serve.c': [('always_advertise( struct repository * r , struct strbuf * value)', 11, 15), ('agent_advertise( struct repository * r , struct strbuf * value)', 17, 23), ('advertise_capabilities( void)', 62, 90), ('get_capability( const char * key)', 92, 107), ('is_valid_capability( const char * key)', 109, 114), ('is_command( const char * key , struct protocol_capability ** command)', 116, 134), ('has_capability( const struct argv_array * keys , const char * capability , const char ** value)', 136, 154), ('process_request( void)', 161, 229), ('serve( struct serve_options * options)', 232, 258)], '/home/kevin/thesis/git/serve.h': [], '/home/kevin/thesis/git/server-info.c': [('update_info_file( char * path , int(*generate)(FILE*))', 15, 53), ('add_info_ref( const char * path , const struct object_id * oid , int flag , void * cb_data)', 55, 74), ('generate_info_refs( FILE * fp)', 76, 79), ('update_info_refs( int force)', 81, 87), ('find_pack_by_name( const char * name)', 100, 110), ('parse_pack_def( const char * line , int old_cnt)', 115, 126), ('read_pack_info_file( const char * infofile)', 131, 167), ('compare_info( const void * a_ , const void * b_)', 169, 191), ('init_pack_info( const char * infofile , int force)', 193, 234), ('free_pack_info( void)', 236, 242), ('write_pack_info_file( FILE * fp)', 244, 254), ('update_info_packs( int force)', 256, 266), ('update_server_info( int force)', 269, 284)], '/home/kevin/thesis/git/setup.c': [('abspath_part_inside_repo( char * path)', 27, 77), ('prefix_path_gently( const char * prefix , int len , int * remaining_prefix , const char * path)', 90, 117), ('prefix_path( const char * prefix , int len , const char * path)', 119, 125), ('path_inside_repo( const char * prefix , const char * path)', 127, 136), ('check_filename( const char * prefix , const char * arg)', 138, 165), ('die_verify_filename( const char * prefix , const char * arg , int diagnose_misspelt_rev)', 167, 189), ('looks_like_pathspec( const char * arg)', 196, 207), ('verify_filename( const char * prefix , const char * arg , int diagnose_misspelt_rev)', 229, 238), ('verify_non_filename( const char * prefix , const char * arg)', 245, 256), ('get_common_dir( struct strbuf * sb , const char * gitdir)', 258, 267), ('get_common_dir_noenv( struct strbuf * sb , const char * gitdir)', 269, 296), ('is_git_directory( const char * suspect)', 309, 347), ('is_nonbare_repository_dir( struct strbuf * path)', 349, 364), ('is_inside_git_dir( void)', 366, 371), ('is_inside_work_tree( void)', 373, 378), ('setup_work_tree( void)', 380, 403), ('check_repo_format( const char * var , const char * value , void * vdata)', 405, 436), ('check_repository_format_gently( const char * gitdir , struct repository_format * candidate , int * nongit_ok)', 438, 486), ('read_repository_format( struct repository_format * format , const char * path)', 488, 497), ('verify_repository_format( const struct repository_format * format , struct strbuf * err)', 499, 520), ('read_gitfile_error_die( int error_code , const char * path , const char * dir)', 522, 544), ('read_gitfile_gently( const char * path , int * return_error_code)', 556, 626), ('setup_explicit_git_dir( const char * gitdirenv , struct strbuf * cwd , struct repository_format * repo_fmt , int * nongit_ok)', 628, 725), ('setup_discovered_git_dir( const char * gitdir , struct strbuf * cwd , int offset , struct repository_format * repo_fmt , int * nongit_ok)', 727, 772), ('setup_bare_git_dir( struct strbuf * cwd , int offset , struct repository_format * repo_fmt , int * nongit_ok)', 775, 808), ('setup_nongit( const char * cwd , int * nongit_ok)', 810, 818), ('get_device_or_die( const char * path , const char * prefix , int prefix_len)', 820, 830), ('canonicalize_ceiling_entry( struct string_list_item * item , void * cb_data)', 839, 862), ('setup_git_directory_gently_1( struct strbuf * dir , struct strbuf * gitdir , int die_on_error)', 888, 978), ('discover_git_directory( struct strbuf * commondir , struct strbuf * gitdir)', 980, 1027), ('setup_git_directory_gently( int * nongit_ok)', 1029, 1126), ('git_config_perm( const char * var , const char * value)', 1128, 1177), ('check_repository_format( void)', 1179, 1184), ('setup_git_directory( void)', 1192, 1195), ('resolve_gitdir_gently( const char * suspect , int * return_error_code)', 1197, 1202), ('sanitize_stdfds( void)', 1205, 1214), ('daemonize( void)', 1216, 1238)], '/home/kevin/thesis/git/sh-i18n--envsubst.c': [('cmd_main( int argc , const char * argv [ ])', 65, 110), ('find_variables( const char * string , void(*callback)(constchar*var_ptr,size_tvar_len))', 122, 163), ('print_variable( const char * var_ptr , size_t var_len)', 168, 172), ('print_variables( const char * string)', 177, 180), ('string_list_init( string_list_ty * slp)', 195, 200), ('string_list_append( string_list_ty * slp , const char * s)', 204, 215), ('cmp_string( const void * pstr1 , const void * pstr2)', 219, 225), ('string_list_sort( string_list_ty * slp)', 229, 232), ('sorted_string_list_member( const string_list_ty * slp , const char * s)', 236, 264), ('note_variable( const char * var_ptr , size_t var_len)', 273, 278), ('note_variables( const char * string)', 282, 287), ('do_getc( void)', 291, 302), ('do_ungetc( int c)', 305, 309), ('subst_from_stdin( void)', 313, 424)], '/home/kevin/thesis/git/sha1-array.c': [('oid_array_append( struct oid_array * array , const struct object_id * oid)', 5, 10), ('void_hashcmp( const void * a , const void * b)', 12, 15), ('oid_array_sort( struct oid_array * array)', 17, 21), ('sha1_access( size_t index , void * table)', 23, 27), ('oid_array_lookup( struct oid_array * array , const struct object_id * oid)', 29, 34), ('oid_array_clear( struct oid_array * array)', 36, 42), ('oid_array_for_each( struct oid_array * array , for_each_oid_fn fn , void * data)', 45, 59), ('oid_array_for_each_unique( struct oid_array * array , for_each_oid_fn fn , void * data)', 61, 79)], '/home/kevin/thesis/git/sha1-array.h': [], '/home/kevin/thesis/git/sha1-file.c': [('git_hash_sha1_init( git_hash_ctx * ctx)', 57, 60), ('git_hash_sha1_update( git_hash_ctx * ctx , const void * data , size_t len)', 62, 65), ('git_hash_sha1_final( unsigned char * hash , git_hash_ctx * ctx)', 67, 70), ('git_hash_unknown_init( git_hash_ctx * ctx)', 72, 75), ('git_hash_unknown_update( git_hash_ctx * ctx , const void * data , size_t len)', 77, 80), ('git_hash_unknown_final( unsigned char * hash , git_hash_ctx * ctx)', 82, 85), ('empty_tree_oid_hex( void)', 113, 117), ('empty_blob_oid_hex( void)', 119, 123), ('find_cached_object( const struct object_id * oid)', 146, 158), ('get_conv_flags( unsigned flags)', 161, 169), ('mkdir_in_gitdir( const char * path)', 172, 199), ('safe_create_leading_directories( char * path)', 201, 253), ('safe_create_leading_directories_const( const char * path)', 255, 266), ('raceproof_create_file( const char * path , create_file_fn fn , void * cb)', 268, 334), ('fill_sha1_path( struct strbuf * buf , const unsigned char * sha1)', 336, 347), ('sha1_file_name( struct repository * r , struct strbuf * buf , const unsigned char * sha1)', 349, 354), ('alt_scratch_buf( struct alternate_object_database * alt)', 356, 360), ('alt_sha1_path( struct alternate_object_database * alt , const unsigned char * sha1)', 362, 368), ('alt_odb_usable( struct raw_object_store * o , struct strbuf * path , const char * normalized_objdir)', 373, 399), ('link_alt_odb_entry( struct repository * r , const char * entry , const char * relative_base , int depth , const char * normalized_objdir)', 419, 462), ('parse_alt_odb_entry( const char * string , int sep , struct strbuf * out)', 464, 491), ('link_alt_odb_entries( struct repository * r , const char * alt , int sep , const char * relative_base , int depth)', 493, 522), ('read_info_alternates( struct repository * r , const char * relative_base , int depth)', 524, 541), ('alloc_alt_odb( const char * dir)', 543, 553), ('add_to_alternates_file( const char * reference)', 555, 596), ('add_to_alternates_memory( const char * reference)', 598, 608), ('compute_alternate_path( const char * path , struct strbuf * err)', 616, 683), ('foreach_alt_odb( alt_odb_fn fn , void * cb)', 685, 697), ('prepare_alt_odb( struct repository * r)', 699, 708), ('freshen_file( const char * fn)', 711, 716), ('check_and_freshen_file( const char * fn , int freshen)', 725, 732), ('check_and_freshen_local( const struct object_id * oid , int freshen)', 734, 742), ('check_and_freshen_nonlocal( const struct object_id * oid , int freshen)', 744, 754), ('check_and_freshen( const struct object_id * oid , int freshen)', 756, 760), ('has_loose_object_nonlocal( const struct object_id * oid)', 762, 765), ('has_loose_object( const struct object_id * oid)', 767, 770), ('mmap_limit_check( size_t length)', 772, 783), ('xmmap_gently( void * start , size_t length , int prot , int flags , int fd , off_t offset)', 785, 799), ('xmmap( void * start , size_t length , int prot , int flags , int fd , off_t offset)', 801, 808), ('check_object_signature( const struct object_id * oid , void * map , unsigned long size , const char * type)', 816, 856), ('git_open_cloexec( const char * name , int flags)', 858, 883), ('stat_sha1_file( struct repository * r , const unsigned char * sha1 , struct stat * st , const char ** path)', 893, 915), ('open_sha1_file( struct repository * r , const unsigned char * sha1 , const char ** path)', 921, 949), ('map_sha1_file_1( struct repository * r , const char * path , const unsigned char * sha1 , unsigned long * size)', 955, 981), ('map_sha1_file( struct repository * r , const unsigned char * sha1 , unsigned long * size)', 983, 987), ('unpack_sha1_short_header( git_zstream * stream , unsigned char * map , unsigned long mapsize , void * buffer , unsigned long bufsiz)', 989, 1002), ('unpack_sha1_header( git_zstream * stream , unsigned char * map , unsigned long mapsize , void * buffer , unsigned long bufsiz)', 1004, 1018), ('unpack_sha1_header_to_strbuf( git_zstream * stream , unsigned char * map , unsigned long mapsize , void * buffer , unsigned long bufsiz , struct strbuf * header)', 1020, 1054), ('unpack_sha1_rest( git_zstream * stream , void * buffer , unsigned long size , const unsigned char * sha1)', 1056, 1099), ('parse_sha1_header_extended( const char * hdr , struct object_info * oi , unsigned int flags)', 1106, 1165), ('parse_sha1_header( const char * hdr , unsigned long * sizep)', 1167, 1173), ('sha1_loose_object_info( struct repository * r , const unsigned char * sha1 , struct object_info * oi , int flags)', 1175, 1251), ('oid_object_info_extended( struct repository * r , const struct object_id * oid , struct object_info * oi , unsigned flags)', 1255, 1346), ('oid_object_info( struct repository * r , const struct object_id * oid , unsigned long * sizep)', 1349, 1362), ('read_object( const unsigned char * sha1 , enum object_type * type , unsigned long * size)', 1364, 1379), ('pretend_object_file( void * buf , unsigned long len , enum object_type type , struct object_id * oid)', 1381, 1397), ('read_object_file_extended( const struct object_id * oid , enum object_type * type , unsigned long * size , int lookup_replace)', 1404, 1438), ('read_object_with_reference( const struct object_id * oid , const char * required_type_name , unsigned long * size , struct object_id * actual_oid_return)', 1440, 1486), ('write_object_file_prepare( const void * buf , unsigned long len , const char * type , struct object_id * oid , char * hdr , int * hdrlen)', 1488, 1502), ('finalize_object_file( const char * tmpfile , const char * filename)', 1507, 1545), ('write_buffer( int fd , const void * buf , size_t len)', 1547, 1552), ('hash_object_file( const void * buf , unsigned long len , const char * type , struct object_id * oid)', 1554, 1561), ('close_sha1_file( int fd)', 1564, 1570), ('directory_size( const char * filename)', 1573, 1579), ('create_tmpfile( struct strbuf * tmp , const char * filename)', 1588, 1615), ('write_loose_object( const struct object_id * oid , char * hdr , int hdrlen , const void * buf , unsigned long len , time_t mtime)', 1617, 1689), ('freshen_loose_object( const struct object_id * oid)', 1691, 1694), ('freshen_packed_object( const struct object_id * oid)', 1696, 1707), ('write_object_file( const void * buf , unsigned long len , const char * type , struct object_id * oid)', 1709, 1722), ('hash_object_file_literally( const void * buf , unsigned long len , const char * type , struct object_id * oid , unsigned flags)', 1724, 1745), ('force_object_loose( const struct object_id * oid , time_t mtime)', 1747, 1766), ('has_sha1_file_with_flags( const unsigned char * sha1 , int flags)', 1768, 1776), ('has_object_file( const struct object_id * oid)', 1778, 1781), ('has_object_file_with_flags( const struct object_id * oid , int flags)', 1783, 1786), ('check_tree( const void * buf , size_t size)', 1788, 1798), ('check_commit( const void * buf , size_t size)', 1800, 1806), ('check_tag( const void * buf , size_t size)', 1808, 1814), ('index_mem( struct object_id * oid , void * buf , size_t size , enum object_type type , const char * path , unsigned flags)', 1816, 1853), ('index_stream_convert_blob( struct object_id * oid , int fd , const char * path , unsigned flags)', 1855, 1876), ('index_pipe( struct object_id * oid , int fd , enum object_type type , const char * path , unsigned flags)', 1878, 1890), ('index_core( struct object_id * oid , int fd , size_t size , enum object_type type , const char * path , unsigned flags)', 1894, 1920), ('index_stream( struct object_id * oid , int fd , size_t size , enum object_type type , const char * path , unsigned flags)', 1937, 1942), ('index_fd( struct object_id * oid , int fd , struct stat * st , enum object_type type , const char * path , unsigned flags)', 1944, 1966), ('index_path( struct object_id * oid , const char * path , struct stat * st , unsigned flags)', 1968, 1998), ('read_pack_header( int fd , struct pack_header * header)', 2000, 2013), ('assert_oid_type( const struct object_id * oid , enum object_type expect)', 2015, 2023), ('for_each_file_in_obj_subdir( unsigned int subdir_nr , struct strbuf * path , each_loose_object_fn obj_cb , each_loose_cruft_fn cruft_cb , each_loose_subdir_fn subdir_cb , void * data)', 2025, 2091), ('for_each_loose_file_in_objdir_buf( struct strbuf * path , each_loose_object_fn obj_cb , each_loose_cruft_fn cruft_cb , each_loose_subdir_fn subdir_cb , void * data)', 2093, 2110), ('for_each_loose_file_in_objdir( const char * path , each_loose_object_fn obj_cb , each_loose_cruft_fn cruft_cb , each_loose_subdir_fn subdir_cb , void * data)', 2112, 2127), ('loose_from_alt_odb( struct alternate_object_database * alt , void * vdata)', 2134, 2147), ('for_each_loose_object( each_loose_object_fn cb , void * data , unsigned flags)', 2149, 2165), ('check_stream_sha1( git_zstream * stream , const char * hdr , unsigned long size , const char * path , const unsigned char * expected_sha1)', 2167, 2222), ('read_loose_object( const char * path , const struct object_id * expected_oid , enum object_type * type , unsigned long * size , void ** contents)', 2224, 2281)], '/home/kevin/thesis/git/sha1-lookup.c': [('take2( const unsigned char * sha1)', 4, 7), ('sha1_pos( const unsigned char * sha1 , void * table , size_t nr , sha1_access_fn fn)', 53, 101), ('bsearch_hash( const unsigned char * sha1 , const uint32_t * fanout_nbo , const unsigned char * table , size_t stride , uint32_t * result)', 103, 129)], '/home/kevin/thesis/git/sha1-lookup.h': [], '/home/kevin/thesis/git/sha1-name.c': [('update_candidates( struct disambiguate_state * ds , const struct object_id * current)', 36, 82), ('append_loose_object( const struct object_id * oid , const char * path , void * data)', 84, 89), ('find_short_object_filename( struct disambiguate_state * ds)', 93, 135), ('match_sha( unsigned len , const unsigned char * a , const unsigned char * b)', 137, 150), ('unique_in_pack( struct packed_git * p , struct disambiguate_state * ds)', 152, 176), ('find_short_packed_object( struct disambiguate_state * ds)', 178, 185), ('finish_object_disambiguation( struct disambiguate_state * ds , struct object_id * oid)', 190, 222), ('disambiguate_commit_only( const struct object_id * oid , void * cb_data_unused)', 224, 228), ('disambiguate_committish_only( const struct object_id * oid , void * cb_data_unused)', 230, 246), ('disambiguate_tree_only( const struct object_id * oid , void * cb_data_unused)', 248, 252), ('disambiguate_treeish_only( const struct object_id * oid , void * cb_data_unused)', 254, 270), ('disambiguate_blob_only( const struct object_id * oid , void * cb_data_unused)', 272, 276), ('set_disambiguate_hint_config( const char * var , const char * value)', 280, 306), ('init_object_disambiguation( const char * name , int len , struct disambiguate_state * ds)', 308, 341), ('show_ambiguous_object( const struct object_id * oid , void * data)', 343, 373), ('collect_ambiguous( const struct object_id * oid , void * data)', 375, 379), ('sort_ambiguous( const void * a , const void * b)', 381, 407), ('get_short_oid( const char * name , int len , struct object_id * oid , unsigned flags)', 409, 463), ('for_each_abbrev( const char * prefix , each_abbrev_fn fn , void * cb_data)', 465, 483), ('msb( unsigned long val)', 490, 496), ('get_hex_char_from_oid( const struct object_id * oid , unsigned int pos)', 505, 514), ('extend_abbrev_len( const struct object_id * oid , void * cb_data)', 516, 528), ('find_abbrev_len_for_pack( struct packed_git * p , struct min_abbrev_data * mad)', 530, 564), ('find_abbrev_len_packed( struct min_abbrev_data * mad)', 566, 572), ('find_unique_abbrev_r( char * hex , const struct object_id * oid , int len)', 574, 624), ('find_unique_abbrev( const struct object_id * oid , int len)', 626, 634), ('ambiguous_path( const char * path , int len)', 636, 659), ('at_mark( const char * string , int len , const char ** suffix , int nr)', 661, 673), ('upstream_mark( const char * string , int len)', 675, 679), ('push_mark( const char * string , int len)', 681, 685), ('get_oid_basic( const char * str , int len , struct object_id * oid , unsigned int flags)', 690, 835), ('get_parent( const char * name , int len , struct object_id * result , int idx)', 837, 863), ('get_nth_ancestor( const char * name , int len , struct object_id * result , int generation)', 865, 886), ('peel_to_type( const char * name , int namelen , struct object * o , enum object_type expected_type)', 888, 911), ('peel_onion( const char * name , int len , struct object_id * oid , unsigned lookup_flags)', 913, 1008), ('get_describe_name( const char * name , int len , struct object_id * oid)', 1010, 1029), ('get_oid_1( const char * name , int len , struct object_id * oid , unsigned lookup_flags)', 1031, 1077), ('handle_one_ref( const char * path , const struct object_id * oid , int flag , void * cb_data)', 1095, 1111), ('get_oid_oneline( const char * prefix , struct object_id * oid , struct commit_list * list)', 1113, 1164), ('grab_nth_branch_switch( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 1171, 1191), ('interpret_nth_prior_checkout( const char * name , int namelen , struct strbuf * buf)', 1197, 1230), ('get_oid_mb( const char * name , struct object_id * oid)', 1232, 1272), ('interpret_empty_at( const char * name , int namelen , int len , struct strbuf * buf)', 1275, 1294), ('reinterpret( const char * name , int namelen , int len , struct strbuf * buf , unsigned allowed)', 1296, 1316), ('set_shortened_ref( struct strbuf * buf , const char * ref)', 1318, 1324), ('branch_interpret_allowed( const char * refname , unsigned allowed)', 1326, 1339), ('interpret_branch_mark( const char * name , int namelen , int at , struct strbuf * buf , int(*get_mark)(constchar*,int) , const char *(*get_data)(structbranch*,structstrbuf*) , unsigned allowed)', 1341, 1376), ('interpret_branch_name( const char * name , int namelen , struct strbuf * buf , unsigned allowed)', 1378, 1425), ('strbuf_branchname( struct strbuf * sb , const char * name , unsigned allowed)', 1427, 1435), ('strbuf_check_branch_ref( struct strbuf * sb , const char * name)', 1437, 1457), ('get_oid( const char * name , struct object_id * oid)', 1463, 1467), ('get_oid_committish( const char * name , struct object_id * oid)', 1480, 1485), ('get_oid_treeish( const char * name , struct object_id * oid)', 1487, 1492), ('get_oid_commit( const char * name , struct object_id * oid)', 1494, 1499), ('get_oid_tree( const char * name , struct object_id * oid)', 1501, 1506), ('get_oid_blob( const char * name , struct object_id * oid)', 1508, 1513), ('diagnose_invalid_oid_path( const char * prefix , const char * filename , const struct object_id * tree_oid , const char * object_name , int object_name_len)', 1516, 1547), ('diagnose_invalid_index_path( int stage , const char * prefix , const char * filename)', 1550, 1600), ('resolve_relative_path( const char * rel)', 1603, 1615), ('get_oid_with_context_1( const char * name , unsigned flags , const char * prefix , struct object_id * oid , struct object_context * oc)', 1617, 1746), ('maybe_die_on_misspelt_object_name( const char * name , const char * prefix)', 1755, 1760), ('get_oid_with_context( const char * str , unsigned flags , struct object_id * oid , struct object_context * oc)', 1762, 1767)], '/home/kevin/thesis/git/sha1dc_git.c': [('git_SHA1DCInit( SHA1_CTX * ctx)', 7, 11), ('git_SHA1DCFinal( unsigned char hash [ 20 ] , SHA1_CTX * ctx)', 17, 23), ('git_SHA1DCUpdate( SHA1_CTX * ctx , const void * vdata , unsigned long len)', 28, 38)], '/home/kevin/thesis/git/sha1dc_git.h': [], '/home/kevin/thesis/git/shallow.c': [('set_alternate_shallow_file( const char * path , int override)', 20, 28), ('register_shallow( const struct object_id * oid)', 30, 41), ('is_repository_shallow( void)', 43, 75), ('get_shallow_commits( struct object_array * heads , int depth , int shallow_flag , int not_shallow_flag)', 77, 140), ('show_commit( struct commit * commit , void * data)', 142, 145), ('get_shallow_commits_by_rev_list( int ac , const char ** av , int shallow_flag , int not_shallow_flag)', 153, 216), ('check_shallow_file_for_update( void)', 218, 225), ('write_one_shallow( const struct commit_graft * graft , void * cb_data)', 237, 260), ('write_shallow_commits_1( struct strbuf * out , int use_pack_protocol , const struct oid_array * extra , unsigned flags)', 262, 281), ('write_shallow_commits( struct strbuf * out , int use_pack_protocol , const struct oid_array * extra)', 283, 287), ('setup_temporary_shallow( const struct oid_array * extra)', 289, 309), ('setup_alternate_shallow( struct lock_file * shallow_lock , const char ** alternate_shallow_file , const struct oid_array * extra)', 311, 333), ('advertise_shallow_grafts_cb( const struct commit_graft * graft , void * cb)', 335, 341), ('advertise_shallow_grafts( int fd)', 343, 348), ('prune_shallow( int show_only)', 354, 378), ('prepare_shallow_info( struct shallow_info * info , struct oid_array * sa)', 386, 406), ('clear_shallow_info( struct shallow_info * info)', 408, 412), ('remove_nonexistent_theirs_shallow( struct shallow_info * info)', 416, 428), ('paint_alloc( struct paint_info * info)', 442, 460), ('paint_down( struct paint_info * info , const struct object_id * oid , unsigned int id)', 467, 531), ('mark_uninteresting( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 533, 542), ('assign_shallow_commits_to_refs( struct shallow_info * info , uint32_t ** used , int * ref_status)', 561, 634), ('add_ref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 641, 650), ('update_refstatus( int * ref_status , int nr , uint32_t * bitmap)', 652, 660), ('post_assign_shallow( struct shallow_info * info , struct ref_bitmap * ref_bitmap , int * ref_status)', 665, 721), ('delayed_reachability_test( struct shallow_info * si , int c)', 724, 745)], '/home/kevin/thesis/git/shell.c': [('do_generic_cmd( const char * me , char * arg)', 12, 27), ('is_valid_cmd_name( const char * cmd)', 29, 33), ('make_cmd( const char * prog)', 35, 38), ('cd_to_homedir( void)', 40, 47), ('run_shell( void)', 49, 116), ('cmd_main( int argc , const char ** argv)', 128, 199)], '/home/kevin/thesis/git/shortlog.h': [], '/home/kevin/thesis/git/show-index.c': [('cmd_main( int argc , const char ** argv)', 7, 85)], '/home/kevin/thesis/git/sideband.c': [('recv_sideband( const char * me , int in_stream , int out)', 21, 104), ('send_sideband( int fd , int band , const char * data , ssize_t sz , int packet_max)', 110, 133)], '/home/kevin/thesis/git/sideband.h': [], '/home/kevin/thesis/git/sigchain.c': [('check_signum( int sig)', 13, 17), ('sigchain_push( int sig , sigchain_fun f)', 19, 30), ('sigchain_pop( int sig)', 32, 43), ('sigchain_push_common( sigchain_fun f)', 45, 52), ('sigchain_pop_common( void)', 54, 61)], '/home/kevin/thesis/git/sigchain.h': [], '/home/kevin/thesis/git/split-index.c': [('init_split_index( struct index_state * istate)', 5, 12), ('read_link_extension( struct index_state * istate , const void * data_ , unsigned long sz)', 14, 42), ('write_link_extension( struct strbuf * sb , struct index_state * istate)', 44, 54), ('mark_base_index_entries( struct index_state * base)', 56, 68), ('move_cache_to_base_index( struct index_state * istate)', 70, 90), ('mark_entry_for_delete( size_t pos , void * data)', 92, 100), ('replace_entry( size_t pos , void * data)', 102, 128), ('merge_base_index( struct index_state * istate)', 130, 174), ('prepare_to_write_split_index( struct index_state * istate)', 176, 264), ('finish_writing_split_index( struct index_state * istate)', 266, 277), ('discard_split_index( struct index_state * istate)', 279, 293), ('save_or_free_index_entry( struct index_state * istate , struct cache_entry * ce)', 295, 305), ('replace_index_entry_in_base( struct index_state * istate , struct cache_entry * old_entry , struct cache_entry * new_entry)', 307, 320), ('add_split_index( struct index_state * istate)', 322, 328), ('remove_split_index( struct index_state * istate)', 330, 342)], '/home/kevin/thesis/git/split-index.h': [], '/home/kevin/thesis/git/strbuf.c': [('starts_with( const char * str , const char * prefix)', 6, 13), ('istarts_with( const char * str , const char * prefix)', 15, 22), ('skip_to_optional_arg_default( const char * str , const char * prefix , const char ** arg , const char * def)', 24, 44), ('strbuf_init( struct strbuf * sb , size_t hint)', 53, 59), ('strbuf_release( struct strbuf * sb)', 61, 67), ('strbuf_detach( struct strbuf * sb , size_t * sz)', 69, 78), ('strbuf_attach( struct strbuf * sb , void * buf , size_t len , size_t alloc)', 80, 88), ('strbuf_grow( struct strbuf * sb , size_t extra)', 90, 101), ('strbuf_trim( struct strbuf * sb)', 103, 107), ('strbuf_rtrim( struct strbuf * sb)', 109, 114), ('strbuf_trim_trailing_dir_sep( struct strbuf * sb)', 116, 121), ('strbuf_ltrim( struct strbuf * sb)', 123, 132), ('strbuf_reencode( struct strbuf * sb , const char * from , const char * to)', 134, 148), ('strbuf_tolower( struct strbuf * sb)', 150, 155), ('strbuf_split_buf( const char * str , size_t slen , int terminator , int max)', 157, 182), ('strbuf_add_separated_string_list( struct strbuf * str , const char * sep , struct string_list * slist)', 184, 197), ('strbuf_list_free( struct strbuf ** sbs)', 199, 208), ('strbuf_cmp( const struct strbuf * a , const struct strbuf * b)', 210, 217), ('strbuf_splice( struct strbuf * sb , size_t pos , size_t len , const void * data , size_t dlen)', 219, 236), ('strbuf_insert( struct strbuf * sb , size_t pos , const void * data , size_t len)', 238, 241), ('strbuf_remove( struct strbuf * sb , size_t pos , size_t len)', 243, 246), ('strbuf_add( struct strbuf * sb , const void * data , size_t len)', 248, 253), ('strbuf_addbuf( struct strbuf * sb , const struct strbuf * sb2)', 255, 260), ('strbuf_addchars( struct strbuf * sb , int c , size_t n)', 262, 267), ('strbuf_addf( struct strbuf * sb , const char * fmt , ...)', 269, 275), ('add_lines( struct strbuf * out , const char * prefix1 , const char * prefix2 , const char * buf , size_t size)', 277, 295), ('strbuf_add_commented_lines( struct strbuf * out , const char * buf , size_t size)', 297, 307), ('strbuf_commented_addf( struct strbuf * sb , const char * fmt , ...)', 309, 324), ('strbuf_vaddf( struct strbuf * sb , const char * fmt , va_list ap)', 326, 345), ('strbuf_expand( struct strbuf * sb , const char * format , expand_fn_t fn , void * context)', 347, 372), ('strbuf_expand_dict_cb( struct strbuf * sb , const char * placeholder , void * context)', 374, 388), ('strbuf_addbuf_percentquote( struct strbuf * dst , const struct strbuf * src)', 390, 399), ('strbuf_fread( struct strbuf * sb , size_t size , FILE * f)', 401, 413), ('strbuf_read( struct strbuf * sb , int fd , size_t hint)', 415, 440), ('strbuf_read_once( struct strbuf * sb , int fd , size_t hint)', 442, 454), ('strbuf_write( struct strbuf * sb , FILE * f)', 456, 459), ('strbuf_readlink( struct strbuf * sb , const char * path , size_t hint)', 464, 490), ('strbuf_getcwd( struct strbuf * sb)', 492, 522), ('strbuf_getwholeline( struct strbuf * sb , FILE * fp , int term)', 525, 570), ('strbuf_getwholeline( struct strbuf * sb , FILE * fp , int term)', 572, 594), ('strbuf_getdelim( struct strbuf * sb , FILE * fp , int term)', 597, 604), ('strbuf_getline( struct strbuf * sb , FILE * fp)', 606, 616), ('strbuf_getline_lf( struct strbuf * sb , FILE * fp)', 618, 621), ('strbuf_getline_nul( struct strbuf * sb , FILE * fp)', 623, 626), ('strbuf_getwholeline_fd( struct strbuf * sb , int fd , int term)', 628, 642), ('strbuf_read_file( struct strbuf * sb , const char * path , size_t hint)', 644, 662), ('strbuf_add_lines( struct strbuf * out , const char * prefix , const char * buf , size_t size)', 664, 668), ('strbuf_addstr_xml_quoted( struct strbuf * buf , const char * s)', 670, 694), ('is_rfc3986_reserved( char ch)', 696, 705), ('is_rfc3986_unreserved( char ch)', 707, 711), ('strbuf_add_urlencode( struct strbuf * sb , const char * s , size_t len , int reserved)', 713, 725), ('strbuf_addstr_urlencode( struct strbuf * sb , const char * s , int reserved)', 727, 731), ('strbuf_humanise_bytes( struct strbuf * buf , off_t bytes)', 733, 750), ('strbuf_add_absolute_path( struct strbuf * sb , const char * path)', 752, 775), ('strbuf_add_real_path( struct strbuf * sb , const char * path)', 777, 786), ('printf_ln( const char * fmt , ...)', 788, 798), ('fprintf_ln( FILE * fp , const char * fmt , ...)', 800, 810), ('xstrdup_tolower( const char * string)', 812, 822), ('xstrdup_toupper( const char * string)', 824, 834), ('xstrvfmt( const char * fmt , va_list ap)', 836, 841), ('xstrfmt( const char * fmt , ...)', 843, 853), ('strbuf_addftime( struct strbuf * sb , const char * fmt , const struct tm * tm , int tz_offset , int suppress_tz_name)', 855, 918), ('strbuf_add_unique_abbrev( struct strbuf * sb , const struct object_id * oid , int abbrev_len)', 920, 927), ('cleanup( char * line , size_t len)', 934, 944), ('strbuf_stripspace( struct strbuf * sb , int skip_comments)', 961, 993), ('strbuf_normalize_path( struct strbuf * src)', 995, 1013)], '/home/kevin/thesis/git/strbuf.h': [('strbuf_swap( struct strbuf * a , struct strbuf * b)', 125, 128), ('strbuf_avail( const struct strbuf * sb)', 139, 142), ('strbuf_setlen( struct strbuf * sb , size_t len)', 160, 169), ('strbuf_addch( struct strbuf * sb , int c)', 225, 231), ('strbuf_addstr( struct strbuf * sb , const char * s)', 277, 280), ('strbuf_strip_suffix( struct strbuf * sb , const char * suffix)', 494, 501), ('strbuf_split_str( const char * str , int terminator , int max)', 524, 528), ('strbuf_split_max( const struct strbuf * sb , int terminator , int max)', 530, 534), ('strbuf_split( const struct strbuf * sb , int terminator)', 536, 540), ('strbuf_complete( struct strbuf * sb , char term)', 593, 597), ('strbuf_complete_line( struct strbuf * sb)', 599, 602)], '/home/kevin/thesis/git/streaming.c': [('close_istream( struct git_istream * st)', 99, 104), ('read_istream( struct git_istream * st , void * buf , size_t sz)', 106, 109), ('istream_source( const struct object_id * oid , enum object_type * type , struct object_info * oi)', 111, 134), ('open_istream( const struct object_id * oid , enum object_type * type , unsigned long * size , struct stream_filter * filter)', 136, 168), ('close_deflated_stream( struct git_istream * st)', 177, 181), ('close_method_decl( filtered)', 190, 194), ('read_method_decl( filtered)', 196, 253), ('attach_stream_filter( struct git_istream * st , struct stream_filter * filter)', 260, 274), ('read_method_decl( loose)', 282, 325), ('close_method_decl( loose)', 327, 332), ('open_method_decl( loose)', 339, 362), ('read_method_decl( pack_non_delta)', 371, 418), ('close_method_decl( pack_non_delta)', 420, 424), ('open_method_decl( pack_non_delta)', 431, 457), ('close_method_decl( incore)', 466, 470), ('read_method_decl( incore)', 472, 484), ('open_method_decl( incore)', 491, 498), ('stream_blob_to_fd( int fd , const struct object_id * oid , struct stream_filter * filter , int can_seek)', 505, 558)], '/home/kevin/thesis/git/streaming.h': [], '/home/kevin/thesis/git/string-list.c': [('string_list_init( struct string_list * list , int strdup_strings)', 4, 8), ('get_entry_index( const struct string_list * list , const char * string , int * exact_match)', 12, 33), ('add_entry( int insert_at , struct string_list * list , const char * string)', 36, 54), ('string_list_insert( struct string_list * list , const char * string)', 56, 64), ('string_list_remove( struct string_list * list , const char * string , int free_util)', 66, 81), ('string_list_has_string( const struct string_list * list , const char * string)', 83, 88), ('string_list_find_insert_index( const struct string_list * list , const char * string , int negative_existing_index)', 90, 98), ('string_list_lookup( struct string_list * list , const char * string)', 100, 106), ('string_list_remove_duplicates( struct string_list * list , int free_util)', 108, 124), ('for_each_string_list( struct string_list * list , string_list_each_func_t fn , void * cb_data)', 126, 134), ('filter_string_list( struct string_list * list , int free_util , string_list_each_func_t want , void * cb_data)', 136, 151), ('item_is_not_empty( struct string_list_item * item , void * unused)', 153, 156), ('string_list_remove_empty_items( struct string_list * list , int free_util)', 158, 160), ('string_list_clear( struct string_list * list , int free_util)', 162, 178), ('string_list_clear_func( struct string_list * list , string_list_clear_func_t clearfunc)', 180, 196), ('print_string_list( const struct string_list * p , const char * text)', 199, 206), ('string_list_append_nodup( struct string_list * list , char * string)', 208, 217), ('string_list_append( struct string_list * list , const char * string)', 219, 225), ('cmp_items( const void * a , const void * b , void * ctx)', 227, 233), ('string_list_sort( struct string_list * list)', 235, 239), ('unsorted_string_list_lookup( struct string_list * list , const char * string)', 241, 251), ('unsorted_string_list_has_string( struct string_list * list , const char * string)', 253, 257), ('unsorted_string_list_delete_item( struct string_list * list , int i , int free_util)', 259, 267), ('string_list_split( struct string_list * list , const char * string , int delim , int maxsplit)', 269, 293), ('string_list_split_in_place( struct string_list * list , char * string , int delim , int maxsplit)', 295, 320)], '/home/kevin/thesis/git/string-list.h': [], '/home/kevin/thesis/git/sub-process.c': [('cmd2process_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 8, 17), ('subprocess_find_entry( struct hashmap * hashmap , const char * cmd)', 19, 26), ('subprocess_read_status( int fd , struct strbuf * status)', 28, 50), ('subprocess_stop( struct hashmap * hashmap , struct subprocess_entry * entry)', 52, 62), ('subprocess_exit_handler( struct child_process * process)', 64, 73), ('subprocess_start( struct hashmap * hashmap , struct subprocess_entry * entry , const char * cmd , subprocess_start_fn startfn)', 75, 109), ('handshake_version( struct child_process * process , const char * welcome_prefix , int * versions , int * chosen_version)', 111, 156), ('handshake_capabilities( struct child_process * process , struct subprocess_capability * capabilities , unsigned int * supported_capabilities)', 158, 192), ('subprocess_handshake( struct subprocess_entry * entry , const char * welcome_prefix , int * versions , int * chosen_version , struct subprocess_capability * capabilities , unsigned int * supported_capabilities)', 194, 213)], '/home/kevin/thesis/git/sub-process.h': [('subprocess_get_child_process( struct subprocess_entry * entry)', 69, 73)], '/home/kevin/thesis/git/submodule-config.c': [('config_path_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 38, 48), ('config_name_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 50, 60), ('submodule_cache_alloc( void)', 62, 65), ('submodule_cache_init( struct submodule_cache * cache)', 67, 72), ('free_one_config( struct submodule_entry * entry)', 74, 81), ('submodule_cache_clear( struct submodule_cache * cache)', 83, 104), ('submodule_cache_free( struct submodule_cache * cache)', 106, 110), ('hash_oid_string( const struct object_id * oid , const char * string)', 112, 116), ('cache_put_path( struct submodule_cache * cache , struct submodule * submodule)', 118, 127), ('cache_remove_path( struct submodule_cache * cache , struct submodule * submodule)', 129, 140), ('cache_add( struct submodule_cache * cache , struct submodule * submodule)', 142, 151), ('cache_lookup_path( struct submodule_cache * cache , const struct object_id * gitmodules_oid , const char * path)', 153, 171), ('cache_lookup_name( struct submodule_cache * cache , const struct object_id * gitmodules_oid , const char * name)', 173, 191), ('check_submodule_name( const char * name)', 193, 216), ('name_and_item_from_var( const char * var , struct strbuf * name , struct strbuf * item)', 218, 238), ('lookup_or_create_by_name( struct submodule_cache * cache , const struct object_id * gitmodules_oid , const char * name)', 240, 269), ('parse_fetch_recurse( const char * opt , const char * arg , int die_on_error)', 271, 288), ('parse_submodule_fetchjobs( const char * var , const char * value)', 290, 296), ('parse_fetch_recurse_submodules_arg( const char * opt , const char * arg)', 298, 301), ('option_fetch_parse_recurse_submodules( const struct option * opt , const char * arg , int unset)', 303, 322), ('parse_update_recurse( const char * opt , const char * arg , int die_on_error)', 324, 337), ('parse_update_recurse_submodules_arg( const char * opt , const char * arg)', 339, 342), ('parse_push_recurse( const char * opt , const char * arg , int die_on_error)', 344, 368), ('parse_push_recurse_submodules_arg( const char * opt , const char * arg)', 370, 373), ('warn_multiple_config( const struct object_id * treeish_name , const char * name , const char * option)', 375, 384), ('parse_config( const char * var , const char * value , void * data)', 393, 489), ('gitmodule_oid_from_commit( const struct object_id * treeish_name , struct object_id * gitmodules_oid , struct strbuf * rev)', 491, 507), ('config_from( struct submodule_cache * cache , const struct object_id * treeish_name , const char * key , enum lookup_type lookup_type)', 513, 581), ('submodule_cache_check_init( struct repository * repo)', 583, 592), ('gitmodules_cb( const char * var , const char * value , void * data)', 594, 605), ('repo_read_gitmodules( struct repository * repo)', 607, 626), ('gitmodules_config_oid( const struct object_id * commit_oid)', 628, 642), ('gitmodules_read_check( struct repository * repo)', 644, 651), ('submodule_from_name( struct repository * r , const struct object_id * treeish_name , const char * name)', 653, 659), ('submodule_from_path( struct repository * r , const struct object_id * treeish_name , const char * path)', 661, 667), ('submodule_free( struct repository * r)', 669, 673)], '/home/kevin/thesis/git/submodule-config.h': [], '/home/kevin/thesis/git/submodule.c': [('is_gitmodules_unmerged( const struct index_state * istate)', 37, 51), ('is_staging_gitmodules_ok( struct index_state * istate)', 61, 74), ('for_each_remote_ref_submodule( const char * submodule , each_ref_fn fn , void * cb_data)', 76, 81), ('update_path_in_gitmodules( const char * oldpath , const char * newpath)', 88, 115), ('remove_path_from_gitmodules( const char * path)', 122, 148), ('stage_updated_gitmodules( struct index_state * istate)', 150, 154), ('add_submodule_odb( const char * path)', 157, 173), ('set_diffopt_flags_from_submodule_config( struct diff_options * diffopt , const char * path)', 175, 194), ('git_default_submodule_config( const char * var , const char * value , void * cb)', 197, 205), ('option_parse_recurse_submodules_worktree_updater( const struct option * opt , const char * arg , int unset)', 207, 222), ('is_submodule_active( struct repository * repo , const char * path)', 227, 275), ('is_submodule_populated_gently( const char * path , int * return_error_code)', 277, 287), ('die_in_unpopulated_submodule( const struct index_state * istate , const char * prefix)', 292, 317), ('die_path_inside_submodule( const struct index_state * istate , const struct pathspec * ps)', 322, 350), ('parse_submodule_update_type( const char * value)', 352, 366), ('parse_submodule_update_strategy( const char * value , struct submodule_update_strategy * dst)', 368, 385), ('submodule_strategy_to_string( const struct submodule_update_strategy * s)', 387, 406), ('handle_ignore_submodules_arg( struct diff_options * diffopt , const char * arg)', 408, 423), ('prepare_submodule_summary( struct rev_info * rev , const char * path , struct commit * left , struct commit * right , struct commit_list * merge_bases)', 425, 444), ('print_submodule_summary( struct rev_info * rev , struct diff_options * o)', 446, 465), ('prepare_submodule_repo_env_no_git_dir( struct argv_array * out)', 467, 475), ('prepare_submodule_repo_env( struct argv_array * out)', 477, 482), ('show_submodule_header( struct diff_options * o , const char * path , struct object_id * one , struct object_id * two , unsigned dirty_submodule , struct commit ** left , struct commit ** right , struct commit_list ** merge_bases)', 489, 556), ('show_submodule_summary( struct diff_options * o , const char * path , struct object_id * one , struct object_id * two , unsigned dirty_submodule)', 558, 590), ('show_submodule_inline_diff( struct diff_options * o , const char * path , struct object_id * one , struct object_id * two , unsigned dirty_submodule)', 592, 664), ('should_update_submodules( void)', 666, 669), ('submodule_from_ce( const struct cache_entry * ce)', 671, 680), ('submodule_commits( struct string_list * submodules , const char * name)', 682, 694), ('default_name_or_path( const char * path_or_name)', 708, 716), ('collect_changed_submodules_cb( struct diff_queue_struct * q , struct diff_options * options , void * data)', 718, 759), ('collect_changed_submodules( struct string_list * changed , struct argv_array * argv)', 767, 792), ('free_submodules_oids( struct string_list * submodules)', 794, 800), ('has_remote( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 802, 806), ('append_oid_to_argv( const struct object_id * oid , void * data)', 808, 813), ('check_has_commit( const struct object_id * oid , void * data)', 820, 840), ('submodule_has_commits( const char * path , struct oid_array * commits)', 842, 885), ('submodule_needs_pushing( const char * path , struct oid_array * commits)', 887, 929), ('find_unpushed_submodules( struct oid_array * commits , const char * remotes_name , struct string_list * needs_pushing)', 931, 968), ('push_submodule( const char * path , const struct remote * remote , const struct refspec * rs , const struct string_list * push_options , int dry_run)', 970, 1009), ('submodule_push_check( const char * path , const char * head , const struct remote * remote , const struct refspec * rs)', 1015, 1043), ('push_unpushed_submodules( struct oid_array * commits , const struct remote * remote , const struct refspec * rs , const struct string_list * push_options , int dry_run)', 1045, 1091), ('append_oid_to_array( const char * ref , const struct object_id * oid , int flags , void * data)', 1093, 1099), ('check_for_new_submodule_commits( struct object_id * oid)', 1101, 1109), ('calculate_changed_submodule_paths( void)', 1111, 1157), ('submodule_touches_in_range( struct object_id * excl_oid , struct object_id * incl_oid)', 1159, 1184), ('get_fetch_recurse_config( const struct submodule * submodule , struct submodule_parallel_fetch * spf)', 1198, 1221), ('get_next_submodule( struct child_process * cp , struct strbuf * err , void * data , void ** task_cb)', 1223, 1297), ('fetch_start_failure( struct strbuf * err , void * cb , void * task_cb)', 1299, 1307), ('fetch_finish( int retvalue , struct strbuf * err , void * cb , void * task_cb)', 1309, 1318), ('fetch_populated_submodules( struct repository * r , const struct argv_array * options , const char * prefix , int command_line_option , int default_option , int quiet , int max_parallel_jobs)', 1320, 1358), ('is_submodule_modified( const char * path , int ignore_untracked)', 1360, 1437), ('submodule_uses_gitfile( const char * path)', 1439, 1473), ('bad_to_remove_submodule( const char * path , unsigned flags)', 1482, 1533), ('get_super_prefix_or_empty( void)', 1535, 1541), ('submodule_has_dirty_index( const struct submodule * sub)', 1543, 1559), ('submodule_reset_index( const char * path)', 1561, 1578), ('submodule_move_head( const char * path , const char * old_head , const char * new_head , unsigned flags)', 1585, 1704), ('relocate_single_git_dir_into_superproject( const char * prefix , const char * path)', 1710, 1746), ('absorb_git_dir_into_superproject( const char * prefix , const char * path , unsigned flags)', 1753, 1825), ('get_superproject_working_tree( void)', 1827, 1907), ('submodule_to_gitdir( struct strbuf * buf , const char * submodule)', 1913, 1941)], '/home/kevin/thesis/git/submodule.h': [], '/home/kevin/thesis/git/symlinks.c': [('longest_path_match( const char * name_a , int len_a , const char * name_b , int len_b , int * previous_slash)', 10, 36), ('reset_lstat_cache( struct cache_def * cache)', 40, 48), ('lstat_cache_matchlen( struct cache_def * cache , const char * name , int len , int * ret_flags , int track_flags , int prefix_len_stat_func)', 69, 184), ('lstat_cache( struct cache_def * cache , const char * name , int len , int track_flags , int prefix_len_stat_func)', 186, 193), ('threaded_has_symlink_leading_path( struct cache_def * cache , const char * name , int len)', 200, 203), ('has_symlink_leading_path( const char * name , int len)', 208, 211), ('check_leading_path( const char * name , int len)', 222, 225), ('threaded_check_leading_path( struct cache_def * cache , const char * name , int len)', 236, 247), ('has_dirs_only_path( const char * name , int len , int prefix_len)', 256, 259), ('threaded_has_dirs_only_path( struct cache_def * cache , const char * name , int len , int prefix_len)', 268, 273), ('do_remove_scheduled_dirs( int new_len)', 277, 289), ('schedule_dir_for_removal( const char * name , int len)', 291, 318), ('remove_scheduled_dirs( void)', 320, 323)], '/home/kevin/thesis/git/tag.c': [('run_gpg_verify( const char * buf , unsigned long size , unsigned flags)', 10, 34), ('gpg_verify_tag( const struct object_id * oid , const char * name_to_report , unsigned flags)', 36, 63), ('deref_tag( struct object * o , const char * warn , int warnlen)', 65, 78), ('deref_tag_noverify( struct object * o)', 80, 90), ('lookup_tag( const struct object_id * oid)', 92, 98), ('parse_tag_date( const char * buf , const char * tail)', 100, 115), ('parse_tag_buffer( struct tag * item , const void * data , unsigned long size)', 117, 174), ('parse_tag( struct tag * item)', 176, 197)], '/home/kevin/thesis/git/tag.h': [], '/home/kevin/thesis/git/tar.h': [], '/home/kevin/thesis/git/tempfile.c': [('remove_tempfiles( int in_signal_handler)', 59, 80), ('remove_tempfiles_on_exit( void)', 82, 85), ('remove_tempfiles_on_signal( int signo)', 87, 92), ('new_tempfile( void)', 94, 104), ('activate_tempfile( struct tempfile * tempfile)', 106, 122), ('deactivate_tempfile( struct tempfile * tempfile)', 124, 130), ('create_tempfile( const char * path)', 133, 158), ('register_tempfile( const char * path)', 160, 166), ('mks_tempfile_sm( const char * filename_template , int suffixlen , int mode)', 168, 180), ('mks_tempfile_tsm( const char * filename_template , int suffixlen , int mode)', 182, 199), ('xmks_tempfile_m( const char * filename_template , int mode)', 201, 214), ('fdopen_tempfile( struct tempfile * tempfile , const char * mode)', 216, 225), ('get_tempfile_path( struct tempfile * tempfile)', 227, 232), ('get_tempfile_fd( struct tempfile * tempfile)', 234, 239), ('get_tempfile_fp( struct tempfile * tempfile)', 241, 246), ('close_tempfile_gently( struct tempfile * tempfile)', 248, 274), ('reopen_tempfile( struct tempfile * tempfile)', 276, 284), ('rename_tempfile( struct tempfile ** tempfile_p , const char * path)', 286, 308), ('delete_tempfile( struct tempfile ** tempfile_p)', 310, 321)], '/home/kevin/thesis/git/tempfile.h': [('mks_tempfile_s( const char * filename_template , int suffixlen)', 142, 146), ('mks_tempfile_m( const char * filename_template , int mode)', 149, 152), ('mks_tempfile( const char * filename_template)', 155, 158), ('mks_tempfile_ts( const char * filename_template , int suffixlen)', 165, 169), ('mks_tempfile_tm( const char * filename_template , int mode)', 172, 175), ('mks_tempfile_t( const char * filename_template)', 178, 181), ('xmks_tempfile( const char * filename_template)', 187, 190), ('is_tempfile_active( struct tempfile * tempfile)', 200, 203)], '/home/kevin/thesis/git/thread-utils.c': [('online_cpus( void)', 21, 62), ('init_recursive_mutex( pthread_mutex_t * m)', 64, 77)], '/home/kevin/thesis/git/thread-utils.h': [], '/home/kevin/thesis/git/tmp-objdir.c': [('tmp_objdir_free( struct tmp_objdir * t)', 24, 29), ('tmp_objdir_destroy_1( struct tmp_objdir * t , int on_signal)', 31, 56), ('tmp_objdir_destroy( struct tmp_objdir * t)', 58, 61), ('remove_tmp_objdir( void)', 63, 66), ('remove_tmp_objdir_on_signal( int signo)', 68, 73), ('env_append( struct argv_array * env , const char * key , const char * val)', 82, 105), ('env_replace( struct argv_array * env , const char * key , const char * val)', 107, 110), ('setup_tmp_objdir( const char * root)', 112, 122), ('tmp_objdir_create( void)', 124, 171), ('pack_copy_priority( const char * name)', 180, 191), ('pack_copy_cmp( const char * a , const char * b)', 193, 196), ('read_dir_paths( struct string_list * out , const char * path)', 198, 213), ('migrate_one( struct strbuf * src , struct strbuf * dst)', 217, 232), ('migrate_paths( struct strbuf * src , struct strbuf * dst)', 234, 260), ('tmp_objdir_migrate( struct tmp_objdir * t)', 262, 280), ('tmp_objdir_env( const struct tmp_objdir * t)', 282, 287), ('tmp_objdir_add_as_alternate( const struct tmp_objdir * t)', 289, 292)], '/home/kevin/thesis/git/tmp-objdir.h': [], '/home/kevin/thesis/git/trace.c': [('get_trace_fd( struct trace_key * key)', 32, 69), ('trace_disable( struct trace_key * key)', 71, 78), ('prepare_trace_line( const char * file , int line , struct trace_key * key , struct strbuf * buf)', 80, 113), ('trace_write( struct trace_key * key , const void * buf , unsigned len)', 115, 122), ('trace_verbatim( struct trace_key * key , const void * buf , unsigned len)', 124, 129), ('print_trace_line( struct trace_key * key , struct strbuf * buf)', 131, 135), ('trace_vprintf_fl( const char * file , int line , struct trace_key * key , const char * format , va_list ap)', 137, 148), ('trace_argv_vprintf_fl( const char * file , int line , const char ** argv , const char * format , va_list ap)', 150, 164), ('trace_strbuf_fl( const char * file , int line , struct trace_key * key , const struct strbuf * data)', 166, 177), ('trace_performance_vprintf_fl( const char * file , int line , uint64_t nanos , const char * format , va_list ap)', 179, 197), ('trace_printf( const char * format , ...)', 201, 207), ('trace_printf_key( struct trace_key * key , const char * format , ...)', 209, 215), ('trace_argv_printf( const char ** argv , const char * format , ...)', 217, 223), ('trace_strbuf( struct trace_key * key , const struct strbuf * data)', 225, 228), ('trace_performance( uint64_t nanos , const char * format , ...)', 230, 236), ('trace_performance_since( uint64_t start , const char * format , ...)', 238, 245), ('trace_printf_key_fl( const char * file , int line , struct trace_key * key , const char * format , ...)', 249, 256), ('trace_argv_printf_fl( const char * file , int line , const char ** argv , const char * format , ...)', 258, 265), ('trace_performance_fl( const char * file , int line , uint64_t nanos , const char * format , ...)', 267, 274), ('quote_crnl( const char * path)', 279, 299), ('trace_repo_setup( const char * prefix)', 302, 325), ('trace_want( struct trace_key * key)', 327, 330), ('highres_nanos( void)', 334, 340), ('highres_nanos( void)', 344, 376), ('gettimeofday_nanos( void)', 382, 387), ('getnanotime( void)', 393, 412), ('print_command_performance_atexit( void)', 417, 421), ('trace_command_performance( const char ** argv)', 423, 434)], '/home/kevin/thesis/git/trace.h': [('trace_pass_fl( struct trace_key * key)', 133, 136)], '/home/kevin/thesis/git/trailer.c': [('after_or_end( enum trailer_where where)', 61, 64), ('token_len_without_separator( const char * token , size_t len)', 72, 77), ('same_token( struct trailer_item * a , struct arg_item * b)', 79, 91), ('same_value( struct trailer_item * a , struct arg_item * b)', 93, 96), ('same_trailer( struct trailer_item * a , struct arg_item * b)', 98, 101), ('is_blank_line( const char * str)', 103, 109), ('strbuf_replace( struct strbuf * sb , const char * a , const char * b)', 111, 116), ('free_trailer_item( struct trailer_item * item)', 118, 123), ('free_arg_item( struct arg_item * item)', 125, 133), ('last_non_space_char( const char * s)', 135, 142), ('print_tok_val( FILE * outfile , const char * tok , const char * val)', 144, 160), ('print_all( FILE * outfile , struct list_head * head , const struct process_trailer_options * opts)', 162, 173), ('trailer_from_arg( struct arg_item * arg_tok)', 175, 183), ('add_arg_to_input_list( struct trailer_item * on_tok , struct arg_item * arg_tok)', 185, 194), ('check_if_different( struct trailer_item * in_tok , struct arg_item * arg_tok , int check_all , struct list_head * head)', 196, 217), ('apply_command( const char * command , const char * arg)', 219, 248), ('apply_item_command( struct trailer_item * in_tok , struct arg_item * arg_tok)', 250, 265), ('apply_arg_if_exists( struct trailer_item * in_tok , struct arg_item * arg_tok , struct trailer_item * on_tok , struct list_head * head)', 267, 304), ('apply_arg_if_missing( struct list_head * head , struct arg_item * arg_tok)', 306, 329), ('find_same_and_apply_arg( struct list_head * head , struct arg_item * arg_tok)', 331, 359), ('process_trailers_lists( struct list_head * head , struct list_head * arg_head)', 361, 378), ('trailer_set_where( enum trailer_where * item , const char * value)', 380, 395), ('trailer_set_if_exists( enum trailer_if_exists * item , const char * value)', 397, 414), ('trailer_set_if_missing( enum trailer_if_missing * item , const char * value)', 416, 427), ('duplicate_conf( struct conf_info * dst , const struct conf_info * src)', 429, 435), ('get_conf_item( const char * name)', 437, 457), ('git_trailer_default_config( const char * conf_key , const char * value , void * cb)', 473, 502), ('git_trailer_config( const char * conf_key , const char * value , void * cb)', 504, 563), ('ensure_configured( void)', 565, 577), ('token_from_item( struct arg_item * item , char * tok)', 579, 586), ('token_matches_item( const char * tok , struct arg_item * item , int tok_len)', 588, 593), ('find_separator( const char * line , const char * separators)', 606, 622), ('parse_trailer( struct strbuf * tok , struct strbuf * val , const struct conf_info ** conf , const char * trailer , int separator_pos)', 631, 664), ('add_trailer_item( struct list_head * head , char * tok , char * val)', 666, 674), ('add_arg_item( struct list_head * arg_head , char * tok , char * val , const struct conf_info * conf , const struct new_trailer_item * new_trailer_item)', 676, 693), ('process_command_line_args( struct list_head * arg_head , struct list_head * new_trailer_head)', 695, 744), ('read_input_file( struct strbuf * sb , const char * file)', 746, 755), ('next_line( const char * str)', 757, 761), ('last_line( const char * buf , size_t len)', 766, 785), ('find_patch_start( const char * str)', 791, 801), ('find_trailer_start( const char * buf , size_t len)', 807, 899), ('find_trailer_end( const char * buf , size_t len)', 902, 905), ('ends_with_blank_line( const char * buf , size_t len)', 907, 913), ('unfold_value( struct strbuf * val)', 915, 940), ('process_input_file( FILE * outfile , const char * str , struct list_head * head , const struct process_trailer_options * opts)', 942, 987), ('free_all( struct list_head * head)', 989, 996), ('create_in_place_tempfile( const char * file)', 1000, 1027), ('process_trailers( const char * file , const struct process_trailer_options * opts , struct list_head * new_trailer_head)', 1029, 1067), ('trailer_info_get( struct trailer_info * info , const char * str)', 1069, 1110), ('trailer_info_release( struct trailer_info * info)', 1112, 1118), ('format_trailer_info( struct strbuf * out , const struct trailer_info * info , const struct process_trailer_options * opts)', 1120, 1154), ('format_trailers_from_commit( struct strbuf * out , const char * msg , const struct process_trailer_options * opts)', 1156, 1164)], '/home/kevin/thesis/git/trailer.h': [], '/home/kevin/thesis/git/transport-helper.c': [('sendline( struct helper_data * helper , struct strbuf * buffer)', 46, 52), ('recvline_fh( FILE * helper , struct strbuf * buffer)', 54, 68), ('recvline( struct helper_data * helper , struct strbuf * buffer)', 70, 73), ('write_constant( int fd , const char * str)', 75, 81), ('remove_ext_force( const char * url)', 83, 91), ('do_take_over( struct transport * transport)', 93, 100), ('get_helper( struct transport * transport)', 104, 212), ('disconnect_helper( struct transport * transport)', 214, 240), ('strbuf_set_helper_option( struct helper_data * data , struct strbuf * buf)', 256, 276), ('string_list_set_helper_option( struct helper_data * data , const char * name , struct string_list * list)', 278, 296), ('set_helper_option( struct transport * transport , const char * name , const char * value)', 298, 336), ('standard_options( struct transport * t)', 338, 362), ('release_helper( struct transport * transport)', 364, 372), ('fetch_with_fetch( struct transport * transport , int nr_heads , struct ref ** to_fetch)', 374, 416), ('get_importer( struct transport * transport , struct child_process * fastimport)', 418, 436), ('get_exporter( struct transport * transport , struct child_process * fastexport , struct string_list * revlist_args)', 438, 465), ('fetch_with_import( struct transport * transport , int nr_heads , struct ref ** to_fetch)', 467, 537), ('run_connect( struct transport * transport , struct strbuf * cmdbuf)', 539, 582), ('process_connect_service( struct transport * transport , const char * name , const char * exec)', 584, 617), ('process_connect( struct transport * transport , int for_push)', 619, 633), ('connect_helper( struct transport * transport , const char * name , const char * exec , int fd [ 2 ])', 635, 651), ('fetch( struct transport * transport , int nr_heads , struct ref ** to_fetch)', 653, 694), ('push_update_ref_status( struct strbuf * buf , struct ref ** ref , struct ref * remote_refs)', 696, 780), ('push_update_refs_status( struct helper_data * data , struct ref * remote_refs , int flags)', 782, 817), ('set_common_push_options( struct transport * transport , const char * name , int flags)', 819, 839), ('push_refs_with_push( struct transport * transport , struct ref * remote_refs , int flags)', 841, 917), ('push_refs_with_export( struct transport * transport , struct ref * remote_refs , int flags)', 919, 997), ('push_refs( struct transport * transport , struct ref * remote_refs , int flags)', 999, 1022), ('has_attribute( const char * attrs , const char * attr)', 1025, 1039), ('get_refs_list( struct transport * transport , int for_push , const struct argv_array * ref_prefixes)', 1041, 1101), ('transport_helper_init( struct transport * transport , const char * name)', 1112, 1126), ('transfer_debug( const char * fmt , ...)', 1138, 1160), ('udt_close_if_finished( struct unidirectional_transfer * t)', 1199, 1209), ('udt_do_read( struct unidirectional_transfer * t)', 1215, 1238), ('udt_do_write( struct unidirectional_transfer * t)', 1243, 1263), ('udt_copy_task_routine( void * udt)', 1274, 1288), ('tloop_join( pthread_t thread , const char * name)', 1296, 1310), ('tloop_spawnwait_tasks( struct bidirectional_transfer_state * s)', 1316, 1334), ('udt_kill_transfer( struct unidirectional_transfer * t)', 1338, 1356), ('tloop_join( pid_t pid , const char * name)', 1362, 1374), ('tloop_spawnwait_tasks( struct bidirectional_transfer_state * s)', 1380, 1412), ('bidirectional_transfer_loop( int input , int output)', 1420, 1444)], '/home/kevin/thesis/git/transport-internal.h': [], '/home/kevin/thesis/git/transport.c': [('transport_color_config( void)', 37, 66), ('transport_get_color( enum color_transport ix)', 68, 73), ('set_upstreams( struct transport * transport , struct ref * refs , int pretend)', 75, 120), ('get_refs_from_bundle( struct transport * transport , int for_push , const struct argv_array * ref_prefixes)', 127, 151), ('fetch_refs_from_bundle( struct transport * transport , int nr_heads , struct ref ** to_fetch)', 153, 159), ('close_bundle( struct transport * transport)', 161, 168), ('set_git_option( struct git_transport_options * opts , const char * name , const char * value)', 180, 231), ('connect_setup( struct transport * transport , int for_push)', 233, 253), ('get_refs_via_connect( struct transport * transport , int for_push , const struct argv_array * ref_prefixes)', 255, 287), ('fetch_refs_via_pack( struct transport * transport , int nr_heads , struct ref ** to_fetch)', 289, 361), ('push_had_errors( struct ref * ref)', 363, 376), ('transport_refs_pushed( struct ref * ref)', 378, 390), ('transport_update_tracking_ref( struct remote * remote , struct ref * ref , int verbose)', 392, 412), ('print_ref_status( char flag , const char * summary , struct ref * to , struct ref * from , const char * msg , int porcelain , int summary_width)', 414, 446), ('print_ok_ref_status( struct ref * ref , int porcelain , int summary_width)', 448, 481), ('print_one_push_status( struct ref * ref , const char * dest , int count , int porcelain , int summary_width)', 483, 552), ('measure_abbrev( const struct object_id * oid , int sofar)', 554, 560), ('transport_summary_width( const struct ref * refs)', 562, 573), ('transport_print_push_status( const char * dest , struct ref * refs , int verbose , int porcelain , unsigned int * reject_reasons)', 575, 621), ('git_transport_push( struct transport * transport , struct ref * remote_refs , int flags)', 623, 675), ('connect_git( struct transport * transport , const char * name , const char * executable , int fd [ 2 ])', 677, 686), ('disconnect_git( struct transport * transport)', 688, 701), ('transport_take_over( struct transport * transport , struct child_process * child)', 712, 733), ('is_file( const char * url)', 735, 741), ('external_specification_len( const char * url)', 743, 746), ('protocol_whitelist( void)', 748, 765), ('parse_protocol_config( const char * key , const char * value)', 773, 784), ('get_protocol_config( const char * type)', 786, 824), ('is_transport_allowed( const char * type , int from_user)', 826, 844), ('transport_check_allowed( const char * type)', 846, 850), ('transport_get( struct remote * remote , const char * url)', 870, 944), ('transport_set_option( struct transport * transport , const char * name , const char * value)', 946, 967), ('transport_set_verbosity( struct transport * transport , int verbosity , int force_progress)', 969, 990), ('die_with_unpushed_submodules( struct string_list * needs_pushing)', 992, 1009), ('run_pre_push_hook( struct transport * transport , struct ref * remote_refs)', 1011, 1071), ('transport_push( struct transport * transport , struct refspec * rs , int flags , unsigned int * reject_reasons)', 1073, 1203), ('transport_get_remote_refs( struct transport * transport , const struct argv_array * ref_prefixes)', 1205, 1216), ('transport_fetch_refs( struct transport * transport , struct ref * refs)', 1218, 1252), ('transport_unlock_pack( struct transport * transport)', 1254, 1260), ('transport_connect( struct transport * transport , const char * name , const char * exec , int fd [ 2 ])', 1262, 1269), ('transport_disconnect( struct transport * transport)', 1271, 1278), ('transport_anonymize_url( const char * url)', 1284, 1324), ('read_alternate_refs( const char * path , alternate_ref_fn * cb , void * data)', 1326, 1360), ('refs_from_alternate_cb( struct alternate_object_database * e , void * data)', 1367, 1391), ('for_each_alternate_ref( alternate_ref_fn fn , void * data)', 1393, 1399)], '/home/kevin/thesis/git/transport.h': [], '/home/kevin/thesis/git/tree-diff.c': [('tree_entry_pathcmp( struct tree_desc * t1 , struct tree_desc * t2)', 49, 65), ('emit_diff_first_parent_only( struct diff_options * opt , struct combine_diff_path * p)', 74, 100), ('path_appendnew( struct combine_diff_path * last , int nparent , const struct strbuf * base , const char * path , int pathlen , unsigned mode , const struct object_id * oid)', 133, 167), ('emit_path( struct combine_diff_path * p , struct strbuf * base , struct diff_options * opt , int nparent , struct tree_desc * t , struct tree_desc * tp , int imin)', 179, 294), ('skip_uninteresting( struct tree_desc * t , struct strbuf * base , struct diff_options * opt)', 296, 310), ('update_tp_entries( struct tree_desc * tp , int nparent)', 397, 403), ('ll_diff_tree_paths( struct combine_diff_path * p , const struct object_id * oid , const struct object_id ** parents_oid , int nparent , struct strbuf * base , struct diff_options * opt)', 405, 547), ('diff_tree_paths( struct combine_diff_path * p , const struct object_id * oid , const struct object_id ** parents_oid , int nparent , struct strbuf * base , struct diff_options * opt)', 549, 565), ('diff_might_be_rename( void)', 572, 576), ('try_to_follow_renames( const struct object_id * old_oid , const struct object_id * new_oid , struct strbuf * base , struct diff_options * opt)', 578, 675), ('ll_diff_tree_oid( const struct object_id * old_oid , const struct object_id * new_oid , struct strbuf * base , struct diff_options * opt)', 677, 696), ('diff_tree_oid( const struct object_id * old_oid , const struct object_id * new_oid , const char * base_str , struct diff_options * opt)', 698, 715), ('diff_root_tree_oid( const struct object_id * new_oid , const char * base , struct diff_options * opt)', 717, 720)], '/home/kevin/thesis/git/tree-walk.c': [('get_mode( const char * str , unsigned int * modep)', 8, 23), ('decode_tree_entry( struct tree_desc * desc , const char * buf , unsigned long size , struct strbuf * err)', 25, 52), ('init_tree_desc_internal( struct tree_desc * desc , const void * buffer , unsigned long size , struct strbuf * err)', 54, 61), ('init_tree_desc( struct tree_desc * desc , const void * buffer , unsigned long size)', 63, 69), ('init_tree_desc_gently( struct tree_desc * desc , const void * buffer , unsigned long size)', 71, 79), ('fill_tree_descriptor( struct tree_desc * desc , const struct object_id * oid)', 81, 93), ('entry_clear( struct name_entry * a)', 95, 98), ('entry_extract( struct tree_desc * t , struct name_entry * a)', 100, 103), ('update_tree_entry_internal( struct tree_desc * desc , struct strbuf * err)', 105, 121), ('update_tree_entry( struct tree_desc * desc)', 123, 129), ('update_tree_entry_gently( struct tree_desc * desc)', 131, 143), ('tree_entry( struct tree_desc * desc , struct name_entry * entry)', 145, 153), ('tree_entry_gently( struct tree_desc * desc , struct name_entry * entry)', 155, 164), ('setup_traverse_info( struct traverse_info * info , const char * base)', 166, 179), ('make_traverse_path( char * path , const struct traverse_info * info , const struct name_entry * n)', 181, 198), ('check_entry_match( const char * a , int a_len , const char * b , int b_len)', 210, 249), ('extended_entry_extract( struct tree_desc_x * t , struct name_entry * a , const char * first , int first_len)', 274, 341), ('update_extended_entry( struct tree_desc_x * t , struct name_entry * a)', 343, 354), ('free_extended_entry( struct tree_desc_x * t)', 356, 364), ('prune_traversal( struct name_entry * e , struct traverse_info * info , struct strbuf * base , int still_interesting)', 366, 376), ('traverse_trees( int n , struct tree_desc * t , struct traverse_info * info)', 378, 486), ('find_tree_entry( struct tree_desc * t , const char * name , struct object_id * result , unsigned * mode)', 494, 527), ('get_tree_entry( const struct object_id * tree_oid , const char * name , struct object_id * oid , unsigned * mode)', 529, 555), ('get_tree_entry_follow_symlinks( struct object_id * tree_oid , const char * name , struct object_id * result , struct strbuf * result_path , unsigned * mode)', 579, 753), ('match_entry( const struct pathspec_item * item , const struct name_entry * entry , int pathlen , const char * match , int matchlen , enum interesting * never_interesting)', 755, 837), ('basecmp( const struct pathspec_item * item , const char * base , const char * match , int len)', 840, 853), ('match_dir_prefix( const struct pathspec_item * item , const char * base , const char * match , int matchlen)', 855, 873), ('match_wildcard_base( const struct pathspec_item * item , const char * base , int baselen , int * matched)', 880, 921), ('do_match( const struct name_entry * entry , struct strbuf * base , int base_offset , const struct pathspec * ps , int exclude)', 929, 1083), ('tree_entry_interesting( const struct name_entry * entry , struct strbuf * base , int base_offset , const struct pathspec * ps)', 1091, 1152)], '/home/kevin/thesis/git/tree-walk.h': [('tree_entry_extract( struct tree_desc * desc , const char ** pathp , unsigned int * modep)', 16, 21), ('tree_entry_len( const struct name_entry * ne)', 23, 26), ('traverse_path_len( const struct traverse_info * info , const struct name_entry * n)', 86, 89)], '/home/kevin/thesis/git/tree.c': [('read_one_entry_opt( struct index_state * istate , const struct object_id * oid , const char * base , int baselen , const char * pathname , unsigned mode , int stage , int opt)', 12, 36), ('read_one_entry( const struct object_id * oid , struct strbuf * base , const char * pathname , unsigned mode , int stage , void * context)', 38, 46), ('read_one_entry_quick( const struct object_id * oid , struct strbuf * base , const char * pathname , unsigned mode , int stage , void * context)', 52, 60), ('read_tree_1( struct tree * tree , struct strbuf * base , int stage , const struct pathspec * pathspec , read_tree_fn_t fn , void * context)', 62, 128), ('read_tree_recursive( struct tree * tree , const char * base , int baselen , int stage , const struct pathspec * pathspec , read_tree_fn_t fn , void * context)', 130, 142), ('cmp_cache_name_compare( const void * a_ , const void * b_)', 144, 152), ('read_tree( struct tree * tree , int stage , struct pathspec * match , struct index_state * istate)', 154, 193), ('lookup_tree( const struct object_id * oid)', 195, 201), ('parse_tree_buffer( struct tree * item , void * buffer , unsigned long size)', 203, 212), ('parse_tree_gently( struct tree * item , int quiet_on_missing)', 214, 233), ('free_tree_buffer( struct tree * tree)', 235, 240), ('parse_tree_indirect( const struct object_id * oid)', 242, 259)], '/home/kevin/thesis/git/tree.h': [('parse_tree( struct tree * tree)', 20, 23)], '/home/kevin/thesis/git/unicode-width.h': [], '/home/kevin/thesis/git/unix-socket.c': [('unix_stream_socket( void)', 4, 10), ('chdir_len( const char * orig , int len)', 12, 18), ('unix_sockaddr_cleanup( struct unix_sockaddr_context * ctx)', 24, 36), ('unix_sockaddr_init( struct sockaddr_un * sa , const char * path , struct unix_sockaddr_context * ctx)', 38, 72), ('unix_stream_connect( const char * path)', 74, 94), ('unix_stream_listen( const char * path)', 96, 123)], '/home/kevin/thesis/git/unix-socket.h': [], '/home/kevin/thesis/git/unpack-trees.c': [('super_prefixed( const char * path)', 65, 98), ('setup_unpack_trees_porcelain( struct unpack_trees_options * opts , const char * cmd)', 100, 185), ('clear_unpack_trees_porcelain( struct unpack_trees_options * opts)', 187, 191), ('do_add_entry( struct unpack_trees_options * o , struct cache_entry * ce , unsigned int set , unsigned int clear)', 193, 204), ('dup_entry( const struct cache_entry * ce)', 206, 213), ('add_entry( struct unpack_trees_options * o , const struct cache_entry * ce , unsigned int set , unsigned int clear)', 215, 220), ('add_rejected_path( struct unpack_trees_options * o , enum unpack_trees_error_types e , const char * path)', 227, 240), ('display_error_msgs( struct unpack_trees_options * o)', 245, 263), ('check_submodule_move_head( const struct cache_entry * ce , const char * old_id , const char * new_id , struct unpack_trees_options * o)', 265, 283), ('load_gitmodules_file( struct index_state * index , struct checkout * state)', 294, 309), ('unlink_entry( const struct cache_entry * ce)', 315, 328), ('get_progress( struct unpack_trees_options * o)', 330, 345), ('check_updates( struct unpack_trees_options * o)', 347, 426), ('apply_sparse_checkout( struct index_state * istate , struct cache_entry * ce , struct unpack_trees_options * o)', 434, 493), ('call_unpack_fn( const struct cache_entry * const * src , struct unpack_trees_options * o)', 495, 502), ('mark_ce_used( struct cache_entry * ce , struct unpack_trees_options * o)', 504, 516), ('mark_all_ce_unused( struct index_state * index)', 518, 523), ('locate_in_src_index( const struct cache_entry * ce , struct unpack_trees_options * o)', 525, 534), ('mark_ce_used_same_name( struct cache_entry * ce , struct unpack_trees_options * o)', 541, 555), ('next_cache_entry( struct unpack_trees_options * o)', 557, 569), ('add_same_unmerged( const struct cache_entry * ce , struct unpack_trees_options * o)', 571, 588), ('unpack_index_entry( struct cache_entry * ce , struct unpack_trees_options * o)', 590, 609), ('restore_cache_bottom( struct traverse_info * info , int bottom)', 613, 620), ('switch_cache_bottom( struct traverse_info * info)', 622, 637), ('are_same_oid( struct name_entry * name_j , struct name_entry * name_k)', 639, 642), ('traverse_trees_recursive( int n , unsigned long dirmask , unsigned long df_conflicts , struct name_entry * names , struct traverse_info * info)', 644, 704), ('do_compare_entry_piecewise( const struct cache_entry * ce , const struct traverse_info * info , const struct name_entry * n)', 715, 738), ('do_compare_entry( const struct cache_entry * ce , const struct traverse_info * info , const struct name_entry * n)', 740, 771), ('compare_entry( const struct cache_entry * ce , const struct traverse_info * info , const struct name_entry * n)', 773, 784), ('ce_in_traverse_path( const struct cache_entry * ce , const struct traverse_info * info)', 786, 798), ('create_ce_entry( const struct traverse_info * info , const struct name_entry * n , int stage)', 800, 812), ('unpack_nondirectories( int n , unsigned long mask , unsigned long dirmask , struct cache_entry ** src , const struct name_entry * names , const struct traverse_info * info)', 814, 869), ('unpack_failed( struct unpack_trees_options * o , const char * message)', 871, 880), ('find_cache_pos( struct traverse_info * info , const struct name_entry * p)', 888, 952), ('find_cache_entry( struct traverse_info * info , const struct name_entry * p)', 954, 964), ('debug_path( struct traverse_info * info)', 966, 974), ('debug_name_entry( int i , struct name_entry * n)', 976, 981), ('debug_unpack_callback( int n , unsigned long mask , unsigned long dirmask , struct name_entry * names , struct traverse_info * info)', 983, 996), ('unpack_callback( int n , unsigned long mask , unsigned long dirmask , struct name_entry * names , struct traverse_info * info)', 998, 1086), ('clear_ce_flags_dir( struct cache_entry ** cache , int nr , struct strbuf * prefix , char * basename , int select_mask , int clear_mask , struct exclude_list * el , int defval)', 1094, 1131), ('clear_ce_flags_1( struct cache_entry ** cache , int nr , struct strbuf * prefix , int select_mask , int clear_mask , struct exclude_list * el , int defval)', 1148, 1214), ('clear_ce_flags( struct cache_entry ** cache , int nr , int select_mask , int clear_mask , struct exclude_list * el)', 1216, 1228), ('mark_new_skip_worktree( struct exclude_list * el , struct index_state * the_index , int select_flag , int skip_wt_flag)', 1233, 1261), ('unpack_trees( unsigned len , struct tree_desc * t , struct unpack_trees_options * o)', 1272, 1456), ('reject_merge( const struct cache_entry * ce , struct unpack_trees_options * o)', 1460, 1465), ('same( const struct cache_entry * a , const struct cache_entry * b)', 1467, 1477), ('verify_uptodate_1( const struct cache_entry * ce , struct unpack_trees_options * o , enum unpack_trees_error_types error_type)', 1484, 1532), ('verify_uptodate( const struct cache_entry * ce , struct unpack_trees_options * o)', 1534, 1540), ('verify_uptodate_sparse( const struct cache_entry * ce , struct unpack_trees_options * o)', 1542, 1546), ('invalidate_ce_path( const struct cache_entry * ce , struct unpack_trees_options * o)', 1548, 1555), ('verify_clean_submodule( const char * old_sha1 , const struct cache_entry * ce , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1564, 1574), ('verify_clean_subdirectory( const struct cache_entry * ce , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1576, 1645), ('icase_exists( struct unpack_trees_options * o , const char * name , int len , struct stat * st)', 1655, 1661), ('check_ok_to_remove( const char * name , int len , int dtype , const struct cache_entry * ce , struct stat * st , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1663, 1713), ('verify_absent_1( const struct cache_entry * ce , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1719, 1763), ('verify_absent( const struct cache_entry * ce , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1765, 1772), ('verify_absent_sparse( const struct cache_entry * ce , enum unpack_trees_error_types error_type , struct unpack_trees_options * o)', 1774, 1783), ('merged_entry( const struct cache_entry * ce , const struct cache_entry * old , struct unpack_trees_options * o)', 1785, 1861), ('deleted_entry( const struct cache_entry * ce , const struct cache_entry * old , struct unpack_trees_options * o)', 1863, 1878), ('keep_entry( const struct cache_entry * ce , struct unpack_trees_options * o)', 1880, 1885), ('show_stage_entry( FILE * o , const char * label , const struct cache_entry * ce)', 1888, 1900), ('threeway_merge( const struct cache_entry * const * stages , struct unpack_trees_options * o)', 1903, 2065), ('twoway_merge( const struct cache_entry * const * src , struct unpack_trees_options * o)', 2076, 2132), ('bind_merge( const struct cache_entry * const * src , struct unpack_trees_options * o)', 2140, 2158), ('oneway_merge( const struct cache_entry * const * src , struct unpack_trees_options * o)', 2166, 2194)], '/home/kevin/thesis/git/unpack-trees.h': [], '/home/kevin/thesis/git/upload-pack.c': [('reset_timeout( void)', 69, 72), ('send_client_data( int fd , const char * data , ssize_t sz)', 74, 89), ('write_one_shallow( const struct commit_graft * graft , void * cb_data)', 91, 97), ('create_pack_file( void)', 99, 301), ('got_oid( const char * hex , struct object_id * oid)', 303, 335), ('reachable( struct commit * want)', 337, 367), ('ok_to_give_up( void)', 369, 395), ('get_common_commits( void)', 397, 469), ('is_our_ref( struct object * o)', 471, 476), ('do_reachable_revlist( struct child_process * cmd , struct object_array * src , struct object_array * reachable)', 481, 550), ('get_reachable_list( struct object_array * src , struct object_array * reachable)', 552, 590), ('has_unreachable( struct object_array * src)', 592, 627), ('check_non_tip( void)', 629, 652), ('send_shallow( struct commit_list * result)', 654, 666), ('send_unshallow( const struct object_array * shallows)', 668, 700), ('deepen( int depth , int deepen_relative , struct object_array * shallows)', 702, 733), ('deepen_by_rev_list( int ac , const char ** av , struct object_array * shallows)', 735, 744), ('send_shallow_list( int depth , int deepen_rev_list , timestamp_t deepen_since , struct string_list * deepen_not , struct object_array * shallows)', 747, 791), ('process_shallow( const char * line , struct object_array * shallows)', 793, 814), ('process_deepen( const char * line , int * depth)', 816, 828), ('process_deepen_since( const char * line , timestamp_t * deepen_since , int * deepen_rev_list)', 830, 844), ('process_deepen_not( const char * line , struct string_list * deepen_not , int * deepen_rev_list)', 846, 860), ('receive_needs( void)', 862, 964), ('mark_our_ref( const char * refname , const char * refname_full , const struct object_id * oid)', 967, 978), ('check_ref( const char * refname_full , const struct object_id * oid , int flag , void * cb_data)', 980, 987), ('format_symref_info( struct strbuf * buf , struct string_list * symref)', 989, 997), ('send_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 999, 1034), ('find_symref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 1036, 1050), ('upload_pack_config( const char * var , const char * value , void * unused)', 1052, 1080), ('upload_pack( struct upload_pack_options * options)', 1082, 1113), ('upload_pack_data_init( struct upload_pack_data * data)', 1135, 1147), ('upload_pack_data_clear( struct upload_pack_data * data)', 1149, 1155), ('parse_want( const char * line)', 1157, 1186), ('parse_have( const char * line , struct oid_array * haves)', 1188, 1201), ('process_args( struct packet_reader * request , struct upload_pack_data * data)', 1203, 1263), ('process_haves( struct oid_array * haves , struct oid_array * common)', 1265, 1302), ('send_acks( struct oid_array * acks , struct strbuf * response)', 1304, 1326), ('process_haves_and_send_acks( struct upload_pack_data * data)', 1328, 1353), ('send_shallow_info( struct upload_pack_data * data)', 1355, 1370), ('upload_pack_v2( struct repository * r , struct argv_array * keys , struct packet_reader * request)', 1379, 1434), ('upload_pack_advertise( struct repository * r , struct strbuf * value)', 1436, 1449)], '/home/kevin/thesis/git/upload-pack.h': [], '/home/kevin/thesis/git/url.c': [('is_urlschemechar( int first_flag , int ch)', 4, 17), ('is_url( const char * url)', 19, 30), ('url_decode_internal( const char ** query , int len , const char * stop_at , struct strbuf * out , int decode_plus)', 32, 68), ('url_decode( const char * url)', 70, 73), ('url_decode_mem( const char * url , int len)', 75, 87), ('url_decode_parameter_name( const char ** query)', 89, 93), ('url_decode_parameter_value( const char ** query)', 95, 99), ('end_url_with_slash( struct strbuf * buf , const char * url)', 101, 105), ('str_end_url_with_slash( const char * url , char ** dest)', 107, 112)], '/home/kevin/thesis/git/url.h': [], '/home/kevin/thesis/git/urlmatch.c': [('append_normalized_escapes( struct strbuf * buf , const char * from , size_t from_len , const char * esc_extra , const char * esc_ok)', 14, 64), ('end_of_token( const char * s , int c , size_t n)', 66, 72), ('match_host( const struct url_info * url_info , const struct url_info * pattern_info)', 74, 107), ('url_normalize_1( const char * url , struct url_info * out_info , char allow_globs)', 109, 431), ('url_normalize( const char * url , struct url_info * out_info)', 433, 436), ('url_match_prefix( const char * url , const char * url_prefix , size_t url_prefix_len)', 438, 468), ('match_urls( const struct url_info * url , const struct url_info * url_prefix , struct urlmatch_item * match)', 470, 537), ('cmp_matches( const struct urlmatch_item * a , const struct urlmatch_item * b)', 539, 549), ('urlmatch_config_entry( const char * var , const char * value , void * cb)', 551, 607)], '/home/kevin/thesis/git/urlmatch.h': [], '/home/kevin/thesis/git/usage.c': [('vreportf( const char * prefix , const char * err , va_list params)', 9, 20), ('usage_builtin( const char * err , va_list params)', 22, 26), ('die_builtin( const char * err , va_list params)', 28, 32), ('error_builtin( const char * err , va_list params)', 34, 37), ('warn_builtin( const char * warn , va_list params)', 39, 42), ('die_is_recursing_builtin( void)', 44, 64), ('set_die_routine( NORETURN_PTR void(*routine)(constchar*err,va_listparams))', 74, 77), ('set_error_routine( void(*routine)(constchar*err,va_listparams))', 79, 82), ('void( * get_error_routine(void))( const char * err , va_list params)', 84, 87), ('set_warn_routine( void(*routine)(constchar*warn,va_listparams))', 89, 92), ('void( * get_warn_routine(void))( const char * warn , va_list params)', 94, 97), ('set_die_is_recursing_routine( int(*routine)(void))', 99, 102), ('usagef( const char * err , ...)', 104, 111), ('usage( const char * err)', 113, 116), ('die( const char * err , ...)', 118, 130), ('fmt_with_err( char * buf , int n , const char * fmt)', 132, 154), ('die_errno( const char * fmt , ...)', 156, 170), ('error_errno( const char * fmt , ...)', 173, 182), ('error( const char * err , ...)', 185, 193), ('warning_errno( const char * warn , ...)', 195, 203), ('warning( const char * warn , ...)', 205, 212), ('BUG_vfl( const char * file , int line , const char * fmt , va_list params)', 217, 231), ('BUG_fl( const char * file , int line , const char * fmt , ...)', 234, 240), ('BUG( const char * fmt , ...)', 242, 248), ('unleak_memory( const void * ptr , size_t len)', 252, 263)], '/home/kevin/thesis/git/userdiff.c': [('userdiff_find_by_namelen( const char * k , int len)', 192, 206), ('parse_funcname( struct userdiff_funcname * f , const char * k , const char * v , int cflags)', 208, 215), ('parse_tristate( int * b , const char * k , const char * v)', 217, 224), ('parse_bool( int * b , const char * k , const char * v)', 226, 230), ('userdiff_config( const char * k , const char * v)', 232, 266), ('userdiff_find_by_name( const char * name)', 268, 271), ('userdiff_find_by_path( const char * path)', 273, 291), ('userdiff_get_textconv( struct userdiff_driver * driver)', 293, 309)], '/home/kevin/thesis/git/userdiff.h': [], '/home/kevin/thesis/git/utf8.c': [('display_mode_esc_sequence_len( const char * s)', 12, 24), ('bisearch( ucs_char_t ucs , const struct interval * table , int max)', 27, 45), ('git_wcwidth( ucs_char_t ch)', 79, 103), ('pick_one_utf8_char( const char ** start , size_t * remainder_p)', 117, 184), ('utf8_width( const char ** start , size_t * remainder_p)', 193, 199), ('utf8_strnwidth( const char * string , int len , int skip_ansi)', 206, 221), ('utf8_strwidth( const char * string)', 223, 226), ('is_utf8( const char * text)', 228, 240), ('strbuf_add_indented_text( struct strbuf * buf , const char * text , int indent , int indent2)', 242, 256), ('strbuf_add_wrapped_text( struct strbuf * buf , const char * text , int indent1 , int indent2 , int width)', 264, 344), ('strbuf_add_wrapped_bytes( struct strbuf * buf , const char * data , int len , int indent , int indent2 , int width)', 346, 352), ('strbuf_utf8_replace( struct strbuf * sb_src , int pos , int width , const char * subst)', 354, 402), ('same_utf_encoding( const char * src , const char * dst)', 409, 418), ('is_encoding_utf8( const char * name)', 420, 427), ('same_encoding( const char * src , const char * dst)', 429, 440), ('utf8_fprintf( FILE * stream , const char * format , ...)', 446, 461), ('reencode_string_iconv( const char * in , size_t insz , iconv_t conv , int * outsz_p)', 473, 513), ('fallback_encoding( const char * name)', 515, 535), ('reencode_string_len( const char * in , int insz , const char * out_encoding , const char * in_encoding , int * outsz)', 537, 560), ('has_bom_prefix( const char * data , size_t len , const char * bom , size_t bom_len)', 563, 567), ('has_prohibited_utf_bom( const char * enc , const char * data , size_t len)', 574, 587), ('is_missing_required_utf_bom( const char * enc , const char * data , size_t len)', 589, 600), ('mbs_chrlen( const char ** text , size_t * remainder_p , const char * encoding)', 611, 639), ('next_hfs_char( const char ** in)', 646, 682), ('is_hfs_dot_generic( const char * path , const char * needle , size_t needle_len)', 684, 716), ('is_hfs_dot_str( const char * path , const char * needle)', 722, 725), ('is_hfs_dotgit( const char * path)', 727, 730), ('is_hfs_dotgitmodules( const char * path)', 732, 735), ('is_hfs_dotgitignore( const char * path)', 737, 740), ('is_hfs_dotgitattributes( const char * path)', 742, 745), ('skip_utf8_bom( char ** text , size_t len)', 749, 756), ('strbuf_utf8_align( struct strbuf * buf , align_type position , unsigned int width , const char * s)', 758, 777)], '/home/kevin/thesis/git/utf8.h': [('reencode_string_len( const char * a , int b , const char * c , const char * d , int * e)', 34, 36), ('reencode_string( const char * in , const char * out_encoding , const char * in_encoding)', 39, 46)], '/home/kevin/thesis/git/varint.c': [('decode_varint( const unsigned char ** bufp)', 4, 18), ('encode_varint( uintmax_t value , unsigned char * buf)', 20, 30)], '/home/kevin/thesis/git/varint.h': [], '/home/kevin/thesis/git/version.c': [('git_user_agent( void)', 8, 19), ('git_user_agent_sanitized( void)', 21, 39)], '/home/kevin/thesis/git/version.h': [], '/home/kevin/thesis/git/versioncmp.c': [('find_better_matching_suffix( const char * tagname , const char * suffix , int suffix_len , int start , int conf_pos , struct suffix_match * match)', 34, 51), ('swap_prereleases( const char * s1 , const char * s2 , int off , int * diff)', 71, 107), ('versioncmp( const char * s1 , const char * s2)', 116, 193)], '/home/kevin/thesis/git/walker.c': [('walker_say( struct walker * walker , const char * fmt , ...)', 12, 20), ('report_missing( const struct object * obj)', 22, 30), ('process_tree( struct walker * walker , struct tree * tree)', 34, 64), ('process_commit( struct walker * walker , struct commit * commit)', 73, 100), ('process_tag( struct walker * walker , struct tag * tag)', 102, 107), ('process_object( struct walker * walker , struct object * obj)', 112, 135), ('process( struct walker * walker , struct object * obj)', 137, 156), ('loop( struct walker * walker)', 158, 185), ('interpret_target( struct walker * walker , char * target , struct object_id * oid)', 187, 201), ('mark_complete( const char * path , const struct object_id * oid , int flag , void * cb_data)', 203, 213), ('walker_targets_stdin( char ** * target , const char ** * write_ref)', 215, 242), ('walker_targets_free( int targets , char ** target , const char ** write_ref)', 244, 251), ('walker_fetch( struct walker * walker , int targets , char ** target , const char ** write_ref , const char * write_ref_log_details)', 253, 325), ('walker_free( struct walker * walker)', 327, 331)], '/home/kevin/thesis/git/walker.h': [], '/home/kevin/thesis/git/wildmatch.c': [('dowild( const uchar * p , const uchar * text , unsigned int flags)', 55, 272), ('wildmatch( const char * pattern , const char * text , unsigned int flags)', 275, 278)], '/home/kevin/thesis/git/wildmatch.h': [], '/home/kevin/thesis/git/worktree.c': [('free_worktrees( struct worktree ** worktrees)', 9, 21), ('add_head_info( struct worktree * wt)', 26, 42), ('get_main_worktree( void)', 47, 69), ('get_linked_worktree( const char * id)', 71, 104), ('mark_current_worktree( struct worktree ** worktrees)', 106, 121), ('compare_worktree( const void * a_ , const void * b_)', 123, 128), ('get_worktrees( unsigned flags)', 130, 170), ('get_worktree_git_dir( const struct worktree * wt)', 172, 180), ('find_worktree_by_suffix( struct worktree ** list , const char * suffix)', 182, 205), ('find_worktree( struct worktree ** list , const char * prefix , const char * arg)', 207, 227), ('is_main_worktree( const struct worktree * wt)', 229, 232), ('is_worktree_locked( struct worktree * wt)', 234, 255), ('strbuf_addf_gently( struct strbuf * buf , const char * fmt , ...)', 258, 268), ('validate_worktree( const struct worktree * wt , struct strbuf * errmsg , unsigned flags)', 270, 334), ('update_worktree_location( struct worktree * wt , const char * path_)', 336, 351), ('is_worktree_being_rebased( const struct worktree * wt , const char * target)', 353, 369), ('is_worktree_being_bisected( const struct worktree * wt , const char * target)', 371, 384), ('find_shared_symref( const char * symref , const char * target)', 392, 434), ('submodule_uses_worktrees( const char * path)', 436, 484), ('other_head_refs( each_ref_fn fn , void * cb_data)', 486, 506)], '/home/kevin/thesis/git/worktree.h': [], '/home/kevin/thesis/git/wrapper.c': [('do_nothing( size_t size)', 7, 9), ('memory_limit_check( size_t size , int gentle)', 13, 31), ('set_try_to_free_routine( try_to_free_t routine)', 33, 40), ('xstrdup( const char * str)', 42, 52), ('do_xmalloc( size_t size , int gentle)', 54, 83), ('xmalloc( size_t size)', 85, 88), ('do_xmallocz( size_t size , int gentle)', 90, 104), ('xmallocz( size_t size)', 106, 109), ('xmallocz_gently( size_t size)', 111, 114), ('xmemdupz( const void * data , size_t len)', 122, 125), ('xstrndup( const char * str , size_t len)', 127, 131), ('xrealloc( void * ptr , size_t size)', 133, 150), ('xcalloc( size_t nmemb , size_t size)', 152, 172), ('xopen( const char * path , int oflag , ...)', 199, 229), ('handle_nonblock( int fd , short poll_events , int err)', 231, 247), ('xread( int fd , void * buf , size_t len)', 254, 269), ('xwrite( int fd , const void * buf , size_t len)', 276, 292), ('xpread( int fd , void * buf , size_t len , off_t offset)', 299, 310), ('read_in_full( int fd , void * buf , size_t count)', 312, 329), ('write_in_full( int fd , const void * buf , size_t count)', 331, 350), ('pread_in_full( int fd , void * buf , size_t count , off_t offset)', 352, 370), ('xdup( int fd)', 372, 378), ('xfopen( const char * path , const char * mode)', 383, 399), ('xfdopen( int fd , const char * mode)', 401, 407), ('fopen_for_writing( const char * path)', 409, 420), ('warn_on_inaccessible( const char * path)', 422, 425), ('warn_on_fopen_errors( const char * path)', 427, 435), ('fopen_or_warn( const char * path , const char * mode)', 437, 446), ('xmkstemp( char * filename_template)', 448, 468), ('git_mkstemps_mode( char * pattern , int suffix_len , int mode)', 475, 536), ('git_mkstemp_mode( char * pattern , int mode)', 538, 542), ('xmkstemp_mode( char * filename_template , int mode)', 544, 564), ('warn_if_unremovable( const char * op , const char * file , int rc)', 566, 575), ('unlink_or_msg( const char * file , struct strbuf * err)', 577, 589), ('unlink_or_warn( const char * file)', 591, 594), ('rmdir_or_warn( const char * file)', 596, 599), ('remove_or_warn( unsigned int mode , const char * file)', 601, 604), ('access_error_is_ok( int err , unsigned flag)', 606, 610), ('access_or_warn( const char * path , int mode , unsigned flag)', 612, 618), ('access_or_die( const char * path , int mode , unsigned flag)', 620, 626), ('xgetcwd( void)', 628, 634), ('xsnprintf( char * dst , size_t max , const char * fmt , ...)', 636, 650), ('write_file_buf( const char * path , const char * buf , size_t len)', 652, 659), ('write_file( const char * path , const char * fmt , ...)', 661, 674), ('sleep_millisec( int millisec)', 676, 679), ('xgethostname( char * buf , size_t len)', 681, 692)], '/home/kevin/thesis/git/write-or-die.c': [('maybe_flush_or_die( FILE * f , const char * desc)', 17, 41), ('fprintf_or_die( FILE * f , const char * fmt , ...)', 43, 56), ('fsync_or_die( int fd , const char * msg)', 58, 63), ('write_or_die( int fd , const void * buf , size_t count)', 65, 71)], '/home/kevin/thesis/git/ws.c': [('parse_whitespace_rule( const char * string)', 25, 72), ('whitespace_rule( const char * pathname)', 74, 107), ('whitespace_error_string( unsigned ws)', 110, 140), ('ws_check_emit_1( const char * line , int len , unsigned ws_rule , FILE * stream , const char * set , const char * reset , const char * ws)', 143, 246), ('ws_check_emit( const char * line , int len , unsigned ws_rule , FILE * stream , const char * set , const char * reset , const char * ws)', 248, 253), ('ws_check( const char * line , int len , unsigned ws_rule)', 255, 258), ('ws_blank_line( const char * line , int len , unsigned ws_rule)', 260, 273), ('ws_fix_copy( struct strbuf * dst , const char * src , int len , unsigned ws_rule , int * error_count)', 276, 388)], '/home/kevin/thesis/git/wt-status.c': [('color( int slot , struct wt_status * s)', 36, 44), ('status_vprintf( struct wt_status * s , int at_bol , const char * color , const char * fmt , va_list ap , const char * trail)', 46, 90), ('status_printf_ln( struct wt_status * s , const char * color , const char * fmt , ...)', 92, 100), ('status_printf( struct wt_status * s , const char * color , const char * fmt , ...)', 102, 110), ('status_printf_more( struct wt_status * s , const char * color , const char * fmt , ...)', 112, 120), ('wt_status_prepare( struct wt_status * s)', 122, 144), ('wt_longstatus_print_unmerged_header( struct wt_status * s)', 146, 196), ('wt_longstatus_print_cached_header( struct wt_status * s)', 198, 212), ('wt_longstatus_print_dirty_header( struct wt_status * s , int has_deleted , int has_dirty_submodules)', 214, 231), ('wt_longstatus_print_other_header( struct wt_status * s , const char * what , const char * how)', 233, 243), ('wt_longstatus_print_trailer( struct wt_status * s)', 245, 248), ('wt_status_unmerged_status_string( int stagemask)', 252, 272), ('wt_status_diff_status_string( int status)', 274, 296), ('maxwidth( const char *(*label)(int) , int minval , int maxval)', 298, 309), ('wt_longstatus_print_unmerged_data( struct wt_status * s , struct string_list_item * it)', 311, 336), ('wt_longstatus_print_change_data( struct wt_status * s , int change_type , struct string_list_item * it)', 338, 417), ('short_submodule_status( struct wt_status_change_data * d)', 419, 428), ('wt_status_collect_changed_cb( struct diff_queue_struct * q , struct diff_options * options , void * data)', 430, 495), ('unmerged_mask( const char * path)', 497, 515), ('wt_status_collect_updated_cb( struct diff_queue_struct * q , struct diff_options * options , void * data)', 517, 579), ('wt_status_collect_changes_worktree( struct wt_status * s)', 581, 603), ('wt_status_collect_changes_index( struct wt_status * s)', 605, 639), ('wt_status_collect_changes_initial( struct wt_status * s)', 641, 675), ('wt_status_collect_untracked( struct wt_status * s)', 677, 725), ('wt_status_collect( struct wt_status * s)', 727, 736), ('wt_longstatus_print_unmerged( struct wt_status * s)', 738, 759), ('wt_longstatus_print_updated( struct wt_status * s)', 761, 783), ('wt_status_check_worktree_changes( struct wt_status * s , int * dirty_submodules)', 790, 812), ('wt_longstatus_print_changed( struct wt_status * s)', 814, 835), ('stash_count_refs( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 837, 844), ('wt_longstatus_print_stash_summary( struct wt_status * s)', 846, 856), ('wt_longstatus_print_submodule_summary( struct wt_status * s , int uncommitted)', 858, 902), ('wt_longstatus_print_other( struct wt_status * s , struct string_list * l , const char * what , const char * how)', 904, 951), ('wt_status_locate_end( const char * s , size_t len)', 953, 965), ('wt_status_add_cut_line( FILE * fp)', 967, 976), ('wt_longstatus_print_verbose( struct wt_status * s)', 978, 1030), ('wt_longstatus_print_tracking( struct wt_status * s)', 1032, 1064), ('has_unmerged( struct wt_status * s)', 1066, 1077), ('show_merge_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1079, 1100), ('show_am_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1102, 1121), ('read_line_from_git_path( const char * filename)', 1123, 1139), ('split_commit_in_progress( struct wt_status * s)', 1141, 1168), ('abbrev_sha1_in_line( struct strbuf * line)', 1179, 1208), ('read_rebase_todolist( const char * fname , struct string_list * lines)', 1210, 1233), ('show_rebase_information( struct wt_status * s , struct wt_status_state * state , const char * color)', 1235, 1287), ('print_rebase_state( struct wt_status * s , struct wt_status_state * state , const char * color)', 1289, 1301), ('show_rebase_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1303, 1354), ('show_cherry_pick_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1356, 1373), ('show_revert_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1375, 1392), ('show_bisect_in_progress( struct wt_status * s , struct wt_status_state * state , const char * color)', 1394, 1409), ('get_branch( const struct worktree * wt , const char * path)', 1414, 1443), ('grab_1st_switch( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 1450, 1473), ('wt_status_get_detached_from( struct wt_status_state * state)', 1475, 1507), ('wt_status_check_rebase( const struct worktree * wt , struct wt_status_state * state)', 1509, 1534), ('wt_status_check_bisect( const struct worktree * wt , struct wt_status_state * state)', 1536, 1547), ('wt_status_get_state( struct wt_status_state * state , int get_detached_from)', 1549, 1573), ('wt_longstatus_print_state( struct wt_status * s , struct wt_status_state * state)', 1575, 1591), ('wt_longstatus_print( struct wt_status * s)', 1593, 1708), ('wt_shortstatus_unmerged( struct string_list_item * it , struct wt_status * s)', 1710, 1735), ('wt_shortstatus_status( struct string_list_item * it , struct wt_status * s)', 1737, 1778), ('wt_shortstatus_other( struct string_list_item * it , struct wt_status * s , const char * sign)', 1780, 1793), ('wt_shortstatus_print_tracking( struct wt_status * s)', 1795, 1869), ('wt_shortstatus_print( struct wt_status * s)', 1871, 1891), ('wt_porcelain_print( struct wt_status * s)', 1893, 1900), ('wt_porcelain_v2_print_tracking( struct wt_status * s)', 1935, 1998), ('wt_porcelain_v2_submodule_state( struct wt_status_change_data * d , char sub [ 5 ])', 2004, 2022), ('wt_porcelain_v2_fix_up_changed( struct string_list_item * it , struct wt_status * s)', 2027, 2071), ('wt_porcelain_v2_print_changed_entry( struct string_list_item * it , struct wt_status * s)', 2076, 2135), ('wt_porcelain_v2_print_unmerged_entry( struct string_list_item * it , struct wt_status * s)', 2140, 2216), ('wt_porcelain_v2_print_other( struct string_list_item * it , struct wt_status * s , char prefix)', 2221, 2241), ('wt_porcelain_v2_print( struct wt_status * s)', 2253, 2285), ('wt_status_print( struct wt_status * s)', 2287, 2307), ('has_unstaged_changes( int ignore_submodules)', 2312, 2326), ('has_uncommitted_changes( int ignore_submodules)', 2331, 2347), ('require_clean_work_tree( const char * action , const char * hint , int ignore_submodules , int gently)', 2353, 2387)], '/home/kevin/thesis/git/wt-status.h': [], '/home/kevin/thesis/git/xdiff-interface.c': [('parse_num( char ** cp_p , int * num_p)', 16, 28), ('parse_hunk_header( char * line , int len , int * ob , int * on , int * nb , int * nn)', 30, 59), ('consume_one( void * priv_ , char * s , unsigned long size)', 61, 73), ('xdiff_outf( void * priv_ , mmbuffer_t * mb , int nbuf)', 75, 101), ('trim_common_tail( mmfile_t * a , mmfile_t * b)', 107, 126), ('xdi_diff( mmfile_t * mf1 , mmfile_t * mf2 , xpparam_t const * xpp , xdemitconf_t const * xecfg , xdemitcb_t * xecb)', 128, 140), ('xdi_diff_outf( mmfile_t * mf1 , mmfile_t * mf2 , xdiff_emit_consume_fn fn , void * consume_callback_data , xpparam_t const * xpp , xdemitconf_t const * xecfg)', 142, 160), ('read_mmfile( mmfile_t * ptr , const char * filename)', 162, 181), ('read_mmblob( mmfile_t * ptr , const struct object_id * oid)', 183, 198), ('buffer_is_binary( const char * ptr , unsigned long size)', 201, 206), ('ff_regexp( const char * line , long len , char * buffer , long buffer_size , void * priv)', 216, 251), ('xdiff_set_find_func( xdemitconf_t * xecfg , const char * value , int cflags)', 253, 283), ('xdiff_clear_find_func( xdemitconf_t * xecfg)', 285, 298), ('xdiff_hash_string( const char * s , size_t len , long flags)', 300, 303), ('xdiff_compare_lines( const char * l1 , long s1 , const char * l2 , long s2 , long flags)', 305, 309), ('git_xmerge_config( const char * var , const char * value , void * cb)', 313, 328)], '/home/kevin/thesis/git/xdiff-interface.h': [], '/home/kevin/thesis/git/zlib.c': [('zerr_to_string( int status)', 7, 23), ('zlib_buf_cap( unsigned long len)', 32, 35), ('zlib_pre_call( git_zstream * s)', 37, 45), ('zlib_post_call( git_zstream * s)', 47, 65), ('git_inflate_init( git_zstream * strm)', 67, 78), ('git_inflate_init_gzip_only( git_zstream * strm)', 80, 96), ('git_inflate_end( git_zstream * strm)', 98, 109), ('git_inflate( git_zstream * strm , int flush)', 111, 147), ('git_deflate_bound( git_zstream * strm , unsigned long size)', 153, 156), ('git_deflate_init( git_zstream * strm , int level)', 158, 170), ('do_git_deflate_init( git_zstream * strm , int level , int windowBits)', 172, 186), ('git_deflate_init_gzip( git_zstream * strm , int level)', 188, 195), ('git_deflate_init_raw( git_zstream * strm , int level)', 197, 204), ('git_deflate_abort( git_zstream * strm)', 206, 214), ('git_deflate_end( git_zstream * strm)', 216, 224), ('git_deflate_end_gently( git_zstream * strm)', 226, 234), ('git_deflate( git_zstream * strm , int flush)', 236, 273)], '/home/kevin/thesis/git/Documentation/asciidoctor-extensions.rb': [('process parent , target , attrs )', 11, 21)], '/home/kevin/thesis/git/block-sha1/sha1.c': [('blk_SHA1_Block( blk_SHA_CTX * ctx , const void * block)', 86, 192), ('blk_SHA1_Init( blk_SHA_CTX * ctx)', 194, 204), ('blk_SHA1_Update( blk_SHA_CTX * ctx , const void * data , unsigned long len)', 206, 232), ('blk_SHA1_Final( unsigned char hashout [ 20 ] , blk_SHA_CTX * ctx)', 234, 251)], '/home/kevin/thesis/git/block-sha1/sha1.h': [], '/home/kevin/thesis/git/builtin/add.c': [('chmod_pathspec( struct pathspec * pathspec , char flip)', 36, 49), ('fix_unmerged_status( struct diff_filepair * p , struct update_callback_data * data)', 51, 70), ('update_callback( struct diff_queue_struct * q , struct diff_options * opt , void * cbdata)', 72, 102), ('add_files_to_cache( const char * prefix , const struct pathspec * pathspec , int flags)', 104, 125), ('renormalize_tracked_files( const struct pathspec * pathspec , int flags)', 127, 144), ('prune_directory( struct dir_struct * dir , struct pathspec * pathspec , int prefix)', 146, 164), ('refresh( int verbose , const struct pathspec * pathspec)', 166, 180), ('run_add_interactive( const char * revision , const char * patch_mode , const struct pathspec * pathspec)', 182, 201), ('interactive_add( int argc , const char ** argv , const char * prefix , int patch)', 203, 216), ('edit_patch( int argc , const char ** argv , const char * prefix)', 218, 266), ('ignore_removal_cb( const struct option * opt , const char * arg , int unset)', 281, 286), ('add_config( const char * var , const char * value , void * cb)', 313, 321), ('check_embedded_repo( const char * path)', 339, 360), ('add_files( struct dir_struct * dir , int flags)', 362, 383), ('cmd_add( int argc , const char ** argv , const char * prefix)', 385, 543)], '/home/kevin/thesis/git/builtin/am.c': [('is_empty_file( const char * filename)', 39, 50), ('linelen( const char * msg)', 55, 58), ('str_isspace( const char * str)', 63, 70), ('am_state_init( struct am_state * state)', 141, 163), ('am_state_release( struct am_state * state)', 168, 176), ('am_path( const struct am_state * state , const char * path)', 181, 184), ('write_state_text( const struct am_state * state , const char * name , const char * string)', 189, 193), ('write_state_count( const struct am_state * state , const char * name , int value)', 195, 199), ('write_state_bool( const struct am_state * state , const char * name , int value)', 201, 205), ('say( const struct am_state * state , FILE * fp , const char * fmt , ...)', 211, 221), ('am_in_progress( const struct am_state * state)', 226, 237), ('read_state_file( struct strbuf * sb , const struct am_state * state , const char * file , int trim)', 244, 260), ('parse_key_value_squoted( char * buf , struct string_list * list)', 266, 286), ('read_author_script( struct am_state * state)', 304, 340), ('write_author_script( const struct am_state * state)', 346, 365), ('read_commit_msg( struct am_state * state)', 374, 387), ('write_commit_msg( const struct am_state * state)', 392, 396), ('am_load( struct am_state * state)', 401, 470), ('am_destroy( const struct am_state * state)', 476, 483), ('run_applypatch_msg_hook( struct am_state * state)', 488, 503), ('run_post_rewrite_hook( const struct am_state * state)', 508, 527), ('copy_notes_for_rebase( const struct am_state * state)', 535, 585), ('is_mail( FILE * fp)', 594, 626), ('detect_patch_format( const char ** paths)', 633, 700), ('split_mail_mbox( struct am_state * state , const char ** paths , int keep_cr , int mboxrd)', 706, 735), ('split_mail_conv( mail_conv_fn fn , struct am_state * state , const char ** paths , int keep_cr)', 750, 796), ('stgit_patch_to_mail( FILE * out , FILE * in , int keep_cr)', 802, 833), ('split_mail_stgit_series( struct am_state * state , const char ** paths , int keep_cr)', 844, 879), ('hg_patch_to_mail( FILE * out , FILE * in , int keep_cr)', 885, 950), ('split_mail( struct am_state * state , enum patch_format patch_format , const char ** paths , int keep_cr)', 969, 992), ('am_setup( struct am_state * state , enum patch_format patch_format , const char ** paths , int keep_cr)', 997, 1093), ('am_next( struct am_state * state)', 1099, 1123), ('msgnum( const struct am_state * state)', 1128, 1136), ('refresh_and_write_cache( void)', 1141, 1149), ('die_user_resolve( const struct am_state * state)', 1155, 1168), ('am_append_signoff( struct am_state * state)', 1173, 1180), ('parse_mail( struct am_state * state , const char * mail)', 1191, 1299), ('get_mail_commit_oid( struct object_id * commit_id , const char * mail)', 1305, 1320), ('get_commit_info( struct am_state * state , struct commit * commit)', 1326, 1363), ('write_commit_patch( const struct am_state * state , struct commit * commit)', 1368, 1389), ('write_index_patch( const struct am_state * state)', 1395, 1419), ('parse_mail_rebase( struct am_state * state , const char * mail)', 1430, 1450), ('run_apply( const struct am_state * state , const char * index_file)', 1456, 1512), ('build_fake_ancestor( const struct am_state * state , const char * index_file)', 1517, 1531), ('fall_back_threeway( const struct am_state * state , const char * index_path)', 1536, 1611), ('do_commit( const struct am_state * state)', 1618, 1674), ('validate_resume_state( const struct am_state * state)', 1680, 1689), ('do_interactive( struct am_state * state)', 1698, 1748), ('am_run( struct am_state * state , int resume)', 1757, 1868), ('am_resolve( struct am_state * state)', 1875, 1909), ('fast_forward_to( struct tree * head , struct tree * remote , int reset)', 1916, 1949), ('merge_tree( struct tree * tree)', 1955, 1983), ('clean_index( const struct object_id * head , const struct object_id * remote)', 1989, 2023), ('am_rerere_clear( void)', 2028, 2033), ('am_skip( struct am_state * state)', 2038, 2053), ('safe_to_abort( const struct am_state * state)', 2062, 2087), ('am_abort( struct am_state * state)', 2092, 2125), ('show_patch( struct am_state * state)', 2127, 2153), ('parse_opt_patchformat( const struct option * opt , const char * arg , int unset)', 2159, 2176), ('git_am_config( const char * k , const char * v , void * cb)', 2188, 2197), ('cmd_am( int argc , const char ** argv , const char * prefix)', 2199, 2416)], '/home/kevin/thesis/git/builtin/annotate.c': [('cmd_annotate( int argc , const char ** argv , const char * prefix)', 10, 22)], '/home/kevin/thesis/git/builtin/apply.c': [('cmd_apply( int argc , const char ** argv , const char * prefix)', 12, 34)], '/home/kevin/thesis/git/builtin/archive.c': [('create_output_file( const char * output_file)', 13, 24), ('run_remote_archiver( int argc , const char ** argv , const char * remote , const char * exec , const char * name_hint)', 26, 75), ('cmd_archive( int argc , const char ** argv , const char * prefix)', 82, 109)], '/home/kevin/thesis/git/builtin/bisect--helper.c': [('one_of( const char * term , ...)', 23, 35), ('check_term_format( const char * term , const char * orig_term)', 37, 63), ('write_terms( const char * bad , const char * good)', 65, 83), ('is_expected_rev( const char * expected_hex)', 85, 95), ('check_expected_revs( const char ** revs , int rev_nr)', 97, 107), ('cmd_bisect__helper( int argc , const char ** argv , const char * prefix)', 109, 156)], '/home/kevin/thesis/git/builtin/blame.c': [('nth_line_cb( void * data , long lno)', 75, 78), ('get_ac_line( const char * inbuf , const char * what , struct strbuf * name , struct strbuf * mail , timestamp_t * time , struct strbuf * tz)', 101, 155), ('commit_info_init( struct commit_info * ci)', 157, 167), ('commit_info_destroy( struct commit_info * ci)', 169, 179), ('get_commit_info( struct commit * commit , struct commit_info * ret , int detailed)', 181, 213), ('write_filename_info( struct blame_origin * suspect)', 224, 233), ('emit_one_suspect_detail( struct blame_origin * suspect , int repeat)', 241, 265), ('found_guilty_entry( struct blame_entry * ent , void * data)', 271, 287), ('format_time( timestamp_t time , const char * tz_str , int show_raw_time)', 289, 315), ('emit_porcelain_details( struct blame_origin * suspect , int repeat)', 330, 335), ('emit_porcelain( struct blame_scoreboard * sb , struct blame_entry * ent , int opt)', 337, 374), ('parse_color_fields( const char * s)', 382, 415), ('setup_default_color_by_age( void)', 417, 420), ('determine_line_heat( struct blame_entry * ent , const char ** dest_color)', 422, 432), ('emit_other( struct blame_scoreboard * sb , struct blame_entry * ent , int opt)', 434, 533), ('output( struct blame_scoreboard * sb , int option)', 535, 562), ('read_ancestry( const char * graft_file)', 569, 584), ('update_auto_abbrev( int auto_abbrev , struct blame_origin * suspect)', 586, 594), ('find_alignment( struct blame_scoreboard * sb , int * option)', 600, 648), ('sanity_check_on_fail( struct blame_scoreboard * sb , int baa)', 650, 656), ('parse_score( const char * arg)', 658, 665), ('add_prefix( const char * prefix , const char * path)', 667, 670), ('git_blame_config( const char * var , const char * value , void * cb)', 672, 727), ('blame_copy_callback( const struct option * option , const char * arg , int unset)', 729, 749), ('blame_move_callback( const struct option * option , const char * arg , int unset)', 751, 760), ('is_a_rev( const char * name)', 762, 769), ('cmd_blame( int argc , const char ** argv , const char * prefix)', 771, 1091)], '/home/kevin/thesis/git/builtin/branch.c': [('parse_branch_color_slot( const char * slot)', 61, 76), ('git_branch_config( const char * var , const char * value , void * cb)', 78, 97), ('branch_get_color( enum color_branch ix)', 99, 104), ('branch_merged( int kind , const char * name , struct commit * rev , struct commit * head_rev)', 106, 156), ('check_branch_commit( const char * branchname , const char * refname , const struct object_id * oid , struct commit * head_rev , int kinds , int force)', 158, 174), ('delete_branch_config( const char * branchname)', 176, 183), ('delete_branches( int argc , const char ** argv , int force , int kinds , int quiet)', 185, 288), ('calc_maxwidth( struct ref_array * refs , int remote_bonus)', 290, 313), ('quote_literal_for_format( const char * s)', 315, 332), ('build_format( struct ref_filter * filter , int maxwidth , const char * remote_prefix)', 334, 386), ('print_ref_list( struct ref_filter * filter , struct ref_sorting * sorting , struct ref_format * format)', 388, 439), ('reject_rebase_or_bisect_branch( const char * target)', 441, 462), ('copy_or_rename_branch( const char * oldname , const char * newname , int copy , int force)', 464, 543), ('edit_branch_description( const char * branch_name)', 547, 574), ('cmd_branch( int argc , const char ** argv , const char * prefix)', 576, 825)], '/home/kevin/thesis/git/builtin/bundle.c': [('cmd_bundle( int argc , const char ** argv , const char * prefix)', 18, 67)], '/home/kevin/thesis/git/builtin/cat-file.c': [('filter_object( const char * path , unsigned mode , const struct object_id * oid , char ** buf , unsigned long * size)', 29, 49), ('cat_one_file( int opt , const char * exp_type , const char * obj_name , int unknown_type)', 51, 177), ('is_atom( const char * atom , const char * s , int slen)', 215, 219), ('expand_atom( struct strbuf * sb , const char * atom , int len , void * vdata)', 221, 257), ('expand_format( struct strbuf * sb , const char * start , void * data)', 259, 272), ('batch_write( struct batch_options * opt , const void * data , int len)', 274, 281), ('print_object_or_die( struct batch_options * opt , struct expand_data * data)', 283, 337), ('batch_object_write( const char * obj_name , struct batch_options * opt , struct expand_data * data)', 339, 362), ('batch_one_object( const char * obj_name , struct batch_options * opt , struct expand_data * data)', 364, 407), ('batch_object_cb( const struct object_id * oid , void * vdata)', 414, 420), ('batch_loose_object( const struct object_id * oid , const char * path , void * data)', 422, 428), ('batch_packed_object( const struct object_id * oid , struct packed_git * pack , uint32_t pos , void * data)', 430, 437), ('batch_objects( struct batch_options * opt)', 439, 522), ('git_cat_file_config( const char * var , const char * value , void * cb)', 530, 536), ('batch_option_callback( const struct option * opt , const char * arg , int unset)', 538, 553), ('cmd_cat_file( int argc , const char ** argv , const char * prefix)', 555, 642)], '/home/kevin/thesis/git/builtin/check-attr.c': [('output_attr( struct attr_check * check , const char * file)', 28, 55), ('check_attr( const char * prefix , struct attr_check * check , int collect_all , const char * file)', 57, 74), ('check_attr_stdin_paths( const char * prefix , struct attr_check * check , int collect_all)', 76, 97), ('error_with_usage( const char * msg)', 99, 103), ('cmd_check_attr( int argc , const char ** argv , const char * prefix)', 105, 189)], '/home/kevin/thesis/git/builtin/check-ignore.c': [('output_exclude( const char * path , struct exclude * exclude)', 34, 68), ('check_ignore( struct dir_struct * dir , const char * prefix , int argc , const char ** argv)', 70, 119), ('check_ignore_stdin_paths( struct dir_struct * dir , const char * prefix)', 121, 145), ('cmd_check_ignore( int argc , const char ** argv , const char * prefix)', 147, 192)], '/home/kevin/thesis/git/builtin/check-mailmap.c': [('check_mailmap( struct string_list * mailmap , const char * contact)', 18, 37), ('cmd_check_mailmap( int argc , const char ** argv , const char * prefix)', 39, 67)], '/home/kevin/thesis/git/builtin/check-ref-format.c': [('collapse_slashes( const char * refname)', 21, 37), ('check_ref_format_branch( const char * arg)', 39, 52), ('cmd_check_ref_format( int argc , const char ** argv , const char * prefix)', 54, 91)], '/home/kevin/thesis/git/builtin/checkout-index.c': [('write_tempfile_record( const char * name , const char * prefix)', 22, 45), ('checkout_file( const char * name , const char * prefix)', 47, 92), ('checkout_all( const char * prefix , int prefix_length)', 94, 125), ('option_parse_stage( const struct option * opt , const char * arg , int unset)', 132, 146), ('cmd_checkout_index( int argc , const char ** argv , const char * prefix)', 148, 256)], '/home/kevin/thesis/git/builtin/checkout.c': [('post_checkout_hook( struct commit * old_commit , struct commit * new_commit , int changed)', 57, 67), ('update_some( const struct object_id * oid , struct strbuf * base , const char * pathname , unsigned mode , int stage , void * context)', 69, 106), ('read_tree_some( struct tree * tree , const struct pathspec * pathspec)', 108, 117), ('skip_same_name( const struct cache_entry * ce , int pos)', 119, 125), ('check_stage( int stage , const struct cache_entry * ce , int pos)', 127, 139), ('check_stages( unsigned stages , const struct cache_entry * ce , int pos)', 141, 157), ('checkout_stage( int stage , const struct cache_entry * ce , int pos , const struct checkout * state)', 159, 172), ('checkout_merged( int pos , const struct checkout * state)', 174, 239), ('checkout_paths( const struct checkout_opts * opts , const char * revision)', 241, 385), ('show_local_changes( struct object * head , const struct diff_options * opts)', 387, 398), ('describe_detached_head( const char * msg , struct commit * commit)', 400, 414), ('reset_tree( struct tree * tree , const struct checkout_opts * o , int worktree , int * writeout_error)', 416, 449), ('setup_branch_path( struct branch_info * branch)', 462, 471), ('merge_working_tree( const struct checkout_opts * opts , struct branch_info * old_branch_info , struct branch_info * new_branch_info , int * writeout_error)', 473, 612), ('report_tracking( struct branch_info * new_branch_info)', 614, 623), ('update_refs_for_switch( const struct checkout_opts * opts , struct branch_info * old_branch_info , struct branch_info * new_branch_info)', 625, 717), ('add_pending_uninteresting_ref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 719, 725), ('describe_one_orphan( struct strbuf * sb , struct commit * commit)', 727, 735), ('suggest_reattach( struct commit * commit , struct rev_info * revs)', 738, 789), ('orphaned_commit_warning( struct commit * old_commit , struct commit * new_commit)', 796, 819), ('switch_branches( const struct checkout_opts * opts , struct branch_info * new_branch_info)', 821, 861), ('git_checkout_config( const char * var , const char * value , void * cb)', 863, 875), ('parse_branchname_arg( int argc , const char ** argv , int dwim_new_local_branch_ok , struct branch_info * new_branch_info , struct checkout_opts * opts , struct object_id * rev)', 877, 1033), ('switch_unborn_to_new_branch( const struct checkout_opts * opts)', 1035, 1049), ('checkout_branch( struct checkout_opts * opts , struct branch_info * new_branch_info)', 1051, 1104), ('cmd_checkout( int argc , const char ** argv , const char * prefix)', 1106, 1268)], '/home/kevin/thesis/git/builtin/clean.c': [('parse_clean_color_slot( const char * var)', 85, 100), ('git_clean_config( const char * var , const char * value , void * cb)', 102, 131), ('clean_get_color( enum color_clean ix)', 133, 138), ('clean_print_color( enum color_clean ix)', 140, 143), ('exclude_cb( const struct option * opt , const char * arg , int unset)', 145, 150), ('remove_dirs( struct strbuf * path , const char * prefix , int force_flag , int dry_run , int quiet , int * dir_gone)', 152, 258), ('pretty_print_dels( void)', 260, 284), ('pretty_print_menus( struct string_list * menu_list)', 286, 296), ('prompt_help_cmd( int singleton)', 298, 315), ('print_highlight_menu_stuff( struct menu_stuff * stuff , int ** chosen)', 320, 373), ('find_unique( const char * choice , struct menu_stuff * menu_stuff)', 375, 422), ('parse_choice( struct menu_stuff * menu_stuff , int is_single , struct strbuf input , int ** chosen)', 446, 536), ('list_and_choose( struct menu_opts * opts , struct menu_stuff * stuff)', 549, 640), ('clean_cmd( void)', 642, 645), ('filter_by_patterns_cmd( void)', 647, 711), ('select_by_numbers_cmd( void)', 713, 748), ('ask_each_cmd( void)', 750, 783), ('quit_cmd( void)', 785, 790), ('help_cmd( void)', 792, 806), ('interactive_main_loop( void)', 808, 861), ('correct_untracked_entries( struct dir_struct * dir)', 863, 893), ('cmd_clean( int argc , const char ** argv , const char * prefix)', 895, 1053)], '/home/kevin/thesis/git/builtin/clone.c': [('recurse_submodules_cb( const struct option * opt , const char * arg , int unset)', 68, 80), ('get_repo_path_1( struct strbuf * path , int * is_bundle)', 146, 191), ('get_repo_path( const char * repo , int * is_bundle)', 193, 204), ('guess_dir_name( const char * repo , int is_bundle , int is_bare)', 206, 309), ('strip_trailing_slashes( char * dir)', 311, 318), ('add_one_reference( struct string_list_item * item , void * cb_data)', 320, 343), ('setup_reference( void)', 345, 353), ('copy_alternates( struct strbuf * src , struct strbuf * dst , const char * src_repo)', 355, 391), ('copy_or_link_directory( struct strbuf * src , struct strbuf * dest , const char * src_repo , int src_baselen)', 393, 454), ('clone_local( const char * src_repo , const char * dest_repo)', 456, 478), ('remove_junk( void)', 495, 520), ('remove_junk_on_signal( int signo)', 522, 527), ('find_remote_branch( const struct ref * refs , const char * branch)', 529, 547), ('wanted_peer_refs( const struct ref * refs , struct refspec_item * refspec)', 549, 583), ('write_remote_refs( const struct ref * local_refs)', 585, 609), ('write_followtags( const struct ref * refs , const char * msg)', 611, 624), ('iterate_ref_map( void * cb_data , struct object_id * oid)', 626, 644), ('update_remote_refs( const struct ref * refs , const struct ref * mapped_refs , const struct ref * remote_head_points_at , const char * branch_top , const char * msg , struct transport * transport , int check_connectivity)', 646, 682), ('update_head( const struct ref * our , const struct ref * remote , const char * msg)', 684, 711), ('checkout( int submodule_progress)', 713, 787), ('write_one_config( const char * key , const char * value , void * data)', 789, 794), ('write_config( struct string_list * config)', 796, 805), ('write_refspec_config( const char * src_ref_prefix , const struct ref * our_head_points_at , const struct ref * remote_head_points_at , struct strbuf * branch_top)', 807, 857), ('dissociate_from_references( void)', 859, 871), ('dir_exists( const char * path)', 873, 877), ('cmd_clone( int argc , const char ** argv , const char * prefix)', 879, 1236)], '/home/kevin/thesis/git/builtin/column.c': [('column_config( const char * var , const char * value , void * cb)', 15, 18), ('cmd_column( int argc , const char ** argv , const char * prefix)', 20, 59)], '/home/kevin/thesis/git/builtin/commit-graph.c': [('graph_read( int argc , const char ** argv)', 32, 78), ('graph_write( int argc , const char ** argv)', 80, 141), ('cmd_commit_graph( int argc , const char ** argv , const char * prefix)', 143, 171)], '/home/kevin/thesis/git/builtin/commit-tree.c': [('new_parent( struct commit * parent , struct commit_list ** parents_p)', 18, 30), ('commit_tree_config( const char * var , const char * value , void * cb)', 32, 38), ('cmd_commit_tree( int argc , const char ** argv , const char * prefix)', 40, 129)], '/home/kevin/thesis/git/builtin/commit.c': [('opt_parse_porcelain( const struct option * opt , const char * arg , int unset)', 113, 128), ('opt_parse_m( const struct option * opt , const char * arg , int unset)', 130, 144), ('opt_parse_rename_score( const struct option * opt , const char * arg , int unset)', 146, 154), ('determine_whence( struct wt_status * s)', 156, 169), ('status_init_config( struct wt_status * s , config_fn_t fn)', 171, 178), ('rollback_index_files( void)', 180, 193), ('commit_index_files( void)', 195, 212), ('list_paths( struct string_list * list , const char * with_tree , const char * prefix , const struct pathspec * pattern)', 218, 251), ('add_remove_files( struct string_list * list)', 253, 270), ('create_base_index( const struct commit * current_head)', 272, 298), ('refresh_cache_or_die( int refresh_flags)', 300, 308), ('prepare_index( int argc , const char ** argv , const char * prefix , const struct commit * current_head , int is_status)', 310, 470), ('run_status( FILE * fp , const char * index_file , const char * prefix , int nowarn , struct wt_status * s)', 472, 498), ('is_a_merge( const struct commit * current_head)', 500, 503), ('assert_split_ident( struct ident_split * id , const struct strbuf * buf)', 505, 509), ('export_one( const char * var , const char * s , const char * e , int hack)', 511, 519), ('parse_force_date( const char * in , struct strbuf * out)', 521, 534), ('set_ident_var( char ** buf , char * val)', 536, 540), ('determine_author_info( struct strbuf * author_ident)', 542, 599), ('author_date_is_interesting( void)', 601, 604), ('adjust_comment_line_char( const struct strbuf * sb)', 606, 634), ('prepare_to_commit( const char * index_file , const char * prefix , struct commit * current_head , struct wt_status * s , struct strbuf * author_ident)', 636, 959), ('find_author_by_nickname( const char * name)', 961, 992), ('handle_ignored_arg( struct wt_status * s)', 994, 1006), ('handle_untracked_files_arg( struct wt_status * s)', 1008, 1020), ('read_commit_message( const char * name)', 1022, 1032), ('finalize_deferred_config( struct wt_status * s)', 1046, 1072), ('parse_and_validate_options( int argc , const char * argv [ ] , const struct option * options , const char * const usage [ ] , const char * prefix , struct commit * current_head , struct wt_status * s)', 1074, 1171), ('dry_run_commit( int argc , const char ** argv , const char * prefix , const struct commit * current_head , struct wt_status * s)', 1173, 1184), ('parse_status_slot( const char * slot)', 1186, 1207), ('git_status_config( const char * k , const char * v , void * cb)', 1209, 1291), ('cmd_status( int argc , const char ** argv , const char * prefix)', 1293, 1392), ('git_commit_config( const char * k , const char * v , void * cb)', 1394, 1421), ('run_commit_hook( int editor_is_used , const char * index_file , const char * name , ...)', 1423, 1443), ('cmd_commit( int argc , const char ** argv , const char * prefix)', 1445, 1673)], '/home/kevin/thesis/git/builtin/config.c': [('option_parse_type( const struct option * opt , const char * arg , int unset)', 72, 120), ('check_argc( int argc , int min , int max)', 160, 165), ('show_config_origin( struct strbuf * buf)', 167, 178), ('show_all_config( const char * key_ , const char * value_ , void * cb)', 180, 194), ('format_config( struct strbuf * buf , const char * key_ , const char * value_)', 202, 251), ('collect_config( const char * key_ , const char * value_ , void * cb)', 253, 269), ('get_value( const char * key_ , const char * regex_)', 271, 358), ('normalize_value( const char * key , const char * value)', 360, 402), ('git_get_color_config( const char * var , const char * value , void * cb)', 409, 419), ('get_color( const char * var , const char * def_color)', 421, 435), ('git_get_colorbool_config( const char * var , const char * value , void * cb)', 440, 450), ('get_colorbool( const char * var , int print)', 452, 479), ('check_write( void)', 481, 491), ('urlmatch_collect_fn( const char * var , const char * value , void * cb)', 498, 519), ('get_urlmatch( const char * var , const char * url)', 521, 569), ('default_user_config( void)', 571, 583), ('cmd_config( int argc , const char ** argv , const char * prefix)', 585, 847)], '/home/kevin/thesis/git/builtin/count-objects.c': [('bits_to_msg( unsigned seen_bits)', 23, 38), ('real_report_garbage( unsigned seen_bits , const char * path)', 40, 52), ('loose_garbage( const char * path)', 54, 58), ('count_loose( const struct object_id * oid , const char * path , void * data)', 60, 73), ('count_cruft( const char * basename , const char * path , void * data)', 75, 79), ('print_alternate( struct alternate_object_database * alt , void * data)', 81, 87), ('cmd_count_objects( int argc , const char ** argv , const char * prefix)', 94, 172)], '/home/kevin/thesis/git/builtin/credential.c': [('cmd_credential( int argc , const char ** argv , const char * prefix)', 8, 31)], '/home/kevin/thesis/git/builtin/describe.c': [('commit_name_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * peeled)', 60, 69), ('find_commit_name( const struct object_id * peeled)', 71, 74), ('replace_name( struct commit_name * e , int prio , const struct object_id * oid , struct tag ** tag)', 76, 107), ('add_to_known_names( const char * path , const struct object_id * peeled , int prio , const struct object_id * oid)', 109, 131), ('get_name( const char * path , const struct object_id * oid , int flag , void * cb_data)', 133, 209), ('compare_pt( const void * a_ , const void * b_)', 218, 227), ('finish_depth_computation( struct commit_list ** list , struct possible_tag * best)', 229, 260), ('append_name( struct commit_name * n , struct strbuf * dst)', 262, 284), ('append_suffix( int depth , const struct object_id * oid , struct strbuf * dst)', 286, 289), ('describe_commit( struct object_id * oid , struct strbuf * dst)', 291, 441), ('process_commit( struct commit * commit , void * data)', 450, 454), ('process_object( struct object * obj , const char * path , void * data)', 456, 467), ('describe_blob( struct object_id oid , struct strbuf * dst)', 469, 488), ('describe( const char * arg , int last_one)', 490, 516), ('cmd_describe( int argc , const char ** argv , const char * prefix)', 518, 648)], '/home/kevin/thesis/git/builtin/diff-files.c': [('cmd_diff_files( int argc , const char ** argv , const char * prefix)', 18, 74)], '/home/kevin/thesis/git/builtin/diff-index.c': [('cmd_diff_index( int argc , const char ** argv , const char * prefix)', 14, 61)], '/home/kevin/thesis/git/builtin/diff-tree.c': [('diff_tree_commit_oid( const struct object_id * oid)', 11, 17), ('stdin_diff_commit( struct commit * commit , const char * p)', 20, 39), ('stdin_diff_trees( struct tree * tree1 , const char * p)', 42, 57), ('diff_tree_stdin( char * line)', 59, 81), ('diff_tree_tweak_rev( struct rev_info * rev , struct setup_revision_opt * opt)', 90, 98), ('cmd_diff_tree( int argc , const char ** argv , const char * prefix)', 100, 188)], '/home/kevin/thesis/git/builtin/diff.c': [('blob_path( struct object_array_entry * entry)', 27, 30), ('stuff_change( struct diff_options * opt , unsigned old_mode , unsigned new_mode , const struct object_id * old_oid , const struct object_id * new_oid , int old_oid_valid , int new_oid_valid , const char * old_path , const char * new_path)', 32, 64), ('builtin_diff_b_f( struct rev_info * revs , int argc , const char ** argv , struct object_array_entry ** blob)', 66, 99), ('builtin_diff_blobs( struct rev_info * revs , int argc , const char ** argv , struct object_array_entry ** blob)', 101, 124), ('builtin_diff_index( struct rev_info * revs , int argc , const char ** argv)', 126, 157), ('builtin_diff_tree( struct rev_info * revs , int argc , const char ** argv , struct object_array_entry * ent0 , struct object_array_entry * ent1)', 159, 181), ('builtin_diff_combined( struct rev_info * revs , int argc , const char ** argv , struct object_array_entry * ent , int ents)', 183, 202), ('refresh_index_quietly( void)', 204, 216), ('builtin_diff_files( struct rev_info * revs , int argc , const char ** argv)', 218, 254), ('cmd_diff( int argc , const char ** argv , const char * prefix)', 256, 470)], '/home/kevin/thesis/git/builtin/difftool.c': [('difftool_config( const char * var , const char * value , void * cb)', 33, 46), ('print_tool_help( void)', 48, 52), ('parse_index_info( char * p , int * mode1 , int * mode2 , struct object_id * oid1 , struct object_id * oid2 , char * status)', 54, 82), ('add_path( struct strbuf * buf , size_t base_len , const char * path)', 88, 94), ('use_wt_file( const char * workdir , const char * name , struct object_id * oid)', 99, 126), ('working_tree_entry_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 133, 141), ('pair_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * unused_keydata)', 153, 162), ('add_left_or_right( struct hashmap * map , const char * path , const char * content , int is_right)', 164, 180), ('path_entry_cmp( const void * unused_cmp_data , const void * entry , const void * entry_or_key , const void * key)', 187, 196), ('changed_files( struct hashmap * result , const char * index_path , const char * workdir)', 198, 251), ('exit_cleanup( const char * tmpdir , int exit_code)', 253, 261), ('ensure_leading_directories( char * path)', 263, 273), ('get_symlink( const struct object_id * oid , const char * path)', 293, 316), ('checkout_path( unsigned mode , struct object_id * oid , const char * path , const struct checkout * state)', 318, 329), ('run_dir_diff( const char * extcmd , int symlinks , const char * prefix , int argc , const char ** argv)', 331, 663), ('run_file_diff( int prompt , const char * prefix , int argc , const char ** argv)', 665, 686), ('cmd_difftool( int argc , const char ** argv , const char * prefix)', 688, 760)], '/home/kevin/thesis/git/builtin/fast-export.c': [('parse_opt_signed_tag_mode( const struct option * opt , const char * arg , int unset)', 42, 58), ('parse_opt_tag_of_filtered_mode( const struct option * opt , const char * arg , int unset)', 60, 72), ('has_unshown_parent( struct commit * commit)', 77, 86), ('anonymized_entry_cmp( const void * unused_cmp_data , const void * va , const void * vb , const void * unused_keydata)', 96, 103), ('anonymize_mem( struct hashmap * map , void *(*generate)(constvoid*,size_t*) , const void * orig , size_t * len)', 110, 136), ('anonymize_path( struct strbuf * out , const char * path , struct hashmap * map , void *(*generate)(constvoid*,size_t*))', 144, 157), ('mark_to_ptr( uint32_t mark)', 159, 162), ('ptr_to_mark( void * mark)', 164, 167), ('mark_object( struct object * object , uint32_t mark)', 169, 172), ('mark_next_object( struct object * object)', 174, 177), ('get_object_mark( struct object * object)', 179, 185), ('show_progress( void)', 187, 194), ('anonymize_blob( unsigned long * size)', 207, 214), ('export_blob( const struct object_id * oid)', 216, 262), ('depth_first( const void * a_ , const void * b_)', 264, 292), ('print_path_1( const char * path)', 294, 303), ('anonymize_path_component( const void * path , size_t * len)', 305, 311), ('print_path( const char * path)', 313, 325), ('generate_fake_oid( const void * old , size_t * len)', 327, 333), ('anonymize_sha1( const struct object_id * oid)', 335, 340), ('show_filemodify( struct diff_queue_struct * q , struct diff_options * options , void * data)', 342, 418), ('find_encoding( const char * begin , const char * end)', 420, 433), ('anonymize_ref_component( const void * old , size_t * len)', 435, 441), ('anonymize_refname( const char * refname)', 443, 476), ('anonymize_commit_message( const char * old)', 482, 486), ('anonymize_ident( const void * old , size_t * len)', 489, 496), ('anonymize_ident_line( const char ** beg , const char ** end)', 503, 541), ('handle_commit( struct commit * commit , struct rev_info * rev , struct string_list * paths_of_changed_objects)', 543, 637), ('anonymize_tag( const void * old , size_t * len)', 639, 645), ('handle_tail( struct object_array * commits , struct rev_info * revs , struct string_list * paths_of_changed_objects)', 647, 660), ('handle_tag( const char * name , struct tag * tag)', 662, 789), ('get_commit( struct rev_cmdline_entry * e , char * full_name)', 791, 813), ('get_tags_and_duplicates( struct rev_cmdline_info * info)', 815, 869), ('handle_tags_and_duplicates( void)', 871, 894), ('export_marks( char * file)', 896, 924), ('import_marks( char * input_file)', 926, 974), ('handle_deletes( void)', 976, 987), ('cmd_fast_export( int argc , const char ** argv , const char * prefix)', 989, 1088)], '/home/kevin/thesis/git/builtin/fetch-pack.c': [('add_sought_entry( struct ref ** * sought , int * nr , int * alloc , const char * name)', 14, 40), ('cmd_fetch_pack( int argc , const char ** argv , const char * prefix)', 42, 265)], '/home/kevin/thesis/git/builtin/fetch.c': [('git_fetch_config( const char * k , const char * v , void * cb)', 67, 94), ('gitmodules_fetch_config( const char * var , const char * value , void * cb)', 96, 107), ('parse_refmap_arg( const struct option * opt , const char * arg , int unset)', 109, 118), ('unlock_pack( void)', 181, 187), ('unlock_pack_on_signal( int signo)', 189, 194), ('add_merge_config( struct ref ** head , const struct ref * remote_refs , struct branch * branch , struct ref ** * tail)', 196, 232), ('add_existing( const char * refname , const struct object_id * oid , int flag , void * cbdata)', 234, 244), ('will_fetch( struct ref ** head , const unsigned char * sha1)', 246, 255), ('find_non_local_tags( struct transport * transport , struct ref ** head , struct ref ** * tail)', 257, 339), ('get_ref_map( struct transport * transport , struct refspec * rs , int tags , int * autotags)', 341, 462), ('s_update_ref( const char * action , struct ref * ref , int check_old)', 467, 508), ('adjust_refcol_width( const struct ref * ref)', 513, 547), ('prepare_format_display( struct ref * ref_map)', 549, 571), ('print_remote_to_local( struct strbuf * display , const char * remote , const char * local)', 573, 577), ('find_and_replace( struct strbuf * haystack , const char * needle , const char * placeholder)', 579, 600), ('print_compact( struct strbuf * display , const char * remote , const char * local)', 602, 622), ('format_display( struct strbuf * display , char code , const char * summary , const char * error , const char * remote , const char * local , int summary_width)', 624, 638), ('update_local_ref( struct ref * ref , const char * remote , const struct ref * remote_ref , struct strbuf * display , int summary_width)', 640, 754), ('iterate_ref_map( void * cb_data , struct object_id * oid)', 756, 768), ('store_updated_refs( const char * raw_url , const char * remote_name , struct ref * ref_map)', 770, 923), ('quickfetch( struct ref * ref_map)', 930, 946), ('fetch_refs( struct transport * transport , struct ref * ref_map)', 948, 959), ('prune_refs( struct refspec * rs , struct ref * ref_map , const char * raw_url)', 961, 1014), ('check_not_current_branch( struct ref * ref_map)', 1016, 1028), ('truncate_fetch_head( void)', 1030, 1039), ('set_option( struct transport * transport , const char * name , const char * value)', 1041, 1050), ('prepare_transport( struct remote * remote , int deepen)', 1052, 1079), ('backfill_tags( struct transport * transport , struct ref * ref_map)', 1081, 1108), ('do_fetch( struct transport * transport , struct refspec * rs)', 1110, 1188), ('get_one_remote_for_fetch( struct remote * remote , void * priv)', 1190, 1196), ('get_remote_group( const char * key , const char * value , void * priv)', 1203, 1220), ('add_remote_or_group( const char * name , struct string_list * list)', 1222, 1236), ('add_options_to_argv( struct argv_array * argv)', 1238, 1267), ('fetch_multiple( struct string_list * list)', 1269, 1297), ('fetch_one_setup_partial( struct remote * remote)', 1303, 1347), ('fetch_one( struct remote * remote , int argc , const char ** argv , int prune_tags_ok)', 1349, 1416), ('cmd_fetch( int argc , const char ** argv , const char * prefix)', 1418, 1533)], '/home/kevin/thesis/git/builtin/fmt-merge-msg.c': [('fmt_merge_msg_config( const char * key , const char * value , void * cb)', 21, 36), ('init_src_data( struct src_data * data)', 49, 55), ('find_merge_parent( struct merge_parents * table , struct object_id * given , struct object_id * commit)', 73, 86), ('add_merge_parent( struct merge_parents * table , struct object_id * given , struct object_id * commit)', 88, 99), ('handle_line( char * line , struct merge_parents * merge_parents)', 101, 189), ('print_joined( const char * singular , const char * plural , struct string_list * list , struct strbuf * out)', 191, 206), ('add_branch_desc( struct strbuf * out , const char * name)', 208, 224), ('record_person_from_buf( int which , struct string_list * people , const char * buffer)', 228, 256), ('record_person( int which , struct string_list * people , struct commit * commit)', 259, 265), ('cmp_string_list_util_as_integral( const void * a_ , const void * b_)', 267, 271), ('add_people_count( struct strbuf * out , struct string_list * people)', 273, 287), ('credit_people( struct strbuf * out , struct string_list * them , int kind)', 289, 312), ('add_people_info( struct strbuf * out , struct string_list * authors , struct string_list * committers)', 314, 325), ('shortlog( const char * name , struct origin_data * origin_data , struct commit * head , struct rev_info * rev , struct fmt_merge_msg_opts * opts , struct strbuf * out)', 327, 409), ('fmt_merge_msg_title( struct strbuf * out , const char * current_branch)', 411, 463), ('fmt_tag_signature( struct strbuf * tagbuf , struct strbuf * sig , const char * buf , unsigned long len)', 465, 480), ('fmt_merge_msg_sigs( struct strbuf * out)', 482, 534), ('find_merge_parents( struct merge_parents * result , struct strbuf * in , struct object_id * head)', 536, 592), ('fmt_merge_msg( struct strbuf * in , struct strbuf * out , struct fmt_merge_msg_opts * opts)', 594, 657), ('cmd_fmt_merge_msg( int argc , const char ** argv , const char * prefix)', 659, 713)], '/home/kevin/thesis/git/builtin/for-each-ref.c': [('cmd_for_each_ref( int argc , const char ** argv , const char * prefix)', 17, 88)], '/home/kevin/thesis/git/builtin/fsck.c': [('describe_object( struct object * obj)', 51, 63), ('printable_type( struct object * obj)', 65, 81), ('fsck_config( const char * var , const char * value , void * cb)', 83, 104), ('objreport( struct object * obj , const char * msg_type , const char * err)', 106, 111), ('objerror( struct object * obj , const char * err)', 113, 118), ('fsck_error_func( struct fsck_options * o , struct object * obj , int type , const char * message)', 120, 125), ('mark_object( struct object * obj , int type , void * data , struct fsck_options * options)', 129, 177), ('mark_object_reachable( struct object * obj)', 179, 182), ('traverse_one_object( struct object * obj)', 184, 193), ('traverse_reachable( void)', 195, 208), ('mark_used( struct object * obj , int type , void * data , struct fsck_options * options)', 210, 216), ('check_reachable_object( struct object * obj)', 221, 238), ('check_unreachable_object( struct object * obj)', 243, 310), ('check_object( struct object * obj)', 312, 321), ('check_connectivity( void)', 323, 341), ('fsck_obj( struct object * obj , void * buffer , unsigned long size)', 343, 385), ('fsck_obj_buffer( const struct object_id * oid , enum object_type type , unsigned long size , void * buffer , int * eaten)', 387, 403), ('fsck_handle_reflog_oid( const char * refname , struct object_id * oid , timestamp_t timestamp)', 407, 426), ('fsck_handle_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 428, 441), ('fsck_handle_reflog( const char * logname , const struct object_id * oid , int flag , void * cb_data)', 443, 448), ('fsck_handle_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 450, 482), ('get_default_heads( void)', 484, 508), ('fsck_loose( const struct object_id * oid , const char * path , void * data)', 510, 546), ('fsck_cruft( const char * basename , const char * path , void * data)', 548, 553), ('fsck_subdir( unsigned int nr , const char * path , void * progress)', 555, 559), ('fsck_object_dir( const char * path)', 561, 575), ('fsck_head_link( void)', 577, 606), ('fsck_cache_tree( struct cache_tree * it)', 608, 635), ('mark_object_for_connectivity( const struct object_id * oid)', 637, 641), ('mark_loose_for_connectivity( const struct object_id * oid , const char * path , void * data)', 643, 649), ('mark_packed_for_connectivity( const struct object_id * oid , struct packed_git * pack , uint32_t pos , void * data)', 651, 658), ('cmd_fsck( int argc , const char ** argv , const char * prefix)', 683, 826)], '/home/kevin/thesis/git/builtin/gc.c': [('clean_pack_garbage( void)', 63, 69), ('report_pack_garbage( unsigned seen_bits , const char * path)', 71, 75), ('process_log_file( void)', 77, 102), ('process_log_file_at_exit( void)', 104, 108), ('process_log_file_on_signal( int signo)', 110, 115), ('gc_config( void)', 117, 141), ('too_many_loose_objects( void)', 143, 176), ('find_base_packs( struct string_list * packs , unsigned long limit)', 178, 198), ('too_many_packs( void)', 200, 220), ('total_ram( void)', 222, 251), ('estimate_repack_memory( struct packed_git * pack)', 253, 293), ('keep_one_pack( struct string_list_item * item , void * data)', 295, 299), ('add_repack_all_option( struct string_list * keep_pack)', 301, 313), ('add_repack_incremental_option( void)', 315, 318), ('need_to_gc( void)', 320, 371), ('lock_repo_for_gc( int force , pid_t * ret_pid)', 374, 439), ('report_last_gc_error( void)', 441, 472), ('gc_before_repack( void)', 474, 485), ('cmd_gc( int argc , const char ** argv , const char * prefix)', 487, 652)], '/home/kevin/thesis/git/builtin/get-tar-commit-id.c': [('cmd_get_tar_commit_id( int argc , const char ** argv , const char * prefix)', 17, 42)], '/home/kevin/thesis/git/builtin/grep.c': [('grep_lock( void)', 71, 75), ('grep_unlock( void)', 77, 81), ('add_work( struct grep_opt * opt , const struct grep_source * gs)', 96, 113), ('get_work( void)', 115, 132), ('work_done( struct work_item * w)', 134, 170), ('run( void * arg)', 172, 191), ('strbuf_out( struct grep_opt * opt , const void * buf , size_t size)', 193, 197), ('start_threads( struct grep_opt * opt)', 199, 229), ('wait_all( void)', 231, 266), ('wait_all( void)', 269, 272), ('grep_cmd_config( const char * var , const char * value , void * cb)', 275, 303), ('lock_and_read_oid_file( const struct object_id * oid , enum object_type * type , unsigned long * size)', 305, 313), ('grep_oid( struct grep_opt * opt , const struct object_id * oid , const char * filename , int tree_name_len , const char * path)', 315, 350), ('grep_file( struct grep_opt * opt , const char * filename)', 352, 383), ('append_path( struct grep_opt * opt , const void * data , size_t len)', 385, 392), ('run_pager( struct grep_opt * opt , const char * prefix)', 394, 408), ('grep_submodule( struct grep_opt * opt , struct repository * superproject , const struct pathspec * pathspec , const struct object_id * oid , const char * filename , const char * path)', 416, 477), ('grep_cache( struct grep_opt * opt , struct repository * repo , const struct pathspec * pathspec , int cached)', 479, 537), ('grep_tree( struct grep_opt * opt , const struct pathspec * pathspec , struct tree_desc * tree , struct strbuf * base , int tn_len , int check_attr , struct repository * repo)', 539, 603), ('grep_object( struct grep_opt * opt , const struct pathspec * pathspec , struct object * obj , const char * name , const char * path)', 605, 639), ('grep_objects( struct grep_opt * opt , const struct pathspec * pathspec , const struct object_array * list)', 641, 665), ('grep_directory( struct grep_opt * opt , const struct pathspec * pathspec , int exc_std , int use_index)', 667, 688), ('context_callback( const struct option * opt , const char * arg , int unset)', 690, 708), ('file_callback( const struct option * opt , const char * arg , int unset)', 710, 733), ('not_callback( const struct option * opt , const char * arg , int unset)', 735, 740), ('and_callback( const struct option * opt , const char * arg , int unset)', 742, 747), ('open_callback( const struct option * opt , const char * arg , int unset)', 749, 754), ('close_callback( const struct option * opt , const char * arg , int unset)', 756, 761), ('pattern_callback( const struct option * opt , const char * arg , int unset)', 763, 769), ('cmd_grep( int argc , const char ** argv , const char * prefix)', 771, 1120)], '/home/kevin/thesis/git/builtin/hash-object.c': [('hash_literally( struct object_id * oid , int fd , const char * type , unsigned flags)', 19, 31), ('hash_fd( int fd , const char * type , const char * path , unsigned flags , int literally)', 33, 48), ('hash_object( const char * path , const char * type , const char * vpath , unsigned flags , int literally)', 50, 58), ('hash_stdin_paths( const char * type , int no_filters , unsigned flags , int literally)', 60, 78), ('cmd_hash_object( int argc , const char ** argv , const char * prefix)', 80, 160)], '/home/kevin/thesis/git/builtin/help.c': [('parse_help_format( const char * format)', 62, 71), ('get_man_viewer_info( const char * name)', 73, 83), ('check_emacsclient_version( void)', 85, 124), ('exec_woman_emacs( const char * path , const char * page)', 126, 139), ('exec_man_konqueror( const char * path , const char * page)', 141, 161), ('exec_man_man( const char * path , const char * page)', 163, 169), ('exec_man_cmd( const char * cmd , const char * page)', 171, 178), ('add_man_viewer( const char * name)', 180, 187), ('supported_man_viewer( const char * name , size_t len)', 189, 194), ('do_add_man_viewer_info( const char * name , size_t len , const char * value)', 196, 205), ('add_man_viewer_path( const char * name , size_t len , const char * value)', 207, 219), ('add_man_viewer_cmd( const char * name , size_t len , const char * value)', 221, 233), ('add_man_viewer_info( const char * var , const char * value)', 235, 255), ('git_help_config( const char * var , const char * value , void * cb)', 257, 283), ('is_git_command( const char * s)', 287, 295), ('cmd_to_page( const char * git_cmd)', 297, 307), ('setup_man_path( void)', 309, 328), ('exec_viewer( const char * name , const char * page)', 330, 344), ('show_man_page( const char * git_cmd)', 346, 361), ('show_info_page( const char * git_cmd)', 363, 369), ('get_html_page_path( struct strbuf * page_path , const char * page)', 371, 389), ('open_html( const char * path)', 391, 394), ('show_html_page( const char * git_cmd)', 396, 404), ('check_git_cmd( const char * cmd)', 406, 424), ('cmd_help( int argc , const char ** argv , const char * prefix)', 426, 489)], '/home/kevin/thesis/git/builtin/index-pack.c': [('lock_mutex( pthread_mutex_t * mutex)', 129, 133), ('unlock_mutex( pthread_mutex_t * mutex)', 135, 139), ('init_thread( void)', 144, 162), ('cleanup_thread( void)', 164, 180), ('mark_link( struct object * obj , int type , void * data , struct fsck_options * options)', 202, 212), ('check_object( struct object * obj)', 216, 239), ('check_objects( void)', 241, 249), ('flush( void)', 253, 262), ('fill( int min)', 268, 291), ('use( int bytes)', 293, 307), ('open_pack_file( const char * pack_name)', 309, 333), ('parse_pack_header( void)', 335, 348), ('bad_object( off_t offset , const char * format , ...)', 353, 363), ('get_thread_data( void)', 365, 374), ('set_thread_data( struct thread_local * data)', 377, 381), ('alloc_base_data( void)', 384, 390), ('free_base_data( struct base_data * c)', 392, 398), ('prune_base_data( struct base_data * retain)', 400, 410), ('link_base_data( struct base_data * base , struct base_data * c)', 412, 424), ('unlink_base_data( struct base_data * c)', 426, 434), ('is_delta_type( enum object_type type)', 436, 439), ('unpack_entry_data( off_t offset , unsigned long size , enum object_type type , struct object_id * oid)', 441, 487), ('unpack_raw_entry( struct object_entry * obj , off_t * ofs_offset , struct object_id * ref_oid , struct object_id * oid)', 489, 554), ('unpack_data( struct object_entry * obj , int(*consume)(constunsignedchar*,unsignedlong,void*) , void * cb_data)', 556, 614), ('get_data_from_pack( struct object_entry * obj)', 616, 619), ('compare_ofs_delta_bases( off_t offset1 , off_t offset2 , enum object_type type1 , enum object_type type2)', 621, 631), ('find_ofs_delta( const off_t offset , enum object_type type)', 633, 653), ('find_ofs_delta_children( off_t offset , int * first_index , int * last_index , enum object_type type)', 655, 674), ('compare_ref_delta_bases( const struct object_id * oid1 , const struct object_id * oid2 , enum object_type type1 , enum object_type type2)', 676, 685), ('find_ref_delta( const struct object_id * oid , enum object_type type)', 687, 707), ('find_ref_delta_children( const struct object_id * oid , int * first_index , int * last_index , enum object_type type)', 709, 728), ('compare_objects( const unsigned char * buf , unsigned long size , void * cb_data)', 737, 763), ('check_collison( struct object_entry * entry)', 765, 786), ('sha1_object( const void * data , struct object_entry * obj_entry , unsigned long size , enum object_type type , const struct object_id * oid)', 788, 880), ('get_base_data( struct base_data * c)', 904, 941), ('resolve_delta( struct object_entry * delta_obj , struct base_data * base , struct base_data * result)', 943, 973), ('compare_and_swap_type( signed char * type , enum object_type want , enum object_type set)', 980, 993), ('find_unresolved_deltas_1( struct base_data * base , struct base_data * prev_base)', 995, 1047), ('find_unresolved_deltas( struct base_data * base)', 1049, 1066), ('compare_ofs_delta_entry( const void * a , const void * b)', 1068, 1076), ('compare_ref_delta_entry( const void * a , const void * b)', 1078, 1084), ('resolve_base( struct object_entry * obj)', 1086, 1092), ('threaded_second_pass( void * data)', 1095, 1117), ('parse_pack_objects( unsigned char * hash)', 1126, 1190), ('resolve_deltas( void)', 1200, 1241), ('conclude_pack( int fix_thin_pack , const char * curr_pack , unsigned char * pack_hash)', 1249, 1291), ('write_compressed( struct hashfile * f , void * in , unsigned int size)', 1293, 1315), ('append_obj_to_pack( struct hashfile * f , const unsigned char * sha1 , void * buf , unsigned long size , enum object_type type)', 1317, 1345), ('delta_pos_compare( const void * _a , const void * _b)', 1347, 1352), ('fix_unresolved_deltas( struct hashfile * f)', 1354, 1395), ('derive_filename( const char * pack_name , const char * suffix , struct strbuf * buf)', 1397, 1408), ('write_special_file( const char * suffix , const char * msg , const char * pack_name , const unsigned char * hash , const char ** report)', 1410, 1441), ('final( const char * final_pack_name , const char * curr_pack_name , const char * final_index_name , const char * curr_index_name , const char * keep_msg , const char * promisor_msg , unsigned char * hash)', 1443, 1516), ('git_index_pack_config( const char * k , const char * v , void * cb)', 1518, 1541), ('cmp_uint32( const void * a_ , const void * b_)', 1543, 1549), ('read_v2_anomalous_offsets( struct packed_git * p , struct pack_idx_option * opts)', 1551, 1587), ('read_idx_option( struct pack_idx_option * opts , const char * pack_name)', 1589, 1613), ('show_pack_info( int stat_only)', 1615, 1657), ('cmd_index_pack( int argc , const char ** argv , const char * prefix)', 1659, 1852)], '/home/kevin/thesis/git/builtin/init-db.c': [('copy_templates_1( struct strbuf * path , struct strbuf * template_path , DIR * dir)', 27, 91), ('copy_templates( const char * template_dir)', 93, 150), ('git_init_db_config( const char * k , const char * v , void * cb)', 152, 158), ('needs_work_tree_config( const char * git_dir , const char * work_tree)', 164, 172), ('create_default_files( const char * template_path , const char * original_git_dir)', 174, 293), ('create_object_directory( void)', 295, 314), ('separate_git_dir( const char * git_dir , const char * git_link)', 316, 335), ('init_db( const char * git_dir , const char * real_git_dir , const char * template_dir , unsigned int flags)', 337, 416), ('guess_repository_type( const char * git_dir)', 418, 449), ('shared_callback( const struct option * opt , const char * arg , int unset)', 451, 455), ('cmd_init_db( int argc , const char ** argv , const char * prefix)', 468, 586)], '/home/kevin/thesis/git/builtin/interpret-trailers.c': [('option_parse_where( const struct option * opt , const char * arg , int unset)', 23, 27), ('option_parse_if_exists( const struct option * opt , const char * arg , int unset)', 29, 33), ('option_parse_if_missing( const struct option * opt , const char * arg , int unset)', 35, 39), ('new_trailers_clear( struct list_head * trailers)', 41, 51), ('option_parse_trailer( const struct option * opt , const char * arg , int unset)', 53, 74), ('parse_opt_parse( const struct option * opt , const char * arg , int unset)', 76, 84), ('cmd_interpret_trailers( int argc , const char ** argv , const char * prefix)', 86, 134)], '/home/kevin/thesis/git/builtin/log.c': [('auto_decoration_style( void)', 59, 62), ('parse_decoration_style( const char * value)', 64, 81), ('decorate_callback( const struct option * opt , const char * arg , int unset)', 83, 98), ('log_line_range_callback( const struct option * option , const char * arg , int unset)', 100, 111), ('init_log_defaults( void)', 113, 119), ('cmd_log_init_defaults( struct rev_info * rev)', 121, 139), ('cmd_log_init_finish( int argc , const char ** argv , const char * prefix , struct rev_info * rev , struct setup_revision_opt * opt)', 141, 225), ('cmd_log_init( int argc , const char ** argv , const char * prefix , struct rev_info * rev , struct setup_revision_opt * opt)', 227, 232), ('estimate_commit_count( struct rev_info * rev , struct commit_list * list)', 238, 250), ('show_early_header( struct rev_info * rev , const char * stage , int nr)', 252, 260), ('log_show_early( struct rev_info * revs , struct commit_list * list)', 264, 313), ('early_output( int signal)', 315, 318), ('setup_early_output( struct rev_info * rev)', 320, 347), ('finish_early_output( struct rev_info * rev)', 349, 354), ('cmd_log_walk( struct rev_info * rev)', 356, 408), ('git_log_config( const char * var , const char * value , void * cb)', 410, 454), ('cmd_whatchanged( int argc , const char ** argv , const char * prefix)', 456, 474), ('show_tagger( char * buf , int len , struct rev_info * rev)', 476, 486), ('show_blob_object( const struct object_id * oid , struct rev_info * rev , const char * obj_name)', 488, 515), ('show_tag_object( const struct object_id * oid , struct rev_info * rev)', 517, 542), ('show_tree_object( const struct object_id * oid , struct strbuf * base , const char * pathname , unsigned mode , int stage , void * context)', 544, 551), ('show_setup_revisions_tweak( struct rev_info * rev , struct setup_revision_opt * opt)', 553, 567), ('cmd_show( int argc , const char ** argv , const char * prefix)', 569, 648), ('cmd_log_reflog( int argc , const char ** argv , const char * prefix)', 653, 674), ('log_setup_revisions_tweak( struct rev_info * rev , struct setup_revision_opt * opt)', 676, 690), ('cmd_log( int argc , const char ** argv , const char * prefix)', 692, 708), ('add_header( const char * value)', 722, 740), ('git_format_config( const char * var , const char * value , void * cb)', 760, 849), ('open_next_file( struct commit * commit , const char * subject , struct rev_info * rev , int quiet)', 854, 888), ('get_patch_ids( struct rev_info * rev , struct patch_ids * ids)', 890, 931), ('gen_message_id( struct rev_info * info , char * base)', 933, 940), ('print_signature( FILE * file)', 942, 951), ('add_branch_description( struct strbuf * buf , const char * branch_name)', 953, 965), ('find_branch_name( struct rev_info * rev)', 967, 993), ('make_cover_letter( struct rev_info * rev , int use_stdout , struct commit * origin , int nr , struct commit ** list , const char * branch_name , int quiet)', 995, 1077), ('clean_message_id( const char * msg_id)', 1079, 1099), ('set_outdir( const char * prefix , const char * output_directory)', 1101, 1119), ('keep_callback( const struct option * opt , const char * arg , int unset)', 1128, 1133), ('subject_prefix_callback( const struct option * opt , const char * arg , int unset)', 1137, 1143), ('rfc_callback( const struct option * opt , const char * arg , int unset)', 1145, 1148), ('numbered_callback( const struct option * opt , const char * arg , int unset)', 1152, 1159), ('no_numbered_callback( const struct option * opt , const char * arg , int unset)', 1161, 1165), ('output_directory_callback( const struct option * opt , const char * arg , int unset)', 1167, 1175), ('thread_callback( const struct option * opt , const char * arg , int unset)', 1177, 1189), ('attach_callback( const struct option * opt , const char * arg , int unset)', 1191, 1202), ('inline_callback( const struct option * opt , const char * arg , int unset)', 1204, 1215), ('header_callback( const struct option * opt , const char * arg , int unset)', 1217, 1227), ('to_callback( const struct option * opt , const char * arg , int unset)', 1229, 1236), ('cc_callback( const struct option * opt , const char * arg , int unset)', 1238, 1245), ('from_callback( const struct option * opt , const char * arg , int unset)', 1247, 1260), ('get_base_commit( const char * base_commit , struct commit ** list , int total)', 1268, 1338), ('prepare_bases( struct base_tree_info * bases , struct commit * base , struct commit ** list , int total)', 1340, 1388), ('print_bases( struct base_tree_info * bases , FILE * file)', 1390, 1409), ('cmd_format_patch( int argc , const char ** argv , const char * prefix)', 1411, 1850), ('add_pending_commit( const char * arg , struct rev_info * revs , int flags)', 1852, 1864), ('print_commit( char sign , struct commit * commit , int verbose , int abbrev , FILE * file)', 1871, 1885), ('cmd_cherry( int argc , const char ** argv , const char * prefix)', 1887, 1967)], '/home/kevin/thesis/git/builtin/ls-files.c': [('write_eolinfo( const struct index_state * istate , const struct cache_entry * ce , const char * path)', 59, 74), ('write_name( const char * name)', 76, 84), ('get_tag( const struct cache_entry * ce , const char * tag)', 86, 109), ('print_debug( const struct cache_entry * ce)', 111, 122), ('show_dir_entry( const char * tag , struct dir_entry * ent)', 124, 137), ('show_other_files( const struct index_state * istate , const struct dir_struct * dir)', 139, 150), ('show_killed_files( const struct index_state * istate , const struct dir_struct * dir)', 152, 201), ('show_submodule( struct repository * superproject , struct dir_struct * dir , const char * path)', 205, 219), ('show_ce( struct repository * repo , struct dir_struct * dir , const struct cache_entry * ce , const char * fullname , const char * tag)', 221, 250), ('show_ru_info( const struct index_state * istate)', 252, 279), ('ce_excluded( struct dir_struct * dir , struct index_state * istate , const char * fullname , const struct cache_entry * ce)', 281, 286), ('construct_fullname( struct strbuf * out , const struct repository * repo , const struct cache_entry * ce)', 288, 295), ('show_files( struct repository * repo , struct dir_struct * dir)', 297, 355), ('prune_index( struct index_state * istate , const char * prefix , size_t prefixlen)', 360, 384), ('get_common_prefix_len( const char * common_prefix)', 386, 403), ('overlay_tree_on_index( struct index_state * istate , const char * tree_name , const char * prefix)', 413, 465), ('option_parse_exclude( const struct option * opt , const char * arg , int unset)', 472, 481), ('option_parse_exclude_from( const struct option * opt , const char * arg , int unset)', 483, 492), ('option_parse_exclude_standard( const struct option * opt , const char * arg , int unset)', 494, 503), ('cmd_ls_files( int argc , const char ** argv , const char * cmd_prefix)', 505, 682)], '/home/kevin/thesis/git/builtin/ls-remote.c': [('tail_match( const char ** pattern , const char * path)', 19, 36), ('cmd_ls_remote( int argc , const char ** argv , const char * prefix)', 38, 156)], '/home/kevin/thesis/git/builtin/ls-tree.c': [('show_recursive( const char * base , int baselen , const char * pathname)', 33, 61), ('show_tree( const struct object_id * oid , struct strbuf * base , const char * pathname , unsigned mode , int stage , void * context)', 63, 119), ('cmd_ls_tree( int argc , const char ** argv , const char * prefix)', 121, 188)], '/home/kevin/thesis/git/builtin/mailinfo.c': [('cmd_mailinfo( int argc , const char ** argv , const char * prefix)', 14, 65)], '/home/kevin/thesis/git/builtin/mailsplit.c': [('is_from_line( const char * line , int len)', 15, 44), ('is_gtfrom( const struct strbuf * buf)', 50, 60), ('split_one( FILE * mbox , const char * name , int allow_bare)', 67, 111), ('populate_maildir_list( struct string_list * list , const char * path)', 113, 148), ('maildir_filename_cmp( const char * a , const char * b)', 150, 169), ('split_maildir( const char * maildir , const char * dir , int nr_prec , int skip)', 171, 217), ('split_mbox( const char * file , const char * dir , int allow_bare , int nr_prec , int skip)', 219, 269), ('cmd_mailsplit( int argc , const char ** argv , const char * prefix)', 271, 369)], '/home/kevin/thesis/git/builtin/merge-base.c': [('show_merge_base( struct commit ** rev , int rev_nr , int show_all)', 10, 27), ('get_commit_reference( const char * arg)', 38, 50), ('handle_independent( int count , const char ** args)', 52, 70), ('handle_octopus( int count , const char ** args , int show_all)', 72, 96), ('handle_is_ancestor( int argc , const char ** argv)', 98, 110), ('add_one_commit( struct object_id * oid , struct rev_collect * revs)', 119, 135), ('collect_one_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * ident , timestamp_t timestamp , int tz , const char * message , void * cbdata)', 137, 149), ('handle_fork_point( int argc , const char ** argv)', 151, 210), ('cmd_merge_base( int argc , const char ** argv , const char * prefix)', 212, 265)], '/home/kevin/thesis/git/builtin/merge-file.c': [('label_cb( const struct option * opt , const char * arg , int unset)', 13, 22), ('cmd_merge_file( int argc , const char ** argv , const char * prefix)', 24, 116)], '/home/kevin/thesis/git/builtin/merge-index.c': [('merge_entry( int pos , const char * path)', 8, 43), ('merge_one_path( const char * path)', 45, 55), ('merge_all( void)', 57, 66), ('cmd_merge_index( int argc , const char ** argv , const char * prefix)', 68, 110)], '/home/kevin/thesis/git/builtin/merge-ours.c': [('cmd_merge_ours( int argc , const char ** argv , const char * prefix)', 17, 32)], '/home/kevin/thesis/git/builtin/merge-recursive.c': [('better_branch_name( const char * branch)', 10, 20), ('cmd_merge_recursive( int argc , const char ** argv , const char * prefix)', 22, 83)], '/home/kevin/thesis/git/builtin/merge-tree.c': [('add_merge_entry( struct merge_list * entry)', 22, 26), ('explanation( struct merge_list * entry)', 30, 54), ('result( struct merge_list * entry , unsigned long * size)', 56, 78), ('origin( struct merge_list * entry , unsigned long * size)', 80, 90), ('show_outf( void * priv_ , mmbuffer_t * mb , int nbuf)', 92, 98), ('show_diff( struct merge_list * entry)', 100, 126), ('show_result_list( struct merge_list * entry)', 128, 137), ('show_result( void)', 139, 149), ('same_entry( struct name_entry * a , struct name_entry * b)', 152, 158), ('both_empty( struct name_entry * a , struct name_entry * b)', 160, 163), ('create_entry( unsigned stage , unsigned mode , const struct object_id * oid , const char * path)', 165, 174), ('traverse_path( const struct traverse_info * info , const struct name_entry * n)', 176, 180), ('resolve( const struct traverse_info * info , struct name_entry * ours , struct name_entry * result)', 182, 198), ('unresolved_directory( const struct traverse_info * info , struct name_entry n [ 3 ])', 200, 229), ('link_entry( unsigned stage , const struct traverse_info * info , struct name_entry * n , struct merge_list * entry)', 232, 246), ('unresolved( const struct traverse_info * info , struct name_entry n [ 3 ])', 248, 277), ('threeway_callback( int n , unsigned long mask , unsigned long dirmask , struct name_entry * entry , struct traverse_info * info)', 308, 338), ('merge_trees( struct tree_desc t [ 3 ] , const char * base)', 340, 347), ('get_tree_descriptor( struct tree_desc * desc , const char * rev)', 349, 360), ('cmd_merge_tree( int argc , const char ** argv , const char * prefix)', 362, 380)], '/home/kevin/thesis/git/builtin/merge.c': [('option_parse_message( const struct option * opt , const char * arg , int unset)', 99, 112), ('get_strategy( const char * name)', 114, 165), ('append_strategy( struct strategy * s)', 167, 171), ('option_parse_strategy( const struct option * opt , const char * name , int unset)', 173, 181), ('option_parse_x( const struct option * opt , const char * arg , int unset)', 183, 192), ('option_parse_n( const struct option * opt , const char * arg , int unset)', 194, 199), ('drop_save( void)', 248, 253), ('save_state( struct object_id * stash)', 255, 283), ('read_empty( const struct object_id * oid , int verbose)', 285, 301), ('reset_hard( const struct object_id * oid , int verbose)', 303, 318), ('restore_state( const struct object_id * head , const struct object_id * stash)', 320, 341), ('finish_up_to_date( const char * msg)', 344, 349), ('squash_message( struct commit * commit , struct commit_list * remoteheads)', 351, 387), ('finish( struct commit * head_commit , struct commit_list * remoteheads , const struct object_id * new_head , const char * msg)', 389, 439), ('merge_name( const char * remote , struct strbuf * msg)', 442, 537), ('parse_branch_merge_options( char * bmo)', 539, 557), ('git_merge_config( const char * k , const char * v , void * cb)', 559, 604), ('read_tree_trivial( struct object_id * common , struct object_id * head , struct object_id * one)', 606, 640), ('write_tree_trivial( struct object_id * oid)', 642, 646), ('try_merge_strategy( const char * strategy , struct commit_list * common , struct commit_list * remoteheads , struct commit * head)', 648, 704), ('count_diff_files( struct diff_queue_struct * q , struct diff_options * opt , void * data)', 706, 712), ('count_unmerged_entries( void)', 714, 723), ('add_strategies( const char * string , unsigned attr)', 725, 742), ('read_merge_msg( struct strbuf * msg)', 744, 750), ('abort_commit( struct commit_list * remoteheads , const char * err_msg)', 753, 761), ('prepare_to_commit( struct commit_list * remoteheads)', 771, 804), ('merge_trivial( struct commit * head , struct commit_list * remoteheads)', 806, 829), ('finish_automerge( struct commit * head , int head_subsumed , struct commit_list * common , struct commit_list * remoteheads , struct object_id * result_tree , const char * wt_strategy)', 831, 856), ('suggest_conflicts( void)', 858, 875), ('evaluate_result( void)', 877, 898), ('setup_with_upstream( const char ** * argv)', 904, 927), ('write_merge_heads( struct commit_list * remoteheads)', 929, 951), ('write_merge_state( struct commit_list * remoteheads)', 953, 958), ('default_edit_option( void)', 960, 984), ('reduce_parents( struct commit * head_commit , int * head_subsumed , struct commit_list * remoteheads)', 986, 1015), ('prepare_merge_message( struct strbuf * merge_names , struct strbuf * merge_msg)', 1017, 1029), ('handle_fetch_head( struct commit_list ** remotes , struct strbuf * merge_names)', 1031, 1083), ('collect_parents( struct commit * head_commit , int * head_subsumed , int argc , const char ** argv , struct strbuf * merge_msg)', 1085, 1126), ('merging_a_throwaway_tag( struct commit * commit)', 1128, 1163), ('cmd_merge( int argc , const char ** argv , const char * prefix)', 1165, 1624)], '/home/kevin/thesis/git/builtin/mktag.c': [('verify_object( const struct object_id * oid , const char * expected_type)', 22, 36), ('verify_tag( char * buffer , unsigned long size)', 38, 150), ('cmd_mktag( int argc , const char ** argv , const char * prefix)', 152, 175)], '/home/kevin/thesis/git/builtin/mktree.c': [('append_to_tree( unsigned mode , struct object_id * oid , char * path)', 19, 33), ('ent_compare( const void * a_ , const void * b_)', 35, 41), ('write_tree( struct object_id * oid)', 43, 62), ('mktree_line( char * buf , size_t len , int nul_term_line , int allow_missing)', 69, 140), ('cmd_mktree( int ac , const char ** av , const char * prefix)', 142, 192)], '/home/kevin/thesis/git/builtin/mv.c': [('internal_prefix_pathspec( const char * prefix , const char ** pathspec , int count , unsigned flags)', 24, 60), ('add_slash( const char * path)', 62, 73), ('prepare_move_submodule( const char * src , int first , const char ** submodule_gitfile)', 77, 92), ('index_range_of_same_dir( const char * src , int length , int * first_p , int * last_p)', 94, 115), ('cmd_mv( int argc , const char ** argv , const char * prefix)', 117, 303)], '/home/kevin/thesis/git/builtin/name-rev.c': [('is_better_name( struct rev_name * name , const char * tip_name , timestamp_t taggerdate , int generation , int distance , int from_tag)', 25, 61), ('name_rev( struct commit * commit , const char * tip_name , timestamp_t taggerdate , int generation , int distance , int from_tag , int deref)', 63, 126), ('subpath_matches( const char * path , const char * filter)', 128, 140), ('name_ref_abbrev( const char * refname , int shorten_unambiguous)', 142, 151), ('add_to_tip_table( const struct object_id * oid , const char * refname , int shorten_unambiguous)', 170, 180), ('tipcmp( const void * a_ , const void * b_)', 182, 186), ('name_ref( const char * path , const struct object_id * oid , int flags , void * cb_data)', 188, 263), ('nth_tip_table_ent( size_t ix , void * table_)', 265, 269), ('get_exact_ref_match( const struct object * o)', 271, 288), ('get_rev_name( const struct object * o , struct strbuf * buf)', 291, 313), ('show_name( const struct object * obj , const char * caller_name , int always , int allow_undefined , int name_only)', 315, 335), ('name_rev_line( char * p , struct name_ref_data * data)', 344, 387), ('cmd_name_rev( int argc , const char ** argv , const char * prefix)', 389, 499)], '/home/kevin/thesis/git/builtin/notes.c': [('free_note_data( struct note_data * d)', 104, 111), ('list_each_note( const struct object_id * object_oid , const struct object_id * note_oid , char * note_path , void * cb_data)', 113, 119), ('copy_obj_to_fd( int fd , const struct object_id * oid)', 121, 131), ('write_commented_object( int fd , const struct object_id * object)', 133, 162), ('prepare_note_data( const struct object_id * object , struct note_data * d , const struct object_id * old_note)', 164, 199), ('write_note_data( struct note_data * d , struct object_id * oid)', 201, 210), ('parse_msg_arg( const struct option * opt , const char * arg , int unset)', 212, 224), ('parse_file_arg( const struct option * opt , const char * arg , int unset)', 226, 241), ('parse_reuse_arg( const struct option * opt , const char * arg , int unset)', 243, 269), ('parse_reedit_arg( const struct option * opt , const char * arg , int unset)', 271, 276), ('notes_copy_from_stdin( int force , const char * rewrite_cmd)', 278, 333), ('init_notes_check( const char * subcommand , int flags)', 335, 352), ('list( int argc , const char ** argv , const char * prefix)', 354, 389), ('add( int argc , const char ** argv , const char * prefix)', 393, 476), ('copy( int argc , const char ** argv , const char * prefix)', 478, 552), ('append_edit( int argc , const char ** argv , const char * prefix)', 554, 638), ('show( int argc , const char ** argv , const char * prefix)', 640, 676), ('merge_abort( struct notes_merge_options * o)', 678, 694), ('merge_commit( struct notes_merge_options * o)', 696, 748), ('git_config_get_notes_strategy( const char * key , enum notes_merge_strategy * strategy)', 750, 762), ('merge( int argc , const char ** argv , const char * prefix)', 764, 878), ('remove_one_note( struct notes_tree * t , const char * name , unsigned flag)', 882, 894), ('remove_cmd( int argc , const char ** argv , const char * prefix)', 896, 936), ('prune( int argc , const char ** argv , const char * prefix)', 938, 964), ('get_ref( int argc , const char ** argv , const char * prefix)', 966, 979), ('cmd_notes( int argc , const char ** argv , const char * prefix)', 981, 1027)], '/home/kevin/thesis/git/builtin/pack-objects.c': [('index_commit_for_bitmap( struct commit * commit)', 125, 133), ('get_delta( struct object_entry * entry)', 135, 156), ('do_compress( void ** pptr , unsigned long size)', 158, 181), ('write_large_blob_data( struct git_istream * st , struct hashfile * f , const struct object_id * oid)', 183, 220), ('check_pack_inflate( struct packed_git * p , struct pack_window ** w_curs , off_t offset , off_t len , unsigned long expect)', 226, 250), ('copy_pack_data( struct hashfile * f , struct packed_git * p , struct pack_window ** w_curs , off_t offset , off_t len)', 252, 269), ('write_no_reuse_object( struct hashfile * f , struct object_entry * entry , unsigned long limit , int usable_delta)', 272, 380), ('write_reuse_object( struct hashfile * f , struct object_entry * entry , unsigned long limit , int usable_delta)', 383, 460), ('write_object( struct hashfile * f , struct object_entry * entry , off_t write_offset)', 463, 528), ('write_one( struct hashfile * f , struct object_entry * e , off_t * offset)', 537, 588), ('mark_tagged( const char * path , const struct object_id * oid , int flag , void * cb_data)', 590, 604), ('add_to_write_order( struct object_entry ** wo , unsigned int * endp , struct object_entry * e)', 606, 614), ('add_descendants_to_write_order( struct object_entry ** wo , unsigned int * endp , struct object_entry * e)', 616, 657), ('add_family_to_write_order( struct object_entry ** wo , unsigned int * endp , struct object_entry * e)', 659, 668), ('compute_write_order( void)', 670, 754), ('write_reused_pack( struct hashfile * f)', 756, 807), ('write_pack_file( void)', 813, 940), ('no_try_delta( const char * path)', 942, 953), ('have_duplicate_entry( const struct object_id * oid , int exclude , uint32_t * index_pos)', 965, 982), ('want_found_object( int exclude , struct packed_git * p)', 984, 1019), ('want_object_in_pack( const struct object_id * oid , int exclude , struct packed_git ** found_pack , off_t * found_offset)', 1030, 1077), ('create_object_entry( const struct object_id * oid , enum object_type type , uint32_t hash , int exclude , int no_try_delta , uint32_t index_pos , struct packed_git * found_pack , off_t found_offset)', 1079, 1103), ('add_object_entry( const struct object_id * oid , enum object_type type , const char * name , int exclude)', 1109, 1134), ('add_object_entry_from_bitmap( const struct object_id * oid , enum object_type type , int flags , uint32_t name_hash , struct packed_git * pack , off_t offset)', 1136, 1153), ('pbase_tree_cache_ix( const struct object_id * oid)', 1164, 1167), ('pbase_tree_cache_ix_incr( int ix)', 1168, 1171), ('pbase_tree_get( const struct object_id * oid)', 1183, 1248), ('pbase_tree_put( struct pbase_tree_cache * cache)', 1250, 1258), ('name_cmp_len( const char * name)', 1260, 1266), ('add_pbase_object( struct tree_desc * tree , const char * name , int cmplen , const char * fullname)', 1268, 1306), ('done_pbase_path_pos( unsigned hash)', 1311, 1325), ('check_pbase_path( unsigned hash)', 1327, 1342), ('add_preferred_base_object( const char * name)', 1344, 1364), ('add_preferred_base( struct object_id * oid)', 1366, 1394), ('cleanup_preferred_base( void)', 1396, 1419), ('check_object( struct object_entry * entry)', 1421, 1566), ('pack_offset_sort( const void * _a , const void * _b)', 1568, 1585), ('drop_reused_delta( struct object_entry * entry)', 1600, 1633), ('break_delta_chains( struct object_entry * entry)', 1643, 1757), ('get_object_details( void)', 1759, 1791), ('type_size_sort( const void * _a , const void * _b)', 1802, 1828), ('delta_cacheable( unsigned long src_size , unsigned long trg_size , unsigned long delta_size)', 1837, 1851), ('oe_get_size_slow( struct packing_data * pack , const struct object_entry * e)', 1883, 1916), ('try_delta( struct unpacked * trg , struct unpacked * src , unsigned max_depth , unsigned long * mem_usage)', 1918, 2065), ('check_delta_limit( struct object_entry * me , unsigned int n)', 2067, 2078), ('free_unpacked( struct unpacked * n)', 2080, 2092), ('find_deltas( struct object_entry ** list , unsigned * list_size , int window , int depth , unsigned * processed)', 2094, 2234), ('try_to_free_from_threads( size_t size)', 2238, 2243), ('init_threaded_search( void)', 2275, 2282), ('cleanup_threaded_search( void)', 2284, 2291), ('threaded_find_deltas( void * arg)', 2293, 2328), ('ll_find_deltas( struct object_entry ** list , unsigned list_size , int window , int depth , unsigned * processed)', 2330, 2457), ('add_tag_chain( const struct object_id * oid)', 2463, 2490), ('add_ref_tag( const char * path , const struct object_id * oid , int flag , void * cb_data)', 2492, 2501), ('prepare_pack( int window , int depth)', 2503, 2573), ('git_pack_config( const char * k , const char * v , void * cb)', 2575, 2628), ('read_object_list_from_stdin( void)', 2630, 2660), ('show_commit( struct commit * commit , void * data)', 2665, 2672), ('show_object( struct object * obj , const char * name , void * data)', 2674, 2679), ('show_object__ma_allow_any( struct object * obj , const char * name , void * data)', 2681, 2693), ('show_object__ma_allow_promisor( struct object * obj , const char * name , void * data)', 2695, 2707), ('option_parse_missing_action( const struct option * opt , const char * arg , int unset)', 2709, 2737), ('show_edge( struct commit * commit)', 2739, 2742), ('mark_in_pack_object( struct object * object , struct packed_git * p , struct in_pack * in_pack)', 2755, 2760), ('ofscmp( const void * a_ , const void * b_)', 2766, 2777), ('add_objects_in_unpacked_packs( struct rev_info * revs)', 2779, 2817), ('add_loose_object( const struct object_id * oid , const char * path , void * data)', 2819, 2831), ('add_unreachable_loose_objects( void)', 2838, 2843), ('has_sha1_pack_kept_or_nonlocal( const struct object_id * oid)', 2845, 2868), ('loosened_object_can_be_discarded( const struct object_id * oid , timestamp_t mtime)', 2879, 2889), ('loosen_unused_packed_objects( struct rev_info * revs)', 2891, 2913), ('pack_options_allow_reuse( void)', 2920, 2928), ('get_object_list_from_bitmap( struct rev_info * revs)', 2930, 2947), ('record_recent_object( struct object * obj , const char * name , void * data)', 2949, 2954), ('record_recent_commit( struct commit * commit , void * data)', 2956, 2959), ('get_object_list( int ac , const char ** av)', 2961, 3032), ('add_extra_kept_packs( const struct string_list * names)', 3034, 3058), ('option_parse_index_version( const struct option * opt , const char * arg , int unset)', 3060, 3073), ('option_parse_unpack_unreachable( const struct option * opt , const char * arg , int unset)', 3075, 3088), ('cmd_pack_objects( int argc , const char ** argv , const char * prefix)', 3090, 3360)], '/home/kevin/thesis/git/builtin/pack-redundant.c': [('llist_item_put( struct llist_item * item)', 45, 49), ('llist_item_get( void)', 51, 64), ('llist_free( struct llist * list)', 66, 73), ('llist_init( struct llist ** list)', 75, 80), ('llist_copy( struct llist * list)', 82, 107), ('llist_insert( struct llist * list , struct llist_item * after , const struct object_id * oid)', 109, 131), ('llist_insert_back( struct llist * list , const struct object_id * oid)', 133, 137), ('llist_insert_sorted_unique( struct llist * list , const struct object_id * oid , struct llist_item * hint)', 139, 158), ('llist_sorted_remove( struct llist * list , const struct object_id * oid , struct llist_item * hint)', 161, 192), ('llist_sorted_difference_inplace( struct llist * A , struct llist * B)', 195, 207), ('pack_list_insert( struct pack_list ** pl , struct pack_list * entry)', 209, 217), ('pack_list_size( struct pack_list * pl)', 219, 227), ('pack_list_difference( const struct pack_list * A , const struct pack_list * B)', 229, 248), ('cmp_two_packs( struct pack_list * p1 , struct pack_list * p2)', 250, 286), ('pll_free( struct pll * l)', 288, 303), ('get_permutations( struct pack_list * list , int n)', 308, 340), ('is_superset( struct pack_list * pl , struct llist * list)', 342, 358), ('sizeof_union( struct packed_git * p1 , struct packed_git * p2)', 360, 392), ('get_pack_redundancy( struct pack_list * pl)', 395, 411), ('pack_set_bytecount( struct pack_list * pl)', 413, 422), ('minimize( struct pack_list ** min)', 424, 492), ('load_all_objects( void)', 494, 517), ('cmp_local_packs( void)', 520, 529), ('scan_alt_odb_packs( void)', 531, 546), ('add_pack( struct packed_git * p)', 548, 576), ('add_pack_file( const char * filename)', 578, 591), ('load_all( void)', 593, 601), ('cmd_pack_redundant( int argc , const char ** argv , const char * prefix)', 603, 701)], '/home/kevin/thesis/git/builtin/pack-refs.c': [('cmd_pack_refs( int argc , const char ** argv , const char * prefix)', 11, 22)], '/home/kevin/thesis/git/builtin/patch-id.c': [('flush_current_id( int patchlen , struct object_id * id , struct object_id * result)', 4, 13), ('remove_space( char * line)', 15, 26), ('scan_hunk_header( const char * p , int * p_before , int * p_after)', 28, 55), ('flush_one_hunk( struct object_id * result , git_SHA_CTX * ctx)', 57, 71), ('get_one_patchid( struct object_id * next_oid , struct object_id * result , struct strbuf * line_buf , int stable)', 73, 149), ('generate_id_list( int stable)', 151, 164), ('git_patch_id_config( const char * var , const char * value , void * cb)', 168, 178), ('cmd_patch_id( int argc , const char ** argv , const char * prefix)', 180, 199)], '/home/kevin/thesis/git/builtin/prune-packed.c': [('prune_subdir( unsigned int nr , const char * path , void * data)', 14, 21), ('prune_object( const struct object_id * oid , const char * path , void * data)', 23, 36), ('prune_packed_objects( int opts)', 38, 49), ('cmd_prune_packed( int argc , const char ** argv , const char * prefix)', 51, 67)], '/home/kevin/thesis/git/builtin/prune.c': [('prune_tmp_file( const char * fullpath)', 19, 31), ('prune_object( const struct object_id * oid , const char * fullpath , void * data)', 33, 61), ('prune_cruft( const char * basename , const char * path , void * data)', 63, 70), ('prune_subdir( unsigned int nr , const char * path , void * data)', 72, 77), ('remove_temporary_files( const char * path)', 85, 99), ('cmd_prune( int argc , const char ** argv , const char * prefix)', 101, 166)], '/home/kevin/thesis/git/builtin/pull.c': [('parse_config_rebase( const char * key , const char * value , int fatal)', 42, 64), ('parse_opt_rebase( const struct option * opt , const char * arg , int unset)', 69, 78), ('argv_push_verbosity( struct argv_array * arr)', 241, 250), ('argv_push_force( struct argv_array * arr)', 255, 260), ('set_reflog_message( int argc , const char ** argv)', 265, 279), ('config_get_ff( void)', 287, 305), ('config_get_rebase( void)', 314, 335), ('git_pull_config( const char * var , const char * value , void * cb)', 340, 351), ('get_merge_heads( struct oid_array * merge_heads)', 357, 374), ('get_only_remote( struct remote * remote , void * cb_data)', 380, 389), ('die_no_merge_candidates( const char * repo , const char ** refspecs)', 413, 464), ('parse_repo_refspecs( int argc , const char ** argv , const char ** repo , const char ** * refspecs)', 471, 480), ('run_fetch( const char * repo , const char ** refspecs)', 486, 551), ('pull_into_void( const struct object_id * merge_head , const struct object_id * curr_head)', 556, 572), ('rebase_submodules( void)', 574, 585), ('update_submodules( void)', 587, 598), ('run_merge( void)', 603, 643), ('get_upstream_branch( const char * remote)', 652, 673), ('get_tracking_branch( const char * remote , const char * refspec)', 681, 710), ('get_rebase_fork_point( struct object_id * fork_point , const char * repo , const char * refspec)', 717, 755), ('get_octopus_merge_base( struct object_id * merge_base , const struct object_id * curr_head , const struct object_id * merge_head , const struct object_id * fork_point)', 761, 783), ('run_rebase( const struct object_id * curr_head , const struct object_id * merge_head , const struct object_id * fork_point)', 790, 839), ('cmd_pull( int argc , const char ** argv , const char * prefix)', 841, 970)], '/home/kevin/thesis/git/builtin/push.c': [('parse_push_color_slot( const char * slot)', 34, 41), ('push_get_color( enum color_push ix)', 43, 48), ('map_refspec( const char * ref , struct remote * remote , struct ref * local_refs)', 64, 98), ('set_refspecs( const char ** refs , int nr , const char * repo)', 100, 134), ('push_url_of_remote( struct remote * remote , const char ** * url_p)', 136, 144), ('die_push_simple( struct branch * branch , struct remote * remote)', 146, 180), ('setup_push_upstream( struct remote * remote , struct branch * branch , int triangular , int simple)', 189, 221), ('setup_push_current( struct remote * remote , struct branch * branch)', 223, 231), ('is_workflow_triangular( struct remote * remote)', 233, 237), ('setup_default_push_refspecs( struct remote * remote)', 239, 271), ('advise_pull_before_push( void)', 300, 305), ('advise_checkout_pull_push( void)', 307, 312), ('advise_ref_already_exists( void)', 314, 319), ('advise_ref_fetch_first( void)', 321, 326), ('advise_ref_needs_force( void)', 328, 333), ('push_with_options( struct transport * transport , struct refspec * rs , int flags)', 335, 382), ('do_push( const char * repo , int flags , const struct string_list * push_options)', 384, 438), ('option_parse_recurse_submodules( const struct option * opt , const char * arg , int unset)', 440, 453), ('set_push_cert_flags( int * flags , int v)', 455, 470), ('git_push_config( const char * k , const char * v , void * cb)', 473, 536), ('cmd_push( int argc , const char ** argv , const char * prefix)', 538, 643)], '/home/kevin/thesis/git/builtin/read-tree.c': [('list_tree( struct object_id * oid)', 26, 37), ('index_output_cb( const struct option * opt , const char * arg , int unset)', 44, 49), ('exclude_per_directory_cb( const struct option * opt , const char * arg , int unset)', 51, 71), ('debug_stage( const char * label , const struct cache_entry * ce , struct unpack_trees_options * o)', 73, 85), ('debug_merge( const struct cache_entry * const * stages , struct unpack_trees_options * o)', 87, 100), ('git_read_tree_config( const char * var , const char * value , void * cb)', 102, 108), ('cmd_read_tree( int argc , const char ** argv , const char * unused_prefix)', 110, 263)], '/home/kevin/thesis/git/builtin/rebase--helper.c': [('cmd_rebase__helper( int argc , const char ** argv , const char * prefix)', 12, 88)], '/home/kevin/thesis/git/builtin/receive-pack.c': [('parse_deny_action( const char * var , const char * value)', 97, 112), ('receive_pack_config( const char * var , const char * value , void * cb)', 114, 230), ('show_ref( const char * path , const struct object_id * oid)', 232, 255), ('show_ref_cb( const char * path_full , const struct object_id * oid , int flag , void * data)', 257, 280), ('show_one_alternate_ref( const char * refname , const struct object_id * oid , void * data)', 282, 292), ('write_head_info( void)', 294, 308), ('report_message( const char * prefix , const char * err , va_list params)', 324, 339), ('rp_warning( const char * err , ...)', 341, 347), ('rp_error( const char * err , ...)', 349, 355), ('copy_to_sideband( int in , int out , void * arg)', 357, 418), ('hmac_sha1( unsigned char * out , const char * key_in , size_t key_len , const char * text , size_t text_len)', 422, 459), ('prepare_push_cert_nonce( const char * path , timestamp_t stamp)', 461, 473), ('find_header( const char * msg , size_t len , const char * key , const char ** next_line)', 480, 501), ('check_nonce( const char * buf , size_t len)', 503, 583), ('check_cert_push_options( const struct string_list * push_options)', 589, 622), ('prepare_push_cert_sha1( struct child_process * proc)', 624, 682), ('run_and_feed_hook( const char * hook_name , feed_fn feed , struct receive_hook_feed_state * feed_state)', 692, 759), ('feed_receive_hook( void * state_ , const char ** bufp , size_t * sizep)', 761, 781), ('run_receive_hook( struct command * commands , const char * hook_name , int skip_broken , const struct string_list * push_options)', 783, 801), ('run_update_hook( struct command * cmd)', 803, 829), ('is_ref_checked_out( const char * ref)', 831, 839), ('refuse_unconfigured_deny( void)', 856, 859), ('refuse_unconfigured_deny_delete_current( void)', 871, 874), ('update_shallow_ref( struct command * cmd , struct shallow_info * si)', 877, 913), ('head_has_history( void)', 924, 929), ('push_to_deploy( unsigned char * sha1 , struct argv_array * env , const char * work_tree)', 931, 996), ('push_to_checkout( unsigned char * sha1 , struct argv_array * env , const char * work_tree)', 1000, 1010), ('update_worktree( unsigned char * sha1)', 1012, 1030), ('update( struct command * cmd , struct shallow_info * si)', 1032, 1174), ('run_update_post_hook( struct command * commands)', 1176, 1205), ('check_aliased_update( struct command * cmd , struct string_list * list)', 1207, 1254), ('check_aliased_updates( struct command * commands)', 1256, 1274), ('command_singleton_iterator( void * cb_data , struct object_id * oid)', 1276, 1286), ('set_connectivity_errors( struct command * commands , struct shallow_info * si)', 1288, 1308), ('iterate_receive_command_list( void * cb_data , struct object_id * oid)', 1315, 1333), ('reject_updates_to_hidden( struct command * commands)', 1335, 1360), ('should_process_cmd( struct command * cmd)', 1362, 1365), ('warn_if_skipped_connectivity_check( struct command * commands , struct shallow_info * si)', 1367, 1382), ('execute_commands_non_atomic( struct command * commands , struct shallow_info * si)', 1384, 1413), ('execute_commands_atomic( struct command * commands , struct shallow_info * si)', 1415, 1455), ('execute_commands( struct command * commands , const char * unpacker_error , struct shallow_info * si , const struct string_list * push_options)', 1457, 1529), ('queue_command( struct command ** tail , const char * line , int linelen)', 1531, 1554), ('queue_commands_from_cert( struct command ** tail , struct strbuf * push_cert)', 1556, 1576), ('read_head_info( struct oid_array * shallow)', 1578, 1644), ('read_push_options( struct string_list * options)', 1646, 1659), ('parse_pack_header( struct pack_header * hdr)', 1661, 1679), ('push_header_arg( struct argv_array * args , struct pack_header * hdr)', 1683, 1687), ('unpack( int err_fd , struct shallow_info * si)', 1689, 1785), ('unpack_with_sideband( struct shallow_info * si)', 1787, 1806), ('prepare_shallow_update( struct command * commands , struct shallow_info * si)', 1808, 1852), ('update_shallow_info( struct command * commands , struct shallow_info * si , struct oid_array * ref)', 1854, 1890), ('report( struct command * commands , const char * unpack_status)', 1892, 1914), ('delete_only( struct command * commands)', 1916, 1924), ('cmd_receive_pack( int argc , const char ** argv , const char * prefix)', 1926, 2054)], '/home/kevin/thesis/git/builtin/reflog.c': [('tree_is_complete( const struct object_id * oid)', 60, 100), ('commit_is_complete( struct commit * commit)', 102, 189), ('keep_entry( struct commit ** it , struct object_id * oid)', 191, 213), ('mark_reachable( struct expire_reflog_policy_cb * cb)', 221, 254), ('unreachable( struct expire_reflog_policy_cb * cb , struct commit * commit , struct object_id * oid)', 256, 283), ('should_expire_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 288, 314), ('push_tip_to_list( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 316, 328), ('reflog_expiry_prepare( const char * refname , const struct object_id * oid , void * cb_data)', 330, 365), ('reflog_expiry_cleanup( void * cb_data)', 367, 381), ('collect_reflog( const char * ref , const struct object_id * oid , int unused , void * cb_data)', 383, 393), ('find_cfg_ent( const char * pattern , size_t len)', 402, 418), ('reflog_expire_config( const char * var , const char * value , void * cb)', 424, 470), ('set_reflog_expiry_param( struct cmd_reflog_expire_cb * cb , int slot , const char * ref)', 472, 505), ('cmd_reflog_expire( int argc , const char ** argv , const char * prefix)', 507, 608), ('count_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 610, 618), ('cmd_reflog_delete( int argc , const char ** argv , const char * prefix)', 620, 685), ('cmd_reflog_exists( int argc , const char ** argv , const char * prefix)', 687, 711), ('cmd_reflog( int argc , const char ** argv , const char * prefix)', 720, 742)], '/home/kevin/thesis/git/builtin/remote-ext.c': [('strip_escapes( const char * str , const char * service , const char ** next)', 31, 118), ('parse_argv( struct argv_array * out , const char * arg , const char * service)', 120, 128), ('send_git_request( int stdin_fd , const char * serv , const char * repo , const char * vhost)', 130, 138), ('run_child( const char * arg , const char * service)', 140, 162), ('command_loop( const char * child)', 166, 194), ('cmd_remote_ext( int argc , const char ** argv , const char * prefix)', 196, 202)], '/home/kevin/thesis/git/builtin/remote-fd.c': [('command_loop( int input_fd , int output_fd)', 24, 54), ('cmd_remote_fd( int argc , const char ** argv , const char * prefix)', 56, 82)], '/home/kevin/thesis/git/builtin/remote.c': [('fetch_remote( const char * name)', 89, 100), ('add_branch( const char * key , const char * branchname , const char * remotename , int mirror , struct strbuf * tmp)', 113, 125), ('parse_mirror_opt( const struct option * opt , const char * arg , int not)', 131, 147), ('add( int argc , const char ** argv)', 149, 244), ('abbrev_ref( const char * name , const char * prefix)', 256, 260), ('config_read_branches( const char * key , const char * value , void * cb)', 263, 319), ('read_branches( void)', 321, 326), ('get_ref_states( const struct ref * remote_refs , struct ref_states * states)', 334, 368), ('get_push_ref_states( const struct ref * remote_refs , struct ref_states * states)', 383, 427), ('get_push_ref_states_noquery( struct ref_states * states)', 429, 461), ('get_head_names( const struct ref * remote_refs , struct ref_states * states)', 463, 483), ('add_known_remote( struct remote * remote , void * cb_data)', 495, 508), ('add_branch_for_removal( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 516, 549), ('read_remote_branches( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 557, 579), ('migrate_file( struct remote * remote)', 581, 604), ('mv( int argc , const char ** argv)', 606, 737), ('rm( int argc , const char ** argv)', 739, 817), ('clear_push_info( void * util , const char * string)', 819, 824), ('free_remote_ref_states( struct ref_states * states)', 826, 833), ('append_ref_to_tracked_list( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 835, 850), ('get_remote_ref_states( const char * name , struct ref_states * states , int query)', 852, 885), ('add_remote_to_show_info( struct string_list_item * item , void * cb_data)', 894, 902), ('show_remote_info_item( struct string_list_item * item , void * cb_data)', 904, 929), ('add_local_to_show_info( struct string_list_item * branch_item , void * cb_data)', 931, 951), ('show_local_info_item( struct string_list_item * item , void * cb_data)', 953, 990), ('add_push_to_show_info( struct string_list_item * push_item , void * cb_data)', 992, 1005), ('cmp_string_with_push( const void * va , const void * vb)', 1011, 1019), ('show_push_info_item( struct string_list_item * item , void * cb_data)', 1021, 1063), ('get_one_entry( struct remote * remote , void * priv)', 1065, 1093), ('show_all( void)', 1095, 1121), ('show( int argc , const char ** argv)', 1123, 1229), ('set_head( int argc , const char ** argv)', 1231, 1287), ('prune_remote( const char * remote , int dry_run)', 1289, 1336), ('prune( int argc , const char ** argv)', 1338, 1356), ('get_remote_default( const char * key , const char * value , void * priv)', 1358, 1365), ('update( int argc , const char ** argv)', 1367, 1405), ('remove_all_fetch_refspecs( const char * remote , const char * key)', 1407, 1410), ('add_branches( struct remote * remote , const char ** branches , const char * key)', 1412, 1423), ('set_remote_branches( const char * remotename , const char ** branches , int add_mode)', 1425, 1445), ('set_branches( int argc , const char ** argv)', 1447, 1464), ('get_url( int argc , const char ** argv)', 1466, 1515), ('set_url( int argc , const char ** argv)', 1517, 1602), ('cmd_remote( int argc , const char ** argv , const char * prefix)', 1604, 1643)], '/home/kevin/thesis/git/builtin/repack.c': [('repack_config( const char * var , const char * value , void * cb)', 28, 44), ('remove_temporary_files( void)', 49, 75), ('remove_pack_on_signal( int signo)', 77, 82), ('get_non_kept_pack_filenames( struct string_list * fname_list , const struct string_list * extra_keep)', 89, 121), ('remove_redundant_pack( const char * dir_name , const char * base_name)', 123, 139), ('cmd_repack( int argc , const char ** argv , const char * prefix)', 144, 458)], '/home/kevin/thesis/git/builtin/replace.c': [('show_reference( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 42, 69), ('list_replace_refs( const char * pattern , const char * format)', 71, 93), ('for_each_replace_name( const char ** argv , each_replace_name_fn fn)', 98, 130), ('delete_replace_ref( const char * name , const char * ref , const struct object_id * oid)', 132, 139), ('check_ref_valid( struct object_id * object , struct object_id * prev , struct strbuf * ref , int force)', 141, 156), ('replace_object_oid( const char * object_ref , struct object_id * object , const char * replace_ref , struct object_id * repl , int force)', 158, 196), ('replace_object( const char * object_ref , const char * replace_ref , int force)', 198, 210), ('export_object( const struct object_id * oid , enum object_type type , int raw , const char * filename)', 217, 240), ('import_object( struct object_id * oid , enum object_type type , int raw , const char * filename)', 247, 308), ('edit_and_replace( const char * object_ref , int force , int raw)', 310, 350), ('replace_parents( struct strbuf * buf , int argc , const char ** argv)', 352, 387), ('check_one_mergetag( struct commit * commit , struct commit_extra_header * extra , void * data)', 394, 424), ('check_mergetags( struct commit * commit , int argc , const char ** argv)', 426, 433), ('create_graft( int argc , const char ** argv , int force , int gentle)', 435, 486), ('convert_graft_file( int force)', 488, 518), ('cmd_replace( int argc , const char ** argv , const char * prefix)', 520, 611)], '/home/kevin/thesis/git/builtin/rerere.c': [('outf( void * dummy , mmbuffer_t * ptr , int nbuf)', 17, 24), ('diff_two( const char * file1 , const char * label1 , const char * file2 , const char * label2)', 26, 50), ('cmd_rerere( int argc , const char ** argv , const char * prefix)', 52, 117)], '/home/kevin/thesis/git/builtin/reset.c': [('is_merge( void)', 40, 43), ('reset_index( const struct object_id * oid , int reset_type , int quiet)', 45, 105), ('print_new_head_line( struct commit * commit)', 107, 119), ('update_index_from_diff( struct diff_queue_struct * q , struct diff_options * opt , void * data)', 121, 148), ('read_from_tree( const struct pathspec * pathspec , struct object_id * tree_oid , int intent_to_add)', 150, 170), ('set_reflog_message( struct strbuf * sb , const char * action , const char * rev)', 172, 184), ('die_if_unmerged_cache( int reset_type)', 186, 192), ('parse_args( struct pathspec * pathspec , const char ** argv , const char * prefix , int patch_mode , const char ** rev_ret)', 194, 247), ('reset_refs( const char * rev , const struct object_id * oid)', 249, 270), ('git_reset_config( const char * var , const char * value , void * cb)', 272, 278), ('cmd_reset( int argc , const char ** argv , const char * prefix)', 280, 405)], '/home/kevin/thesis/git/builtin/rev-list.c': [('show_commit( struct commit * commit , void * data)', 78, 189), ('finish_commit( struct commit * commit , void * data)', 191, 198), ('finish_object__ma( struct object * obj)', 200, 231), ('finish_object( struct object * obj , const char * name , void * cb_data)', 233, 243), ('show_object( struct object * obj , const char * name , void * cb_data)', 245, 254), ('show_edge( struct commit * commit)', 256, 259), ('print_var_str( const char * var , const char * val)', 261, 264), ('print_var_int( const char * var , int val)', 266, 269), ('show_bisect_vars( struct rev_list_info * info , int reaches , int all)', 271, 314), ('show_object_fast( const struct object_id * oid , enum object_type type , int exclude , uint32_t name_hash , struct packed_git * found_pack , off_t found_offset)', 316, 326), ('parse_missing_action_value( const char * value)', 328, 354), ('cmd_rev_list( int argc , const char ** argv , const char * prefix)', 356, 587)], '/home/kevin/thesis/git/builtin/rev-parse.c': [('is_rev_argument( const char * arg)', 46, 95), ('show( const char * arg)', 98, 114), ('show_with_type( int type , const char * arg)', 117, 122), ('show_rev( int type , const struct object_id * oid , const char * name)', 125, 165), ('show_flag( const char * arg)', 168, 177), ('show_default( void)', 179, 193), ('show_reference( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 195, 201), ('anti_reference( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 203, 207), ('show_abbrev( const struct object_id * oid , void * cb_data)', 209, 213), ('show_datestring( const char * flag , const char * datestr)', 215, 225), ('show_file( const char * arg , int output_prefix)', 227, 241), ('try_difference( const char * arg)', 243, 300), ('try_parent_shorthands( const char * arg)', 302, 366), ('parseopt_dump( const struct option * o , const char * arg , int unset)', 368, 385), ('skipspaces( const char * s)', 387, 392), ('findspace( const char * s)', 394, 400), ('cmd_parseopt( int argc , const char ** argv , const char * prefix)', 402, 526), ('cmd_sq_quote( int argc , const char ** argv)', 528, 538), ('die_no_single_rev( int quiet)', 540, 546), ('opt_with_value( const char * arg , const char * opt , const char ** value)', 559, 572), ('handle_ref_opt( const char * pattern , const char * prefix)', 574, 581), ('cmd_rev_parse( int argc , const char ** argv , const char * prefix)', 583, 960)], '/home/kevin/thesis/git/builtin/revert.c': [('action_name( const struct replay_opts * opts)', 34, 37), ('revert_or_cherry_pick_usage( struct replay_opts * opts)', 39, 42), ('option_parse_x( const struct option * opt , const char * arg , int unset)', 44, 56), ('option_parse_m( const struct option * opt , const char * arg , int unset)', 58, 74), ('verify_opt_compatible( const char * me , const char * base_opt , ...)', 77, 91), ('run_sequencer( int argc , const char ** argv , struct replay_opts * opts)', 93, 201), ('cmd_revert( int argc , const char ** argv , const char * prefix)', 203, 216), ('cmd_cherry_pick( int argc , const char ** argv , const char * prefix)', 218, 229)], '/home/kevin/thesis/git/builtin/rm.c': [('get_ours_cache_pos( const char * path , int pos)', 30, 40), ('print_error_files( struct string_list * files_list , const char * main_msg , const char * hints_msg , int * errs)', 42, 61), ('submodules_absorb_gitdir_if_needed( const char * prefix)', 63, 88), ('check_local_mod( struct object_id * head , int index_only)', 90, 234), ('cmd_rm( int argc , const char ** argv , const char * prefix)', 250, 392)], '/home/kevin/thesis/git/builtin/send-pack.c': [('print_helper_status( struct ref * ref)', 29, 100), ('send_pack_config( const char * k , const char * v , void * cb)', 102, 125), ('cmd_send_pack( int argc , const char ** argv , const char * prefix)', 127, 310)], '/home/kevin/thesis/git/builtin/serve.c': [('cmd_serve( int argc , const char ** argv , const char * prefix)', 11, 30)], '/home/kevin/thesis/git/builtin/shortlog.c': [('compare_by_counter( const void * a1 , const void * a2)', 32, 36), ('compare_by_list( const void * a1 , const void * a2)', 38, 49), ('insert_one_record( struct shortlog * log , const char * author , const char * oneline)', 51, 98), ('parse_stdin_author( struct shortlog * log , struct strbuf * out , const char * in)', 100, 121), ('read_from_stdin( struct shortlog * log)', 123, 154), ('shortlog_add_commit( struct shortlog * log , struct commit * commit)', 156, 185), ('get_from_rev( struct rev_info * rev , struct shortlog * log)', 187, 195), ('parse_uint( char const ** arg , int comma , int defval)', 197, 211), ('parse_wrap_args( const struct option * opt , const char * arg , int unset)', 218, 242), ('shortlog_init( struct shortlog * log)', 244, 254), ('cmd_shortlog( int argc , const char ** argv , const char * prefix)', 256, 326), ('add_wrapped_shortlog_msg( struct strbuf * sb , const char * s , const struct shortlog * log)', 328, 333), ('shortlog_output( struct shortlog * log)', 335, 376)], '/home/kevin/thesis/git/builtin/show-branch.c': [('get_color_code( int idx)', 31, 36), ('get_color_reset_code( void)', 38, 43), ('interesting( struct commit_list * list)', 45, 55), ('name_commit( struct commit * commit , const char * head_name , int nth)', 65, 73), ('name_parent( struct commit * commit , struct commit * parent)', 80, 90), ('name_first_parent_chain( struct commit * c)', 92, 111), ('name_commits( struct commit_list * list , struct commit ** rev , char ** ref_name , int num_rev)', 113, 185), ('mark_seen( struct commit * commit , struct commit_list ** seen_p)', 187, 194), ('join_revs( struct commit_list ** list_p , struct commit_list ** seen_p , int num_rev , int extra)', 196, 268), ('show_one_commit( struct commit * commit , int no_name)', 270, 300), ('find_digit_prefix( const char * s , int * v)', 305, 317), ('version_cmp( const char * a , const char * b)', 320, 347), ('compare_ref_name( const void * a_ , const void * b_)', 349, 353), ('sort_ref_range( int bottom , int top)', 355, 358), ('append_ref( const char * refname , const struct object_id * oid , int allow_dups)', 360, 384), ('append_head_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 386, 399), ('append_remote_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 401, 414), ('append_tag_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 416, 422), ('append_matching_ref( const char * refname , const struct object_id * oid , int flag , void * cb_data)', 427, 448), ('snarf_refs( int head , int remotes)', 450, 464), ('rev_is_head( const char * head , const char * name , unsigned char * head_sha1 , unsigned char * sha1)', 466, 475), ('show_merge_base( struct commit_list * seen , int num_rev)', 477, 494), ('show_independent( struct commit ** rev , int num_rev , char ** ref_name , unsigned int * rev_mask)', 496, 512), ('append_one_rev( const char * av)', 514, 535), ('git_show_branch_config( const char * var , const char * value , void * cb)', 537, 558), ('omit_in_dense( struct commit * commit , struct commit ** rev , int n)', 560, 579), ('parse_reflog_param( const struct option * opt , const char * arg , int unset)', 583, 600), ('cmd_show_branch( int ac , const char ** av , const char * prefix)', 602, 931)], '/home/kevin/thesis/git/builtin/show-ref.c': [('show_one( const char * refname , const struct object_id * oid)', 20, 45), ('show_ref( const char * refname , const struct object_id * oid , int flag , void * cbdata)', 47, 84), ('add_existing( const char * refname , const struct object_id * oid , int flag , void * cbdata)', 86, 92), ('exclude_existing( const char * match)', 103, 139), ('hash_callback( const struct option * opt , const char * arg , int unset)', 141, 148), ('exclude_existing_callback( const struct option * opt , const char * arg , int unset)', 150, 156), ('cmd_show_ref( int argc , const char ** argv , const char * prefix)', 181, 221)], '/home/kevin/thesis/git/builtin/stripspace.c': [('comment_lines( struct strbuf * buf)', 7, 15), ('cmd_stripspace( int argc , const char ** argv , const char * prefix)', 29, 64)], '/home/kevin/thesis/git/builtin/submodule--helper.c': [('get_default_remote( void)', 30, 54), ('print_default_remote( int argc , const char ** argv , const char * prefix)', 56, 68), ('starts_with_dot_slash( const char * str)', 70, 73), ('starts_with_dot_dot_slash( const char * str)', 75, 78), ('chop_last_dir( char ** remoteurl , int is_relative)', 83, 104), ('relative_url( const char * remote_url , const char * url , const char * up_path)', 134, 195), ('resolve_relative_url( int argc , const char ** argv , const char * prefix)', 197, 225), ('resolve_relative_url_test( int argc , const char ** argv , const char * prefix)', 227, 247), ('get_submodule_displaypath( const char * path , const char * prefix)', 250, 267), ('compute_rev_name( const char * sub_path , const char * object_id)', 269, 305), ('module_list_compute( int argc , const char ** argv , const char * prefix , struct pathspec * pathspec , struct module_list * list)', 313, 355), ('module_list_active( struct module_list * list)', 357, 376), ('get_up_path( const char * path)', 378, 395), ('module_list( int argc , const char ** argv , const char * prefix)', 397, 433), ('for_each_listed_submodule( const struct module_list * list , each_submodule_fn fn , void * cb_data)', 435, 441), ('init_submodule( const char * path , const char * prefix , unsigned int flags)', 450, 538), ('init_submodule_cb( const struct cache_entry * list_item , void * cb_data)', 540, 544), ('module_init( int argc , const char ** argv , const char * prefix)', 546, 583), ('print_status( unsigned int flags , char state , const char * path , const struct object_id * oid , const char * displaypath)', 592, 608), ('handle_submodule_head_ref( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 610, 619), ('status_submodule( const char * path , const struct object_id * ce_oid , unsigned int ce_flags , const char * prefix , unsigned int flags)', 621, 703), ('status_submodule_cb( const struct cache_entry * list_item , void * cb_data)', 705, 711), ('module_status( int argc , const char ** argv , const char * prefix)', 713, 745), ('module_name( int argc , const char ** argv , const char * prefix)', 747, 763), ('sync_submodule( const char * path , const char * prefix , unsigned int flags)', 772, 877), ('sync_submodule_cb( const struct cache_entry * list_item , void * cb_data)', 879, 884), ('module_sync( int argc , const char ** argv , const char * prefix)', 886, 921), ('deinit_submodule( const char * path , const char * prefix , unsigned int flags)', 929, 1012), ('deinit_submodule_cb( const struct cache_entry * list_item , void * cb_data)', 1014, 1019), ('module_deinit( int argc , const char ** argv , const char * prefix)', 1021, 1066), ('clone_submodule( const char * path , const char * gitdir , const char * url , const char * depth , struct string_list * reference , int dissociate , int quiet , int progress)', 1068, 1101), ('add_possible_reference_from_superproject( struct alternate_object_database * alt , void * sas_cb)', 1115, 1158), ('prepare_possible_alternates( const char * sm_name , struct string_list * reference)', 1160, 1195), ('module_clone( int argc , const char ** argv , const char * prefix)', 1197, 1301), ('next_submodule_warn_missing( struct submodule_update_clone * suc , struct strbuf * out , const char * displaypath)', 1338, 1354), ('prepare_to_clone_next_submodule( const struct cache_entry * ce , struct child_process * child , struct submodule_update_clone * suc , struct strbuf * out)', 1360, 1470), ('update_clone_get_next_task( struct child_process * child , struct strbuf * err , void * suc_cb , void ** idx_task_cb)', 1472, 1516), ('update_clone_start_failure( struct strbuf * err , void * suc_cb , void * idx_task_cb)', 1518, 1525), ('update_clone_task_finished( int result , struct strbuf * err , void * suc_cb , void * idx_task_cb)', 1527, 1563), ('gitmodules_update_clone_config( const char * var , const char * value , void * cb)', 1565, 1572), ('update_clone( int argc , const char ** argv , const char * prefix)', 1574, 1653), ('resolve_relative_path( int argc , const char ** argv , const char * prefix)', 1655, 1664), ('remote_submodule_branch( const char * path)', 1666, 1702), ('resolve_remote_submodule_branch( int argc , const char ** argv , const char * prefix)', 1704, 1719), ('push_check( int argc , const char ** argv , const char * prefix)', 1721, 1796), ('absorb_git_dirs( int argc , const char ** argv , const char * prefix)', 1798, 1830), ('is_active( int argc , const char ** argv , const char * prefix)', 1832, 1838), ('check_name( int argc , const char ** argv , const char * prefix)', 1845, 1861), ('cmd_submodule__helper( int argc , const char ** argv , const char * prefix)', 1891, 1909)], '/home/kevin/thesis/git/builtin/symbolic-ref.c': [('check_symref( const char * HEAD , int quiet , int shorten , int print)', 13, 32), ('cmd_symbolic_ref( int argc , const char ** argv , const char * prefix)', 34, 78)], '/home/kevin/thesis/git/builtin/tag.c': [('list_tags( struct ref_filter * filter , struct ref_sorting * sorting , struct ref_format * format)', 35, 69), ('for_each_tag_name( const char ** argv , each_tag_name_fn fn , const void * cb_data)', 74, 95), ('delete_tag( const char * name , const char * ref , const struct object_id * oid , const void * cb_data)', 97, 105), ('verify_tag( const char * name , const char * ref , const struct object_id * oid , const void * cb_data)', 107, 124), ('do_sign( struct strbuf * buffer)', 126, 129), ('git_tag_config( const char * var , const char * value , void * cb)', 140, 163), ('write_tag_body( int fd , const struct object_id * oid)', 165, 185), ('build_tag_object( struct strbuf * buf , int sign , struct object_id * result)', 187, 194), ('create_tag( const struct object_id * object , const char * tag , struct strbuf * buf , struct create_tag_options * opt , struct object_id * prev , struct object_id * result)', 207, 281), ('create_reflog_msg( const struct object_id * oid , struct strbuf * sb)', 283, 329), ('parse_msg_arg( const struct option * opt , const char * arg , int unset)', 336, 347), ('strbuf_check_tag_ref( struct strbuf * sb , const char * name)', 349, 358), ('cmd_tag( int argc , const char ** argv , const char * prefix)', 360, 571)], '/home/kevin/thesis/git/builtin/unpack-file.c': [('create_temp_file( struct object_id * oid)', 4, 22), ('cmd_unpack_file( int argc , const char ** argv , const char * prefix)', 24, 37)], '/home/kevin/thesis/git/builtin/unpack-objects.c': [('lookup_object_buffer( struct object * base)', 39, 42), ('add_object_buffer( struct object * object , char * buffer , unsigned long size)', 44, 52), ('fill( int min)', 58, 79), ('use( int bytes)', 81, 94), ('get_data( unsigned long size)', 96, 127), ('add_delta_to_list( unsigned nr , const struct object_id * base_oid , off_t base_offset , void * delta , unsigned long size)', 140, 153), ('write_cached_object( struct object * obj , struct obj_buffer * obj_buf)', 172, 180), ('check_object( struct object * obj , int type , void * data , struct fsck_options * options)', 187, 219), ('write_rest( void)', 221, 228), ('write_object( unsigned nr , enum object_type type , void * buf , unsigned long size)', 238, 275), ('resolve_delta( unsigned nr , enum object_type type , void * base , unsigned long base_size , void * delta , unsigned long delta_size)', 277, 291), ('added_object( unsigned nr , enum object_type type , void * data , unsigned long size)', 297, 315), ('unpack_non_delta_entry( enum object_type type , unsigned long size , unsigned nr)', 317, 326), ('resolve_against_held( unsigned nr , const struct object_id * base , void * delta_data , unsigned long delta_size)', 328, 342), ('unpack_delta_entry( enum object_type type , unsigned long delta_size , unsigned nr)', 344, 437), ('unpack_one( unsigned nr)', 439, 480), ('unpack_all( void)', 482, 508), ('cmd_unpack_objects( int argc , const char ** argv , const char * prefix)', 510, 595)], '/home/kevin/thesis/git/builtin/update-index.c': [('report( const char * fmt , ...)', 51, 62), ('remove_test_directory( void)', 64, 68), ('get_mtime_path( const char * path)', 70, 76), ('xmkdir( const char * path)', 78, 83), ('xstat_mtime_dir( struct stat * st)', 85, 90), ('create_file( const char * path)', 92, 100), ('xunlink( const char * path)', 102, 107), ('xrmdir( const char * path)', 109, 114), ('avoid_racy( void)', 116, 124), ('test_if_untracked_cache_is_supported( void)', 126, 226), ('mark_ce_flags( const char * path , int flag , int mark)', 228, 244), ('remove_one_path( const char * path)', 246, 253), ('process_lstat_error( const char * path , int err)', 262, 267), ('add_one_path( const struct cache_entry * old , const char * path , int len , struct stat * st)', 269, 298), ('process_directory( const char * path , int len , struct stat * st)', 323, 365), ('process_path( const char * path , struct stat * st , int stat_errno)', 367, 400), ('add_cacheinfo( unsigned int mode , const struct object_id * oid , const char * path , int stage)', 402, 429), ('chmod_path( char flip , const char * path)', 431, 447), ('update_one( const char * path)', 449, 491), ('read_index_info( int nul_term_line)', 493, 586), ('read_one_ent( const char * which , struct object_id * ent , const char * path , int namelen , int stage)', 596, 624), ('unresolve_one( const char * path)', 626, 696), ('read_head_pointers( void)', 698, 706), ('do_unresolve( int ac , const char ** av , const char * prefix , int prefix_length)', 708, 726), ('do_reupdate( int ac , const char ** av , const char * prefix , int prefix_length)', 728, 778), ('refresh( struct refresh_params * o , unsigned int flag)', 785, 791), ('refresh_callback( const struct option * opt , const char * arg , int unset)', 793, 797), ('really_refresh_callback( const struct option * opt , const char * arg , int unset)', 799, 803), ('chmod_callback( const struct option * opt , const char * arg , int unset)', 805, 813), ('resolve_undo_clear_callback( const struct option * opt , const char * arg , int unset)', 815, 820), ('parse_new_style_cacheinfo( const char * arg , unsigned int * mode , struct object_id * oid , const char ** path)', 822, 843), ('cacheinfo_callback( struct parse_opt_ctx_t * ctx , const struct option * opt , int unset)', 845, 867), ('stdin_cacheinfo_callback( struct parse_opt_ctx_t * ctx , const struct option * opt , int unset)', 869, 879), ('stdin_callback( struct parse_opt_ctx_t * ctx , const struct option * opt , int unset)', 881, 890), ('unresolve_callback( struct parse_opt_ctx_t * ctx , const struct option * opt , int flags)', 892, 907), ('reupdate_callback( struct parse_opt_ctx_t * ctx , const struct option * opt , int flags)', 909, 925), ('cmd_update_index( int argc , const char ** argv , const char * prefix)', 927, 1209)], '/home/kevin/thesis/git/builtin/update-ref.c': [('parse_arg( const char * next , struct strbuf * arg)', 27, 42), ('parse_refname( struct strbuf * input , const char ** next)', 52, 74), ('parse_next_oid( struct strbuf * input , const char ** next , struct object_id * oid , const char * command , const char * refname , int flags)', 97, 167), ('parse_cmd_update( struct ref_transaction * transaction , struct strbuf * input , const char * next)', 180, 213), ('parse_cmd_create( struct ref_transaction * transaction , struct strbuf * input , const char * next)', 215, 245), ('parse_cmd_delete( struct ref_transaction * transaction , struct strbuf * input , const char * next)', 247, 281), ('parse_cmd_verify( struct ref_transaction * transaction , struct strbuf * input , const char * next)', 283, 310), ('parse_cmd_option( struct strbuf * input , const char * next)', 312, 319), ('update_refs_stdin( struct ref_transaction * transaction)', 321, 352), ('cmd_update_ref( int argc , const char ** argv , const char * prefix)', 354, 443)], '/home/kevin/thesis/git/builtin/update-server-info.c': [('cmd_update_server_info( int argc , const char ** argv , const char * prefix)', 11, 26)], '/home/kevin/thesis/git/builtin/upload-archive.c': [('cmd_upload_archive_writer( int argc , const char ** argv , const char * prefix)', 20, 47), ('error_clnt( const char * fmt , ...)', 50, 60), ('process_input( int child_fd , int band)', 62, 73), ('cmd_upload_archive( int argc , const char ** argv , const char * prefix)', 75, 130)], '/home/kevin/thesis/git/builtin/upload-pack.c': [('cmd_upload_pack( int argc , const char ** argv , const char * prefix)', 15, 74)], '/home/kevin/thesis/git/builtin/var.c': [('editor( int flag)', 11, 19), ('pager( int flag)', 21, 28), ('list_vars( void)', 42, 50), ('read_var( const char * var)', 52, 64), ('show_config( const char * var , const char * value , void * cb)', 66, 73), ('cmd_var( int argc , const char ** argv , const char * prefix)', 75, 94)], '/home/kevin/thesis/git/builtin/verify-commit.c': [('run_gpg_verify( const struct object_id * oid , const char * buf , unsigned long size , unsigned flags)', 22, 34), ('verify_commit( const char * name , unsigned flags)', 36, 58), ('git_verify_commit_config( const char * var , const char * value , void * cb)', 60, 66), ('cmd_verify_commit( int argc , const char ** argv , const char * prefix)', 68, 95)], '/home/kevin/thesis/git/builtin/verify-pack.c': [('verify_one_pack( const char * path , unsigned int flags)', 10, 52), ('cmd_verify_pack( int argc , const char ** argv , const char * prefix)', 59, 83)], '/home/kevin/thesis/git/builtin/verify-tag.c': [('git_verify_tag_config( const char * var , const char * value , void * cb)', 23, 29), ('cmd_verify_tag( int argc , const char ** argv , const char * prefix)', 31, 78)], '/home/kevin/thesis/git/builtin/worktree.c': [('git_worktree_config( const char * var , const char * value , void * cb)', 39, 47), ('prune_worktree( const char * id , struct strbuf * reason)', 49, 113), ('prune_worktrees( void)', 115, 146), ('prune( int ac , const char ** av , const char * prefix)', 148, 164), ('remove_junk( void)', 171, 186), ('remove_junk_on_signal( int signo)', 188, 193), ('worktree_basename( const char * path , int * olen)', 195, 212), ('add_worktree( const char * path , const char * refname , const struct add_opts * opts)', 214, 363), ('print_preparing_worktree_line( int detach , const char * branch , const char * new_branch , int force_new_branch)', 365, 395), ('dwim_branch( const char * path , const char ** new_branch)', 397, 419), ('add( int ac , const char ** av , const char * prefix)', 421, 517), ('show_worktree_porcelain( struct worktree * wt)', 519, 532), ('show_worktree( struct worktree * wt , int path_maxlen , int abbrev_len)', 534, 558), ('measure_widths( struct worktree ** wt , int * abbrev , int * maxlen)', 560, 574), ('list( int ac , const char ** av , const char * prefix)', 576, 604), ('lock_worktree( int ac , const char ** av , const char * prefix)', 606, 639), ('unlock_worktree( int ac , const char ** av , const char * prefix)', 641, 664), ('validate_no_submodules( const struct worktree * wt)', 666, 686), ('move_worktree( int ac , const char ** av , const char * prefix)', 688, 747), ('check_clean_worktree( struct worktree * wt , const char * original_path)', 760, 799), ('delete_git_work_tree( struct worktree * wt)', 801, 813), ('delete_git_dir( struct worktree * wt)', 815, 827), ('remove_worktree( int ac , const char ** av , const char * prefix)', 829, 879), ('cmd_worktree( int ac , const char ** av , const char * prefix)', 881, 908)], '/home/kevin/thesis/git/builtin/write-tree.c': [('cmd_write_tree( int argc , const char ** argv , const char * unused_prefix)', 18, 57)], '/home/kevin/thesis/git/compat/apple-common-crypto.h': [('git_CC_HMAC( CCHmacAlgorithm alg , const void * key , int key_len , const unsigned char * data , size_t data_len , unsigned char * md , unsigned int * md_len)', 9, 16), ('git_CC_EVP_EncodeBlock( unsigned char * out , const unsigned char * in , int inlen)', 38, 65), ('git_CC_EVP_DecodeBlock( unsigned char * out , const unsigned char * in , int inlen)', 68, 95)], '/home/kevin/thesis/git/compat/basename.c': [('gitbasename( char * path)', 5, 28), ('gitdirname( char * path)', 30, 71)], '/home/kevin/thesis/git/compat/bswap.h': [('default_swab32( uint32_t val)', 12, 18), ('default_bswap64( uint64_t val)', 20, 30), ('git_bswap32( uint32_t x)', 38, 46), ('git_bswap64( uint64_t x)', 50, 58), ('git_bswap64( uint64_t x)', 60, 71), ('get_be16( const void * ptr)', 167, 172), ('get_be32( const void * ptr)', 174, 181), ('get_be64( const void * ptr)', 183, 188), ('put_be32( void * ptr , uint32_t value)', 190, 197), ('put_be64( void * ptr , uint64_t value)', 199, 210)], '/home/kevin/thesis/git/compat/cygwin.c': [('cygwin_offset_1st_component( const char * path)', 4, 19)], '/home/kevin/thesis/git/compat/cygwin.h': [], '/home/kevin/thesis/git/compat/fopen.c': [('git_fopen( const char * path , const char * mode)', 14, 37)], '/home/kevin/thesis/git/compat/gmtime.c': [('git_gmtime( const time_t * timep)', 5, 9), ('git_gmtime_r( const time_t * timep , struct tm * result)', 11, 29)], '/home/kevin/thesis/git/compat/hstrerror.c': [('githstrerror( int err)', 5, 21)], '/home/kevin/thesis/git/compat/inet_ntop.c': [('inet_ntop4( const u_char * src , char * dst , size_t size)', 47, 62), ('inet_ntop6( const u_char * src , char * dst , size_t size)', 72, 159), ('inet_ntop( int af , const void * src , char * dst , size_t size)', 171, 185)], '/home/kevin/thesis/git/compat/inet_pton.c': [('inet_pton4( const char * src , unsigned char * dst)', 53, 88), ('inet_pton6( const char * src , unsigned char * dst)', 106, 186), ('inet_pton( int af , const char * src , void * dst)', 201, 215)], '/home/kevin/thesis/git/compat/memmem.c': [('gitmemmem( const void * haystack , size_t haystack_len , const void * needle , size_t needle_len)', 3, 32)], '/home/kevin/thesis/git/compat/mingw.c': [('err_win_to_posix( DWORD winerr)', 13, 124), ('is_file_in_use_error( DWORD errcode)', 126, 135), ('read_yes_no_answer( void)', 137, 173), ('ask_yes_no_if_possible( const char * format , ...)', 175, 203), ('mingw_unlink( const char * pathname)', 205, 232), ('is_dir_empty( const wchar_t * wpath)', 234, 254), ('mingw_rmdir( const char * pathname)', 256, 287), ('needs_hiding( const char * path)', 289, 317), ('set_hidden_flag( const wchar_t * path , int set)', 319, 330), ('mingw_mkdir( const char * path , int mode)', 332, 342), ('mingw_open( const char * filename , int oflags , ...)', 344, 383), ('ctrl_ignore( DWORD type)', 385, 388), ('mingw_fgetc( FILE * stream)', 391, 408), ('mingw_fopen( const char * filename , const char * otype)', 411, 431), ('mingw_freopen( const char * filename , const char * otype , FILE * stream)', 433, 451), ('mingw_fflush( FILE * stream)', 454, 473), ('mingw_write( int fd , const void * buf , size_t len)', 476, 490), ('mingw_access( const char * filename , int mode)', 492, 499), ('mingw_chdir( const char * dirname)', 501, 507), ('mingw_chmod( const char * filename , int mode)', 509, 515), ('filetime_to_hnsec( const FILETIME * ft)', 521, 526), ('filetime_to_time_t( const FILETIME * ft)', 528, 531), ('has_valid_directory_prefix( wchar_t * wfilename)', 536, 564), ('do_lstat( int follow , const char * file_name , struct stat * buf)', 573, 637), ('do_stat_internal( int follow , const char * file_name , struct stat * buf)', 645, 670), ('mingw_lstat( const char * file_name , struct stat * buf)', 672, 675), ('mingw_stat( const char * file_name , struct stat * buf)', 676, 679), ('mingw_fstat( int fd , struct stat * buf)', 681, 710), ('time_t_to_filetime( time_t t , FILETIME * ft)', 712, 717), ('mingw_utime( const char * file_name , const struct utimbuf * times)', 719, 762), ('mingw_strftime( char * s , size_t max , const char * format , const struct tm * tm)', 765, 773), ('sleep( unsigned int seconds)', 775, 779), ('mingw_mktemp( char * template)', 781, 791), ('mkstemp( char * template)', 793, 799), ('gettimeofday( struct timeval * tv , void * tz)', 801, 811), ('pipe( int filedes [ 2 ])', 813, 835), ('gmtime_r( const time_t * timep , struct tm * result)', 837, 842), ('localtime_r( const time_t * timep , struct tm * result)', 844, 849), ('mingw_getcwd( char * pointer , int len)', 851, 860), ('quote_arg( const char * arg)', 866, 919), ('parse_interpreter( const char * cmd)', 921, 954), ('lookup_prog( const char * dir , int dirlen , const char * cmd , int isexe , int exe_only)', 960, 973), ('path_lookup( const char * cmd , int exe_only)', 979, 1004), ('make_environment_block( char ** deltaenv)', 1017, 1044), ('mingw_spawnve_fd( const char * cmd , const char ** argv , char ** deltaenv , const char * dir , int prepend_cmd , int fhin , int fhout , int fherr)', 1054, 1156), ('mingw_spawnv( const char * cmd , const char ** argv , int prepend_cmd)', 1158, 1161), ('mingw_spawnvpe( const char * cmd , const char ** argv , char ** deltaenv , const char * dir , int fhin , int fhout , int fherr)', 1163, 1198), ('try_shell_exec( const char * cmd , char * const * argv)', 1200, 1228), ('mingw_execv( const char * cmd , char * const * argv)', 1230, 1244), ('mingw_execvp( const char * cmd , char * const * argv)', 1246, 1257), ('mingw_kill( pid_t pid , int sig)', 1259, 1282), ('compareenv( const void * v1 , const void * v2)', 1287, 1304), ('bsearchenv( char ** env , const char * name , size_t size)', 1306, 1320), ('do_putenv( char ** env , const char * name , int size , int free_old)', 1327, 1349), ('mingw_getenv( const char * name)', 1351, 1359), ('mingw_putenv( const char * namevalue)', 1361, 1366), ('getaddrinfo_stub( const char * node , const char * service , const struct addrinfo * hints , struct addrinfo ** res)', 1374, 1426), ('freeaddrinfo_stub( struct addrinfo * res)', 1428, 1433), ('getnameinfo_stub( const struct sockaddr * sa , socklen_t salen , char * host , DWORD hostlen , char * serv , DWORD servlen , int flags)', 1435, 1472), ('socket_cleanup( void)', 1487, 1496), ('ensure_socket_initialization( void)', 1498, 1541), ('mingw_gethostname( char * name , int namelen)', 1544, 1548), ('mingw_gethostbyname( const char * host)', 1551, 1555), ('mingw_freeaddrinfo( struct addrinfo * res)', 1557, 1560), ('mingw_getaddrinfo( const char * node , const char * service , const struct addrinfo * hints , struct addrinfo ** res)', 1562, 1567), ('mingw_getnameinfo( const struct sockaddr * sa , socklen_t salen , char * host , DWORD hostlen , char * serv , DWORD servlen , int flags)', 1569, 1575), ('mingw_socket( int domain , int type , int protocol)', 1577, 1604), ('mingw_connect( int sockfd , struct sockaddr * sa , size_t sz)', 1607, 1611), ('mingw_bind( int sockfd , struct sockaddr * sa , size_t sz)', 1614, 1618), ('mingw_setsockopt( int sockfd , int lvl , int optname , void * optval , int optlen)', 1621, 1625), ('mingw_shutdown( int sockfd , int how)', 1628, 1632), ('mingw_listen( int sockfd , int backlog)', 1635, 1639), ('mingw_accept( int sockfd1 , struct sockaddr * sa , socklen_t * sz)', 1642, 1657), ('mingw_rename( const char * pold , const char * pnew)', 1660, 1720), ('mingw_getpagesize( void)', 1727, 1732), ('getpwuid( int uid)', 1734, 1746), ('ticktack( void * dummy)', 1763, 1771), ('start_timer_thread( void)', 1773, 1785), ('stop_timer_thread( void)', 1787, 1804), ('is_timeval_eq( const struct timeval * i1 , const struct timeval * i2)', 1806, 1809), ('setitimer( int type , struct itimerval * in , struct itimerval * out)', 1811, 1838), ('sigaction( int sig , struct sigaction * in , struct sigaction * out)', 1840, 1851), ('mingw_signal( int sig , sig_handler_t handler)', 1854, 1874), ('mingw_raise( int sig)', 1877, 1899), ('link( const char * oldpath , const char * newpath)', 1901, 1925), ('waitpid( pid_t pid , int * status , int options)', 1927, 1977), ('mingw_skip_dos_drive_prefix( char ** path)', 1979, 1984), ('mingw_offset_1st_component( const char * path)', 1986, 2004), ('xutftowcsn( wchar_t * wcs , const char * utfs , size_t wcslen , int utflen)', 2006, 2076), ('xwcstoutf( char * utf , const wchar_t * wcs , size_t utflen)', 2078, 2089), ('setup_windows_environment( void)', 2091, 2118), ('die_startup( void)', 2133, 2137), ('malloc_startup( size_t size)', 2139, 2145), ('wcstoutfdup_startup( char * buffer , const wchar_t * wcs , size_t len)', 2147, 2151), ('maybe_redirect_std_handle( const wchar_t * key , DWORD std_id , int fd , DWORD desired_access , DWORD flags)', 2153, 2197), ('maybe_redirect_std_handles( void)', 2199, 2207), ('mingw_startup( void)', 2209, 2268), ('uname( struct utsname * buf)', 2270, 2281)], '/home/kevin/thesis/git/compat/mingw.h': [('readlink( const char * path , char * buf , size_t bufsiz)', 120, 121), ('symlink( const char * oldpath , const char * newpath)', 122, 123), ('fchmod( int fildes , mode_t mode)', 124, 125), ('fork( void)', 127, 128), ('alarm( unsigned int seconds)', 130, 131), ('fsync( int fd)', 132, 133), ('sync( void)', 134, 135), ('getuid( void)', 136, 137), ('getpwnam( const char * name)', 138, 139), ('fcntl( int fd , int cmd , ...)', 140, 146), ('sigaddset( sigset_t * set , int signum)', 150, 151), ('sigprocmask( int how , const sigset_t * set , sigset_t * oldset)', 154, 155), ('getppid( void)', 156, 157), ('getpgid( pid_t pid)', 158, 159), ('tcgetpgrp( int fd)', 160, 161), ('mingw_SSL_set_fd( SSL * ssl , int fd)', 178, 181), ('mingw_SSL_set_rfd( SSL * ssl , int fd)', 184, 187), ('mingw_SSL_set_wfd( SSL * ssl , int fd)', 190, 193), ('getrlimit( int resource , struct rlimit * rlp)', 318, 327), ('git_ntohl( unsigned int x)', 376, 377), ('mingw_is_dir_sep( int c)', 404, 407), ('mingw_find_last_dir_sep( const char * path)', 409, 416), ('convert_slashes( char * path)', 417, 422), ('xutftowcs( wchar_t * wcs , const char * utf , size_t wcslen)', 486, 489), ('xutftowcs_path( wchar_t * wcs , const char * utf)', 496, 502)], '/home/kevin/thesis/git/compat/mkdir.c': [('compat_mkdir_wo_trailing_slash( const char * dir , mode_t mode)', 5, 24)], '/home/kevin/thesis/git/compat/mkdtemp.c': [('gitmkdtemp( char * template)', 3, 8)], '/home/kevin/thesis/git/compat/mmap.c': [('git_mmap( void * start , size_t length , int prot , int flags , int fd , off_t offset)', 3, 34), ('git_munmap( void * start , size_t length)', 36, 40)], '/home/kevin/thesis/git/compat/msvc.c': [], '/home/kevin/thesis/git/compat/msvc.h': [('strcasecmp( const char * s1 , const char * s2)', 18, 23)], '/home/kevin/thesis/git/compat/obstack.c': [('_obstack_begin( struct obstack * h , int size , int alignment , void *(*chunkfun)(long) , void(*freefun)(void*))', 136, 180), ('_obstack_begin_1( struct obstack * h , int size , int alignment , void *(*chunkfun)(void*,long) , void(*freefun)(void*,void*) , void * arg)', 183, 228), ('_obstack_newchunk( struct obstack * h , int length)', 237, 300), ('_obstack_allocated_p( struct obstack * h , void * obj)', 314, 329), ('obstack_free( struct obstack * h , void * obj)', 337, 364), ('_obstack_memory_used( struct obstack * h)', 373, 383), ('print_and_abort( void)', 397, 410)], '/home/kevin/thesis/git/compat/obstack.h': [], '/home/kevin/thesis/git/compat/pread.c': [('git_pread( int fd , void * buf , size_t count , off_t offset)', 3, 18)], '/home/kevin/thesis/git/compat/precompose_utf8.c': [('has_non_ascii( const char * s , size_t maxlen , size_t * strlen_c)', 17, 37), ('probe_utf8_pathname_composition( void)', 40, 61), ('precompose_argv( int argc , const char ** argv)', 64, 89), ('precompose_utf8_opendir( const char * dirname)', 92, 111), ('precompose_utf8_readdir( PREC_DIR * prec_dir)', 113, 169), ('precompose_utf8_closedir( PREC_DIR * prec_dir)', 172, 184)], '/home/kevin/thesis/git/compat/precompose_utf8.h': [], '/home/kevin/thesis/git/compat/qsort.c': [('msort_with_tmp( void * b , size_t n , size_t s , int(*cmp)(constvoid*,constvoid*) , char * t)', 8, 45), ('git_qsort( void * b , size_t n , size_t s , int(*cmp)(constvoid*,constvoid*))', 47, 62)], '/home/kevin/thesis/git/compat/qsort_s.c': [('msort_with_tmp( void * b , size_t n , size_t s , int(*cmp)(constvoid*,constvoid*,void*) , char * t , void * ctx)', 9, 46), ('git_qsort_s( void * b , size_t n , size_t s , int(*cmp)(constvoid*,constvoid*,void*) , void * ctx)', 48, 69)], '/home/kevin/thesis/git/compat/setenv.c': [('gitsetenv( const char * name , const char * value , int replace)', 3, 40)], '/home/kevin/thesis/git/compat/sha1-chunked.c': [('git_SHA1_Update_Chunked( platform_SHA_CTX * c , const void * data , size_t len)', 3, 19)], '/home/kevin/thesis/git/compat/sha1-chunked.h': [], '/home/kevin/thesis/git/compat/snprintf.c': [('git_vsnprintf( char * str , size_t maxsize , const char * format , va_list ap)', 20, 56), ('git_snprintf( char * str , size_t maxsize , const char * format , ...)', 58, 68)], '/home/kevin/thesis/git/compat/stat.c': [('mode_native_to_git( mode_t native_mode)', 5, 24), ('git_stat( const char * path , struct stat * buf)', 26, 32), ('git_fstat( int fd , struct stat * buf)', 34, 40), ('git_lstat( const char * path , struct stat * buf)', 42, 48)], '/home/kevin/thesis/git/compat/strcasestr.c': [('gitstrcasestr( const char * haystack , const char * needle)', 3, 22)], '/home/kevin/thesis/git/compat/strdup.c': [('gitstrdup( const char * s1)', 3, 11)], '/home/kevin/thesis/git/compat/strlcpy.c': [('gitstrlcpy( char * dest , const char * src , size_t size)', 3, 13)], '/home/kevin/thesis/git/compat/strtoimax.c': [('gitstrtoimax( const char * nptr , char ** endptr , int base)', 3, 10)], '/home/kevin/thesis/git/compat/strtoumax.c': [('gitstrtoumax( const char * nptr , char ** endptr , int base)', 3, 10)], '/home/kevin/thesis/git/compat/terminal.c': [('restore_term_on_signal( int sig)', 10, 15), ('restore_term( void)', 25, 33), ('disable_echo( void)', 35, 54), ('restore_term( void)', 65, 73), ('disable_echo( void)', 75, 92), ('git_terminal_prompt( const char * prompt , int echo)', 100, 138), ('git_terminal_prompt( const char * prompt , int echo)', 142, 145)], '/home/kevin/thesis/git/compat/terminal.h': [], '/home/kevin/thesis/git/compat/unsetenv.c': [('gitunsetenv( const char * name)', 3, 27)], '/home/kevin/thesis/git/compat/win32.h': [('file_attr_to_st_mode( DWORD attr)', 9, 19), ('get_file_attr( const char * fname , WIN32_FILE_ATTRIBUTE_DATA * fdata)', 21, 39)], '/home/kevin/thesis/git/compat/win32mmap.c': [('git_mmap( void * start , size_t length , int prot , int flags , int fd , off_t offset)', 3, 41), ('git_munmap( void * start , size_t length)', 43, 46)], '/home/kevin/thesis/git/compat/winansi.c': [('warn_if_raster_font( void)', 47, 85), ('is_console( int fd)', 87, 130), ('write_console( unsigned char * str , size_t len)', 135, 155), ('set_console_attr( void)', 160, 184), ('erase_in_line( void)', 186, 198), ('set_attr( char func , const int * params , int paramlen)', 200, 339), ('console_thread( LPVOID unused)', 345, 449), ('winansi_exit( void)', 451, 466), ('die_lasterr( const char * fmt , ...)', 468, 475), ('duplicate_handle( HANDLE hnd)', 477, 485), ('swap_osfhnd( int fd , HANDLE new_handle)', 487, 530), ('detect_msys_tty( int fd)', 537, 567), ('winansi_isatty( int fd)', 580, 585), ('winansi_init( void)', 587, 634), ('winansi_get_osfhandle( int fd)', 640, 648)], '/home/kevin/thesis/git/ewah/bitmap.c': [('bitmap_new( void)', 25, 31), ('bitmap_set( struct bitmap * self , size_t pos)', 33, 46), ('bitmap_clear( struct bitmap * self , size_t pos)', 48, 54), ('bitmap_get( struct bitmap * self , size_t pos)', 56, 61), ('bitmap_to_ewah( struct bitmap * bitmap)', 63, 88), ('ewah_to_bitmap( struct ewah_bitmap * ewah)', 90, 106), ('bitmap_and_not( struct bitmap * self , struct bitmap * other)', 108, 117), ('bitmap_or_ewah( struct bitmap * self , struct ewah_bitmap * other)', 119, 138), ('bitmap_each_bit( struct bitmap * self , ewah_callback callback , void * data)', 140, 162), ('bitmap_popcount( struct bitmap * self)', 164, 172), ('bitmap_equals( struct bitmap * self , struct bitmap * other)', 174, 198), ('bitmap_reset( struct bitmap * bitmap)', 200, 203), ('bitmap_free( struct bitmap * bitmap)', 205, 212)], '/home/kevin/thesis/git/ewah/ewah_bitmap.c': [('min_size( size_t a , size_t b)', 23, 26), ('max_size( size_t a , size_t b)', 28, 31), ('buffer_grow( struct ewah_bitmap * self , size_t new_size)', 33, 43), ('buffer_push( struct ewah_bitmap * self , eword_t value)', 45, 51), ('buffer_push_rlw( struct ewah_bitmap * self , eword_t value)', 53, 57), ('add_empty_words( struct ewah_bitmap * self , int v , size_t number)', 59, 96), ('ewah_add_empty_words( struct ewah_bitmap * self , int v , size_t number)', 98, 105), ('add_literal( struct ewah_bitmap * self , eword_t new_data)', 107, 126), ('ewah_add_dirty_words( struct ewah_bitmap * self , const eword_t * buffer , size_t number , int negate)', 128, 162), ('add_empty_word( struct ewah_bitmap * self , int v)', 164, 194), ('ewah_add( struct ewah_bitmap * self , eword_t word)', 196, 207), ('ewah_set( struct ewah_bitmap * self , size_t i)', 209, 244), ('ewah_each_bit( struct ewah_bitmap * self , void(*callback)(size_t,void*) , void * payload)', 246, 277), ('ewah_new( void)', 279, 289), ('ewah_clear( struct ewah_bitmap * self)', 291, 297), ('ewah_free( struct ewah_bitmap * self)', 299, 308), ('read_new_rlw( struct ewah_iterator * it)', 310, 334), ('ewah_iterator_next( eword_t * next , struct ewah_iterator * it)', 336, 361), ('ewah_iterator_init( struct ewah_iterator * it , struct ewah_bitmap * parent)', 363, 377), ('ewah_not( struct ewah_bitmap * self)', 379, 396), ('ewah_xor( struct ewah_bitmap * ewah_i , struct ewah_bitmap * ewah_j , struct ewah_bitmap * out)', 398, 460), ('ewah_and( struct ewah_bitmap * ewah_i , struct ewah_bitmap * ewah_j , struct ewah_bitmap * out)', 462, 528), ('ewah_and_not( struct ewah_bitmap * ewah_i , struct ewah_bitmap * ewah_j , struct ewah_bitmap * out)', 530, 601), ('ewah_or( struct ewah_bitmap * ewah_i , struct ewah_bitmap * ewah_j , struct ewah_bitmap * out)', 603, 669), ('ewah_pool_new( void)', 676, 682), ('ewah_pool_free( struct ewah_bitmap * self)', 684, 697), ('ewah_checksum( struct ewah_bitmap * self)', 699, 709)], '/home/kevin/thesis/git/ewah/ewah_io.c': [('ewah_serialize_native( struct ewah_bitmap * self , int fd)', 23, 47), ('ewah_serialize_to( struct ewah_bitmap * self , int(*write_fun)(void*,constvoid*,size_t) , void * data)', 49, 101), ('write_helper( void * fd , const void * buf , size_t len)', 103, 106), ('ewah_serialize( struct ewah_bitmap * self , int fd)', 108, 111), ('write_strbuf( void * user_data , const void * data , size_t len)', 113, 118), ('ewah_serialize_strbuf( struct ewah_bitmap * self , struct strbuf * sb)', 120, 123), ('ewah_read_mmap( struct ewah_bitmap * self , const void * map , size_t len)', 125, 170), ('ewah_deserialize( struct ewah_bitmap * self , int fd)', 172, 225)], '/home/kevin/thesis/git/ewah/ewah_rlw.c': [('next_word( struct rlw_iterator * it)', 23, 37), ('rlwit_init( struct rlw_iterator * it , struct ewah_bitmap * from_ewah)', 39, 49), ('rlwit_discard_first_words( struct rlw_iterator * it , size_t x)', 51, 78), ('rlwit_discharge( struct rlw_iterator * it , struct ewah_bitmap * out , size_t max , int negate)', 80, 106), ('rlwit_discharge_empty( struct rlw_iterator * it , struct ewah_bitmap * out)', 108, 114)], '/home/kevin/thesis/git/ewah/ewok.h': [('ewah_bit_popcount64( uint64_t x)', 32, 38), ('ewah_bit_ctz64( uint64_t x)', 44, 54)], '/home/kevin/thesis/git/ewah/ewok_rlw.h': [('rlw_get_run_bit( const eword_t * word)', 32, 35), ('rlw_set_run_bit( eword_t * word , int b)', 37, 44), ('rlw_xor_run_bit( eword_t * word)', 46, 53), ('rlw_set_running_len( eword_t * word , eword_t l)', 55, 59), ('rlw_get_running_len( const eword_t * word)', 61, 64), ('rlw_get_literal_words( const eword_t * word)', 66, 69), ('rlw_set_literal_words( eword_t * word , eword_t l)', 71, 75), ('rlw_size( const eword_t * self)', 77, 80), ('rlwit_word_size( struct rlw_iterator * it)', 103, 106), ('rlwit_literal_words( struct rlw_iterator * it)', 108, 111)], '/home/kevin/thesis/git/ppc/sha1.c': [('ppc_SHA1_Init( ppc_SHA_CTX * c)', 16, 26), ('ppc_SHA1_Update( ppc_SHA_CTX * c , const void * ptr , unsigned long n)', 28, 53), ('ppc_SHA1_Final( unsigned char * hash , ppc_SHA_CTX * c)', 55, 72)], '/home/kevin/thesis/git/ppc/sha1.h': [], '/home/kevin/thesis/git/refs/files-backend.c': [('clear_loose_ref_cache( struct files_ref_store * refs)', 77, 83), ('files_ref_store_create( const char * gitdir , unsigned int flags)', 89, 112), ('files_assert_main_repository( struct files_ref_store * refs , const char * caller)', 118, 125), ('files_downcast( struct ref_store * ref_store , unsigned int required_flags , const char * caller)', 133, 150), ('files_reflog_path( struct files_ref_store * refs , struct strbuf * sb , const char * refname)', 152, 168), ('files_ref_path( struct files_ref_store * refs , struct strbuf * sb , const char * refname)', 170, 186), ('loose_fill_ref_dir( struct ref_store * ref_store , struct ref_dir * dir , const char * dirname)', 193, 285), ('get_loose_ref_cache( struct files_ref_store * refs)', 287, 308), ('files_read_raw_ref( struct ref_store * ref_store , const char * refname , struct object_id * oid , struct strbuf * referent , unsigned int * type)', 310, 456), ('unlock_ref( struct ref_lock * lock)', 458, 463), ('lock_raw_ref( struct files_ref_store * refs , const char * refname , int mustexist , const struct string_list * extras , const struct string_list * skip , struct ref_lock ** lock_p , struct strbuf * referent , unsigned int * type , struct strbuf * err)', 494, 690), ('files_ref_iterator_advance( struct ref_iterator * ref_iterator)', 699, 727), ('files_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 729, 736), ('files_ref_iterator_abort( struct ref_iterator * ref_iterator)', 738, 749), ('files_ref_iterator_begin( struct ref_store * ref_store , const char * prefix , unsigned int flags)', 757, 817), ('verify_lock( struct ref_store * ref_store , struct ref_lock * lock , const struct object_id * old_oid , int mustexist , struct strbuf * err)', 825, 853), ('remove_empty_directories( struct strbuf * path)', 855, 863), ('create_reflock( const char * path , void * cb)', 865, 872), ('lock_ref_oid_basic( struct files_ref_store * refs , const char * refname , const struct object_id * old_oid , const struct string_list * extras , const struct string_list * skip , unsigned int flags , int * type , struct strbuf * err)', 878, 973), ('try_remove_empty_parents( struct files_ref_store * refs , const char * refname , unsigned int flags)', 992, 1032), ('prune_ref( struct files_ref_store * refs , struct ref_to_prune * r)', 1035, 1062), ('prune_refs( struct files_ref_store * refs , struct ref_to_prune ** refs_to_prune)', 1068, 1076), ('should_pack_ref( const char * refname , const struct object_id * oid , unsigned int ref_flags , unsigned int pack_flags)', 1081, 1102), ('files_pack_refs( struct ref_store * ref_store , unsigned int flags)', 1104, 1164), ('files_delete_refs( struct ref_store * ref_store , const char * msg , struct string_list * refnames , unsigned int flags)', 1166, 1212), ('rename_tmp_log_callback( const char * path , void * cb_data)', 1228, 1247), ('rename_tmp_log( struct files_ref_store * refs , const char * newrefname)', 1249, 1272), ('files_copy_or_rename_ref( struct ref_store * ref_store , const char * oldrefname , const char * newrefname , const char * logmsg , int copy)', 1281, 1436), ('files_rename_ref( struct ref_store * ref_store , const char * oldrefname , const char * newrefname , const char * logmsg)', 1438, 1444), ('files_copy_ref( struct ref_store * ref_store , const char * oldrefname , const char * newrefname , const char * logmsg)', 1446, 1452), ('close_ref_gently( struct ref_lock * lock)', 1454, 1459), ('commit_ref( struct ref_lock * lock)', 1461, 1490), ('open_or_create_logfile( const char * path , void * cb)', 1492, 1498), ('log_ref_setup( struct files_ref_store * refs , const char * refname , int force_create , int * logfd , struct strbuf * err)', 1510, 1562), ('files_create_reflog( struct ref_store * ref_store , const char * refname , int force_create , struct strbuf * err)', 1564, 1579), ('log_ref_write_fd( int fd , const struct object_id * old_oid , const struct object_id * new_oid , const char * committer , const char * msg)', 1581, 1605), ('files_log_ref_write( struct files_ref_store * refs , const char * refname , const struct object_id * old_oid , const struct object_id * new_oid , const char * msg , int flags , struct strbuf * err)', 1607, 1650), ('write_ref_to_lockfile( struct ref_lock * lock , const struct object_id * oid , struct strbuf * err)', 1656, 1688), ('commit_ref_update( struct files_ref_store * refs , struct ref_lock * lock , const struct object_id * oid , const char * logmsg , struct strbuf * err)', 1695, 1753), ('create_ref_symlink( struct ref_lock * lock , const char * target)', 1755, 1768), ('update_symref_reflog( struct files_ref_store * refs , struct ref_lock * lock , const char * refname , const char * target , const char * logmsg)', 1770, 1784), ('create_symref_locked( struct files_ref_store * refs , struct ref_lock * lock , const char * refname , const char * target , const char * logmsg)', 1786, 1807), ('files_create_symref( struct ref_store * ref_store , const char * refname , const char * target , const char * logmsg)', 1809, 1831), ('files_reflog_exists( struct ref_store * ref_store , const char * refname)', 1833, 1846), ('files_delete_reflog( struct ref_store * ref_store , const char * refname)', 1848, 1860), ('show_one_reflog_ent( struct strbuf * sb , each_reflog_ent_fn fn , void * cb_data)', 1862, 1889), ('find_beginning_of_line( char * bob , char * scan)', 1891, 1900), ('files_for_each_reflog_ent_reverse( struct ref_store * ref_store , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 1902, 2014), ('files_for_each_reflog_ent( struct ref_store * ref_store , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 2016, 2038), ('files_reflog_iterator_advance( struct ref_iterator * ref_iterator)', 2048, 2082), ('files_reflog_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 2084, 2088), ('files_reflog_iterator_abort( struct ref_iterator * ref_iterator)', 2090, 2101), ('reflog_iterator_begin( struct ref_store * ref_store , const char * gitdir)', 2109, 2123), ('reflog_iterator_select( struct ref_iterator * iter_worktree , struct ref_iterator * iter_common , void * cb_data)', 2125, 2148), ('files_reflog_iterator_begin( struct ref_store * ref_store)', 2150, 2165), ('split_head_update( struct ref_update * update , struct ref_transaction * transaction , const char * head_ref , struct string_list * affected_refnames , struct strbuf * err)', 2171, 2219), ('split_symref_update( struct files_ref_store * refs , struct ref_update * update , const char * referent , struct ref_transaction * transaction , struct string_list * affected_refnames , struct strbuf * err)', 2229, 2296), ('original_update_refname( struct ref_update * update)', 2301, 2307), ('check_old_oid( struct ref_update * update , struct object_id * oid , struct strbuf * err)', 2315, 2339), ('lock_ref_for_update( struct files_ref_store * refs , struct ref_update * update , struct ref_transaction * transaction , const char * head_ref , struct string_list * affected_refnames , struct strbuf * err)', 2354, 2496), ('files_transaction_cleanup( struct files_ref_store * refs , struct ref_transaction * transaction)', 2507, 2537), ('files_transaction_prepare( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 2539, 2696), ('files_transaction_finish( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 2698, 2836), ('files_transaction_abort( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 2838, 2847), ('ref_present( const char * refname , const struct object_id * oid , int flags , void * cb_data)', 2849, 2855), ('files_initial_transaction_commit( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 2857, 2945), ('expire_reflog_ent( struct object_id * ooid , struct object_id * noid , const char * email , timestamp_t timestamp , int tz , const char * message , void * cb_data)', 2955, 2982), ('files_reflog_expire( struct ref_store * ref_store , const char * refname , const struct object_id * oid , unsigned int flags , reflog_expiry_prepare_fn prepare_fn , reflog_expiry_should_prune_fn should_prune_fn , reflog_expiry_cleanup_fn cleanup_fn , void * policy_cb_data)', 2984, 3095), ('files_init_db( struct ref_store * ref_store , struct strbuf * err)', 3097, 3115)], '/home/kevin/thesis/git/refs/iterator.c': [('ref_iterator_advance( struct ref_iterator * ref_iterator)', 11, 14), ('ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 16, 20), ('ref_iterator_abort( struct ref_iterator * ref_iterator)', 22, 25), ('base_ref_iterator_init( struct ref_iterator * iter , struct ref_iterator_vtable * vtable , int ordered)', 27, 36), ('base_ref_iterator_free( struct ref_iterator * iter)', 38, 43), ('empty_ref_iterator_advance( struct ref_iterator * ref_iterator)', 49, 52), ('empty_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 54, 58), ('empty_ref_iterator_abort( struct ref_iterator * ref_iterator)', 60, 64), ('empty_ref_iterator_begin( void)', 72, 79), ('is_empty_ref_iterator( struct ref_iterator * ref_iterator)', 81, 84), ('merge_ref_iterator_advance( struct ref_iterator * ref_iterator)', 101, 171), ('merge_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 173, 183), ('merge_ref_iterator_abort( struct ref_iterator * ref_iterator)', 185, 201), ('merge_ref_iterator_begin( int ordered , struct ref_iterator * iter0 , struct ref_iterator * iter1 , ref_iterator_select_fn * select , void * cb_data)', 209, 232), ('overlay_iterator_select( struct ref_iterator * front , struct ref_iterator * back , void * cb_data)', 239, 258), ('overlay_ref_iterator_begin( struct ref_iterator * front , struct ref_iterator * back)', 260, 280), ('compare_prefix( const char * refname , const char * prefix)', 291, 302), ('prefix_ref_iterator_advance( struct ref_iterator * ref_iterator)', 304, 356), ('prefix_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 358, 365), ('prefix_ref_iterator_abort( struct ref_iterator * ref_iterator)', 367, 378), ('prefix_ref_iterator_begin( struct ref_iterator * iter0 , const char * prefix , int trim)', 386, 406), ('do_for_each_ref_iterator( struct ref_iterator * iter , each_ref_fn fn , void * cb_data)', 410, 435)], '/home/kevin/thesis/git/refs/packed-backend.c': [('acquire_snapshot( struct snapshot * snapshot)', 157, 160), ('clear_snapshot_buffer( struct snapshot * snapshot)', 167, 178), ('release_snapshot( struct snapshot * snapshot)', 184, 194), ('packed_ref_store_create( const char * path , unsigned int store_flags)', 196, 209), ('packed_downcast( struct ref_store * ref_store , unsigned int required_flags , const char * caller)', 217, 234), ('clear_snapshot( struct packed_ref_store * refs)', 236, 244), ('die_unterminated_line( const char * path , const char * p , size_t len)', 246, 253), ('die_invalid_line( const char * path , const char * p , size_t len)', 255, 267), ('cmp_packed_ref_records( const void * v1 , const void * v2)', 274, 292), ('cmp_record_to_refname( const char * rec , const char * refname)', 298, 313), ('sort_snapshot( struct snapshot * snapshot)', 319, 406), ('find_start_of_record( const char * buf , const char * p)', 413, 418), ('find_end_of_record( const char * p , const char * end)', 424, 429), ('verify_buffer_safe( struct snapshot * snapshot)', 449, 462), ('load_contents( struct snapshot * snapshot)', 472, 519), ('find_reference_location( struct snapshot * snapshot , const char * refname , int mustexist)', 535, 580), ('create_snapshot( struct packed_ref_store * refs)', 615, 692), ('validate_snapshot( struct packed_ref_store * refs)', 698, 703), ('get_snapshot( struct packed_ref_store * refs)', 714, 723), ('packed_read_raw_ref( struct ref_store * ref_store , const char * refname , struct object_id * oid , struct strbuf * referent , unsigned int * type)', 725, 749), ('next_record( struct packed_ref_iterator * iter)', 787, 851), ('packed_ref_iterator_advance( struct ref_iterator * ref_iterator)', 853, 876), ('packed_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 878, 892), ('packed_ref_iterator_abort( struct ref_iterator * ref_iterator)', 894, 904), ('packed_ref_iterator_begin( struct ref_store * ref_store , const char * prefix , unsigned int flags)', 912, 962), ('write_packed_entry( FILE * fh , const char * refname , const struct object_id * oid , const struct object_id * peeled)', 970, 979), ('packed_refs_lock( struct ref_store * ref_store , int flags , struct strbuf * err)', 981, 1029), ('packed_refs_unlock( struct ref_store * ref_store)', 1031, 1041), ('packed_refs_is_locked( struct ref_store * ref_store)', 1043, 1051), ('packed_init_db( struct ref_store * ref_store , struct strbuf * err)', 1064, 1068), ('write_with_updates( struct packed_ref_store * refs , struct string_list * updates , struct strbuf * err)', 1080, 1269), ('is_packed_transaction_needed( struct ref_store * ref_store , struct ref_transaction * transaction)', 1271, 1363), ('packed_transaction_cleanup( struct packed_ref_store * refs , struct ref_transaction * transaction)', 1372, 1393), ('packed_transaction_prepare( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 1395, 1453), ('packed_transaction_abort( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 1455, 1466), ('packed_transaction_finish( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 1468, 1494), ('packed_initial_transaction_commit( struct ref_store * ref_store , struct ref_transaction * transaction , struct strbuf * err)', 1496, 1501), ('packed_delete_refs( struct ref_store * ref_store , const char * msg , struct string_list * refnames , unsigned int flags)', 1503, 1550), ('packed_pack_refs( struct ref_store * ref_store , unsigned int flags)', 1552, 1560), ('packed_create_symref( struct ref_store * ref_store , const char * refname , const char * target , const char * logmsg)', 1562, 1567), ('packed_rename_ref( struct ref_store * ref_store , const char * oldrefname , const char * newrefname , const char * logmsg)', 1569, 1574), ('packed_copy_ref( struct ref_store * ref_store , const char * oldrefname , const char * newrefname , const char * logmsg)', 1576, 1581), ('packed_reflog_iterator_begin( struct ref_store * ref_store)', 1583, 1586), ('packed_for_each_reflog_ent( struct ref_store * ref_store , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 1588, 1593), ('packed_for_each_reflog_ent_reverse( struct ref_store * ref_store , const char * refname , each_reflog_ent_fn fn , void * cb_data)', 1595, 1601), ('packed_reflog_exists( struct ref_store * ref_store , const char * refname)', 1603, 1607), ('packed_create_reflog( struct ref_store * ref_store , const char * refname , int force_create , struct strbuf * err)', 1609, 1614), ('packed_delete_reflog( struct ref_store * ref_store , const char * refname)', 1616, 1620), ('packed_reflog_expire( struct ref_store * ref_store , const char * refname , const struct object_id * oid , unsigned int flags , reflog_expiry_prepare_fn prepare_fn , reflog_expiry_should_prune_fn should_prune_fn , reflog_expiry_cleanup_fn cleanup_fn , void * policy_cb_data)', 1622, 1631)], '/home/kevin/thesis/git/refs/packed-backend.h': [], '/home/kevin/thesis/git/refs/ref-cache.c': [('add_entry_to_dir( struct ref_dir * dir , struct ref_entry * entry)', 7, 17), ('get_ref_dir( struct ref_entry * entry)', 19, 32), ('create_ref_entry( const char * refname , const struct object_id * oid , int flag)', 34, 43), ('create_ref_cache( struct ref_store * refs , fill_ref_dir_fn * fill_ref_dir)', 45, 54), ('free_ref_entry( struct ref_entry * entry)', 58, 68), ('free_ref_cache( struct ref_cache * cache)', 70, 74), ('clear_ref_dir( struct ref_dir * dir)', 79, 86), ('create_dir_entry( struct ref_cache * cache , const char * dirname , size_t len , int incomplete)', 88, 98), ('ref_entry_cmp( const void * a , const void * b)', 100, 105), ('ref_entry_cmp_sslice( const void * key_ , const void * ent_)', 114, 122), ('search_ref_dir( struct ref_dir * dir , const char * refname , size_t len)', 124, 142), ('search_for_subdir( struct ref_dir * dir , const char * subdirname , size_t len , int mkdir)', 151, 172), ('find_containing_dir( struct ref_dir * dir , const char * refname , int mkdir)', 183, 199), ('find_ref_entry( struct ref_dir * dir , const char * refname)', 201, 213), ('remove_entry_from_dir( struct ref_dir * dir , const char * refname)', 215, 248), ('add_ref_entry( struct ref_dir * dir , struct ref_entry * ref)', 250, 257), ('is_dup_ref( const struct ref_entry * ref1 , const struct ref_entry * ref2)', 264, 280), ('sort_ref_dir( struct ref_dir * dir)', 286, 309), ('overlaps_prefix( const char * dirname , const char * prefix)', 326, 339), ('prime_ref_dir( struct ref_dir * dir , const char * prefix)', 346, 381), ('cache_ref_iterator_advance( struct ref_iterator * ref_iterator)', 440, 489), ('cache_ref_iterator_peel( struct ref_iterator * ref_iterator , struct object_id * peeled)', 491, 495), ('cache_ref_iterator_abort( struct ref_iterator * ref_iterator)', 497, 506), ('cache_ref_iterator_begin( struct ref_cache * cache , const char * prefix , int prime_dir)', 514, 551)], '/home/kevin/thesis/git/refs/ref-cache.h': [], '/home/kevin/thesis/git/refs/refs-internal.h': [], '/home/kevin/thesis/git/sha1dc/sha1.c': [('sha1_compression( uint32_t ihv [ 5 ] , const uint32_t m [ 16 ])', 180, 277), ('sha1_compression_W( uint32_t ihv [ 5 ] , const uint32_t W [ 80 ])', 281, 370), ('sha1_compression_states( uint32_t ihv [ 5 ] , const uint32_t m [ 16 ] , uint32_t W [ 80 ] , uint32_t states [ 80 ] [ 5 ])', 374, 789), ('sha1_recompression_step( uint32_t step , uint32_t ihvin [ 5 ] , uint32_t ihvout [ 5 ] , const uint32_t me2 [ 80 ] , const uint32_t state [ 5 ])', 1292, 1700), ('sha1_process( SHA1_CTX * ctx , const uint32_t block [ 16 ])', 1704, 1754), ('SHA1DCInit( SHA1_CTX * ctx)', 1756, 1770), ('SHA1DCSetSafeHash( SHA1_CTX * ctx , int safehash)', 1772, 1778), ('SHA1DCSetUseUBC( SHA1_CTX * ctx , int ubc_check)', 1781, 1787), ('SHA1DCSetUseDetectColl( SHA1_CTX * ctx , int detect_coll)', 1789, 1795), ('SHA1DCSetDetectReducedRoundCollision( SHA1_CTX * ctx , int reduced_round_coll)', 1797, 1803), ('SHA1DCSetCallback( SHA1_CTX * ctx , collision_block_callback callback)', 1805, 1808), ('SHA1DCUpdate( SHA1_CTX * ctx , const char * buf , size_t len)', 1810, 1847), ('SHA1DCFinal( unsigned char output [ 20 ] , SHA1_CTX * ctx)', 1857, 1896)], '/home/kevin/thesis/git/sha1dc/sha1.h': [], '/home/kevin/thesis/git/sha1dc/ubc_check.c': [('ubc_check( const uint32_t W [ 80 ] , uint32_t dvmask [ 1 ])', 104, 368)], '/home/kevin/thesis/git/sha1dc/ubc_check.h': [], '/home/kevin/thesis/git/vcs-svn/fast_export.c': [('init_postimage( void)', 21, 28), ('fast_export_init( int fd)', 30, 35), ('fast_export_deinit( void)', 37, 41), ('fast_export_delete( const char * path)', 43, 49), ('fast_export_truncate( const char * path , uint32_t mode)', 51, 55), ('fast_export_modify( const char * path , uint32_t mode , const char * dataref)', 57, 67), ('fast_export_begin_note( uint32_t revision , const char * author , const char * log , timestamp_t timestamp , const char * note_ref)', 69, 84), ('fast_export_note( const char * committish , const char * dataref)', 86, 89), ('fast_export_begin_commit( uint32_t revision , const char * author , const struct strbuf * log , const char * uuid , const char * url , timestamp_t timestamp , const char * local_ref)', 92, 122), ('fast_export_end_commit( uint32_t revision)', 124, 127), ('ls_from_rev( uint32_t rev , const char * path)', 129, 136), ('ls_from_active_commit( const char * path)', 138, 145), ('get_response_line( void)', 147, 155), ('die_short_read( struct line_buffer * input)', 157, 162), ('parse_cat_response_line( const char * header , off_t * len)', 164, 186), ('check_preimage_overflow( off_t a , off_t b)', 188, 192), ('apply_delta( off_t len , struct line_buffer * input , const char * old_data , uint32_t old_mode)', 194, 234), ('fast_export_buf_to_data( const struct strbuf * data)', 236, 241), ('fast_export_data( uint32_t mode , off_t len , struct line_buffer * input)', 243, 258), ('parse_ls_response( const char * response , uint32_t * mode , struct strbuf * dataref)', 260, 299), ('fast_export_ls_rev( uint32_t rev , const char * path , uint32_t * mode , struct strbuf * dataref)', 301, 306), ('fast_export_ls( const char * path , uint32_t * mode , struct strbuf * dataref)', 308, 312), ('fast_export_read_path( const char * path , uint32_t * mode_out)', 314, 330), ('fast_export_copy( uint32_t revision , const char * src , const char * dst)', 332, 348), ('fast_export_blob_delta( uint32_t mode , uint32_t old_mode , const char * old_data , off_t len , struct line_buffer * input)', 350, 365)], '/home/kevin/thesis/git/vcs-svn/fast_export.h': [], '/home/kevin/thesis/git/vcs-svn/line_buffer.c': [('buffer_init( struct line_buffer * buf , const char * filename)', 12, 18), ('buffer_fdinit( struct line_buffer * buf , int fd)', 20, 26), ('buffer_tmpfile_init( struct line_buffer * buf)', 28, 34), ('buffer_deinit( struct line_buffer * buf)', 36, 44), ('buffer_tmpfile_rewind( struct line_buffer * buf)', 46, 50), ('buffer_tmpfile_prepare_to_read( struct line_buffer * buf)', 52, 60), ('buffer_ferror( struct line_buffer * buf)', 62, 65), ('buffer_read_char( struct line_buffer * buf)', 67, 70), ('buffer_read_line( struct line_buffer * buf)', 73, 92), ('buffer_read_binary( struct line_buffer * buf , struct strbuf * sb , size_t size)', 94, 98), ('buffer_copy_bytes( struct line_buffer * buf , off_t nbytes)', 100, 114), ('buffer_skip_bytes( struct line_buffer * buf , off_t nbytes)', 116, 126)], '/home/kevin/thesis/git/vcs-svn/line_buffer.h': [], '/home/kevin/thesis/git/vcs-svn/sliding_window.c': [('input_error( struct line_buffer * file)', 11, 16), ('skip_or_whine( struct line_buffer * file , off_t gap)', 18, 23), ('read_to_fill_or_whine( struct line_buffer * file , struct strbuf * buf , size_t width)', 25, 32), ('check_offset_overflow( off_t offset , uintmax_t len)', 34, 44), ('move_window( struct sliding_view * view , off_t off , size_t width)', 46, 79)], '/home/kevin/thesis/git/vcs-svn/sliding_window.h': [], '/home/kevin/thesis/git/vcs-svn/svndiff.c': [('window_release( struct window * ctx)', 56, 61), ('write_strbuf( struct strbuf * sb , FILE * out)', 63, 68), ('error_short_read( struct line_buffer * input)', 70, 75), ('read_chunk( struct line_buffer * delta , off_t * delta_len , struct strbuf * buf , size_t len)', 77, 87), ('read_magic( struct line_buffer * in , off_t * len)', 89, 104), ('read_int( struct line_buffer * in , uintmax_t * result , off_t * len)', 106, 125), ('parse_int( const char ** buf , size_t * result , const char * end)', 127, 144), ('read_offset( struct line_buffer * in , off_t * result , off_t * len)', 146, 155), ('read_length( struct line_buffer * in , size_t * result , off_t * len)', 157, 166), ('copyfrom_source( struct window * ctx , const char ** instructions , size_t nbytes , const char * insns_end)', 168, 179), ('copyfrom_target( struct window * ctx , const char ** instructions , size_t nbytes , const char * instructions_end)', 181, 192), ('copyfrom_data( struct window * ctx , size_t * data_pos , size_t nbytes)', 194, 203), ('parse_first_operand( const char ** buf , size_t * out , const char * end)', 205, 213), ('execute_one_instruction( struct window * ctx , const char ** instructions , size_t * data_pos)', 215, 238), ('apply_window_in_core( struct window * ctx)', 240, 257), ('apply_one_window( struct line_buffer * delta , off_t * delta_len , struct sliding_view * preimage , FILE * out)', 259, 289), ('svndiff0_apply( struct line_buffer * delta , off_t delta_len , struct sliding_view * preimage , FILE * postimage)', 291, 309)], '/home/kevin/thesis/git/vcs-svn/svndiff.h': [], '/home/kevin/thesis/git/vcs-svn/svndump.c': [('reset_node_ctx( char * fname)', 58, 71), ('reset_rev_ctx( uint32_t revision)', 73, 80), ('reset_dump_ctx( const char * url)', 82, 89), ('handle_property( const struct strbuf * key_buf , struct strbuf * val , uint32_t * type_set)', 91, 144), ('die_short_read( void)', 146, 151), ('read_props( void)', 153, 206), ('handle_node( void)', 208, 300), ('begin_revision( const char * remote_ref)', 302, 309), ('end_revision( const char * note_ref)', 311, 323), ('svndump_read( const char * url , const char * local_ref , const char * notes_ref)', 325, 483), ('init( int report_fd)', 485, 499), ('svndump_init( const char * filename)', 501, 507), ('svndump_init_fd( int in_fd , int back_fd)', 509, 515), ('svndump_deinit( void)', 517, 532), ('svndump_reset( void)', 534, 540)], '/home/kevin/thesis/git/vcs-svn/svndump.h': [], '/home/kevin/thesis/git/xdiff/xdiff.h': [], '/home/kevin/thesis/git/xdiff/xdiffi.c': [('xdl_split( unsigned long const * ha1 , long off1 , long lim1 , unsigned long const * ha2 , long off2 , long lim2 , long * kvdf , long * kvdb , int need_min , xdpsplit_t * spl , xdalgoenv_t * xenv)', 62, 260), ('xdl_recs_cmp( diffdata_t * dd1 , long off1 , long lim1 , diffdata_t * dd2 , long off2 , long lim2 , long * kvdf , long * kvdb , int need_min , xdalgoenv_t * xenv)', 268, 321), ('xdl_do_diff( mmfile_t * mf1 , mmfile_t * mf2 , xpparam_t const * xpp , xdfenv_t * xe)', 324, 383), ('xdl_add_change( xdchange_t * xscr , long i1 , long i2 , long chg1 , long chg2)', 386, 400), ('recs_match( xrecord_t * rec1 , xrecord_t * rec2 , long flags)', 403, 409), ('get_indent( xrecord_t * rec)', 424, 446), ('measure_split( const xdfile_t * xdf , long split , struct split_measurement * m)', 502, 540), ('score_add_split( const struct split_measurement * m , struct split_score * s)', 604, 680), ('score_cmp( struct split_score * s1 , struct split_score * s2)', 682, 689), ('group_init( xdfile_t * xdf , struct xdlgroup * g)', 723, 728), ('group_next( xdfile_t * xdf , struct xdlgroup * g)', 734, 744), ('group_previous( xdfile_t * xdf , struct xdlgroup * g)', 750, 760), ('group_slide_down( xdfile_t * xdf , struct xdlgroup * g , long flags)', 767, 781), ('group_slide_up( xdfile_t * xdf , struct xdlgroup * g , long flags)', 788, 802), ('xdl_bug( const char * msg)', 804, 808), ('xdl_change_compact( xdfile_t * xdf , xdfile_t * xdfo , long flags)', 815, 942), ('xdl_build_script( xdfenv_t * xe , xdchange_t ** xscr)', 945, 968), ('xdl_free_script( xdchange_t * xscr)', 971, 978), ('xdl_call_hunk_func( xdfenv_t * xe , xdchange_t * xscr , xdemitcb_t * ecb , xdemitconf_t const * xecfg)', 980, 995), ('xdl_mark_ignorable( xdchange_t * xscr , xdfenv_t * xe , long flags)', 997, 1016), ('xdl_diff( mmfile_t * mf1 , mmfile_t * mf2 , xpparam_t const * xpp , xdemitconf_t const * xecfg , xdemitcb_t * ecb)', 1018, 1050)], '/home/kevin/thesis/git/xdiff/xdiffi.h': [], '/home/kevin/thesis/git/xdiff/xemit.c': [('xdl_get_rec( xdfile_t * xdf , long ri , char const ** rec)', 25, 30), ('xdl_emit_record( xdfile_t * xdf , long ri , char const * pre , xdemitcb_t * ecb)', 33, 44), ('xdl_get_hunk( xdchange_t ** xscr , xdemitconf_t const * xecfg)', 52, 95), ('def_ff( const char * rec , long len , char * buf , long sz , void * priv)', 98, 112), ('match_func_rec( xdfile_t * xdf , xdemitconf_t const * xecfg , long ri , char * buf , long sz)', 114, 122), ('is_func_rec( xdfile_t * xdf , xdemitconf_t const * xecfg , long ri)', 124, 128), ('get_func_line( xdfenv_t * xe , xdemitconf_t const * xecfg , struct func_line * func_line , long start , long limit)', 135, 153), ('is_empty_rec( xdfile_t * xdf , long ri)', 155, 165), ('xdl_emit_diff( xdfenv_t * xe , xdchange_t * xscr , xdemitcb_t * ecb , xdemitconf_t const * xecfg)', 167, 312)], '/home/kevin/thesis/git/xdiff/xemit.h': [], '/home/kevin/thesis/git/xdiff/xhistogram.c': [('cmp_recs( xpparam_t const * xpp , xrecord_t * r1 , xrecord_t * r2)', 93, 99), ('scanA( struct histindex * index , int line1 , int count1)', 110, 161), ('try_lcs( struct histindex * index , struct region * lcs , int b_ptr , int line1 , int count1 , int line2 , int count2)', 163, 234), ('find_lcs( struct histindex * index , struct region * lcs , int line1 , int count1 , int line2 , int count2)', 236, 249), ('fall_back_to_classic_diff( struct histindex * index , int line1 , int count1 , int line2 , int count2)', 251, 259), ('histogram_diff( xpparam_t const * xpp , xdfenv_t * env , int line1 , int count1 , int line2 , int count2)', 261, 352), ('xdl_do_histogram_diff( mmfile_t * file1 , mmfile_t * file2 , xpparam_t const * xpp , xdfenv_t * env)', 354, 363)], '/home/kevin/thesis/git/xdiff/xinclude.h': [], '/home/kevin/thesis/git/xdiff/xmacros.h': [], '/home/kevin/thesis/git/xdiff/xmerge.c': [('xdl_append_merge( xdmerge_t ** merge , int mode , long i0 , long chg0 , long i1 , long chg1 , long i2 , long chg2)', 50, 79), ('xdl_cleanup_merge( xdmerge_t * c)', 81, 94), ('xdl_merge_cmp_lines( xdfenv_t * xe1 , int i1 , xdfenv_t * xe2 , int i2 , int line_count , long flags)', 96, 110), ('xdl_recs_copy_0( int use_orig , xdfenv_t * xe , int i , int count , int needs_cr , int add_nl , char * dest)', 112, 140), ('xdl_recs_copy( xdfenv_t * xe , int i , int count , int needs_cr , int add_nl , char * dest)', 142, 145), ('xdl_orig_copy( xdfenv_t * xe , int i , int count , int needs_cr , int add_nl , char * dest)', 147, 150), ('is_eol_crlf( xdfile_t * file , int i)', 157, 179), ('is_cr_needed( xdfenv_t * xe1 , xdfenv_t * xe2 , xdmerge_t * m)', 181, 194), ('fill_conflict_hunk( xdfenv_t * xe1 , const char * name1 , xdfenv_t * xe2 , const char * name2 , const char * name3 , int size , int i , int style , xdmerge_t * m , char * dest , int marker_size)', 196, 281), ('xdl_fill_merge_buffer( xdfenv_t * xe1 , const char * name1 , xdfenv_t * xe2 , const char * name2 , const char * ancestor_name , int favor , xdmerge_t * m , char * dest , int style , int marker_size)', 283, 323), ('xdl_refine_conflicts( xdfenv_t * xe1 , xdfenv_t * xe2 , xdmerge_t * m , xpparam_t const * xpp)', 329, 396), ('line_contains_alnum( const char * ptr , long size)', 398, 404), ('lines_contain_alnum( xdfenv_t * xe , int i , int chg)', 406, 413), ('xdl_merge_two_conflicts( xdmerge_t * m)', 419, 426), ('xdl_simplify_non_conflicts( xdfenv_t * xe1 , xdmerge_t * m , int simplify_if_no_alnum)', 433, 460), ('xdl_do_merge( xdfenv_t * xe1 , xdchange_t * xscr1 , xdfenv_t * xe2 , xdchange_t * xscr2 , xmparam_t const * xmp , mmbuffer_t * result)', 471, 631), ('xdl_merge( mmfile_t * orig , mmfile_t * mf1 , mmfile_t * mf2 , xmparam_t const * xmp , mmbuffer_t * result)', 633, 686)], '/home/kevin/thesis/git/xdiff/xpatience.c': [('is_anchor( xpparam_t const * xpp , const char * line)', 79, 87), ('insert_record( xpparam_t const * xpp , int line , struct hashmap * map , int pass)', 90, 139), ('fill_hashmap( mmfile_t * file1 , mmfile_t * file2 , xpparam_t const * xpp , xdfenv_t * env , struct hashmap * result , int line1 , int count1 , int line2 , int count2)', 148, 175), ('binary_search( struct entry ** sequence , int longest , struct entry * entry)', 181, 196), ('find_longest_common_sequence( struct hashmap * map)', 207, 252), ('match( struct hashmap * map , int line1 , int line2)', 254, 260), ('walk_common_sequence( struct hashmap * map , struct entry * first , int line1 , int count1 , int line2 , int count2)', 266, 317), ('fall_back_to_classic_diff( struct hashmap * map , int line1 , int count1 , int line2 , int count2)', 319, 327), ('patience_diff( mmfile_t * file1 , mmfile_t * file2 , xpparam_t const * xpp , xdfenv_t * env , int line1 , int count1 , int line2 , int count2)', 335, 379), ('xdl_do_patience_diff( mmfile_t * file1 , mmfile_t * file2 , xpparam_t const * xpp , xdfenv_t * env)', 381, 390)], '/home/kevin/thesis/git/xdiff/xprepare.c': [('xdl_init_classifier( xdlclassifier_t * cf , long size , long flags)', 71, 99), ('xdl_free_classifier( xdlclassifier_t * cf)', 102, 107), ('xdl_classify_record( unsigned int pass , xdlclassifier_t * cf , xrecord_t ** rhash , unsigned int hbits , xrecord_t * rec)', 110, 157), ('xdl_prepare_ctx( unsigned int pass , mmfile_t * mf , long narec , xpparam_t const * xpp , xdlclassifier_t * cf , xdfile_t * xdf)', 160, 248), ('xdl_free_ctx( xdfile_t * xdf)', 251, 259), ('xdl_prepare_env( mmfile_t * mf1 , mmfile_t * mf2 , xpparam_t const * xpp , xdfenv_t * xe)', 262, 312), ('xdl_free_env( xdfenv_t * xe)', 315, 319), ('xdl_clean_mmatch( char const * dis , long i , long s , long e)', 322, 377), ('xdl_cleanup_records( xdlclassifier_t * cf , xdfile_t * xdf1 , xdfile_t * xdf2)', 385, 442), ('xdl_trim_ends( xdfile_t * xdf1 , xdfile_t * xdf2)', 448, 471), ('xdl_optimize_ctxs( xdlclassifier_t * cf , xdfile_t * xdf1 , xdfile_t * xdf2)', 474, 483)], '/home/kevin/thesis/git/xdiff/xprepare.h': [], '/home/kevin/thesis/git/xdiff/xtypes.h': [], '/home/kevin/thesis/git/xdiff/xutils.c': [('xdl_bogosqrt( long n)', 30, 40), ('xdl_emit_diffrec( char const * rec , long size , char const * pre , long psize , xdemitcb_t * ecb)', 43, 63), ('xdl_mmfile_first( mmfile_t * mmf , long * size)', 65, 69), ('xdl_mmfile_size( mmfile_t * mmf)', 72, 75), ('xdl_cha_init( chastore_t * cha , long isize , long icount)', 78, 87), ('xdl_cha_free( chastore_t * cha)', 90, 97), ('xdl_cha_alloc( chastore_t * cha)', 100, 123), ('xdl_guess_lines( mmfile_t * mf , long sample)', 125, 144), ('xdl_blankline( const char * line , long size , long flags)', 146, 157), ('ends_with_optional_cr( const char * l , long s , long i)', 163, 175), ('xdl_recmatch( const char * l1 , long s1 , const char * l2 , long s2 , long flags)', 177, 254), ('xdl_hash_record_with_whitespace( char const ** data , char const * top , long flags)', 256, 299), ('xdl_hash_record( char const ** data , char const * top , long flags)', 301, 315), ('xdl_hashbits( unsigned int size)', 317, 322), ('xdl_num_out( char * out , long val)', 325, 345), ('xdl_emit_hunk_hdr( long s1 , long c1 , long s2 , long c2 , const char * func , long funclen , xdemitcb_t * ecb)', 347, 394), ('xdl_fall_back_diff( xdfenv_t * diff_env , xpparam_t const * xpp , int line1 , int count1 , int line2 , int count2)', 396, 425)], '/home/kevin/thesis/git/xdiff/xutils.h': []}
